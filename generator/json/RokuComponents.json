{
  "Components": {
    "roImageCanvas": {
      "shortDescription": "The roImageCanvas component provides an interface to render graphic elements at specific spots on the screen.",
      "interfaceNames": [
        "ifImageCanvas",
        "ifHttpAgent"
      ],
      "eventNames": [
        "roImageCanvasEvent"
      ],
      "name": "roImageCanvas",
      "description": "The roImageCanvas component provides an interface to render graphic elements at specific spots on the screen.Although it is not intended to be a full-fledged graphics component for high-performance gaming, it does provide a simple interface for building custom animations out of arrays of images displayed on the screen.An item (graphical element) may be one of three types: image, text, or colored rectangle.  The item type is determined by the fields set on the item.ImageIf the URL attribute is set, the item is displayed as an image.Attributes (see ):URL CompositionMode SourceRect TargetRect TargetTranslation TargetRotationTextIf the Text attribute is set, the item is displayed as text.Attributes (see ):Text TextAttrs { Color, Font, HAlign, VAlign, Direction } TargetRectRectangleIf the Color attribute is set, the item is displayed as a filled rectangle.Attributes (see ):Color TargetRect vbExample: displays two images and some text on the screenSub showImageCanvas() canvasItems \u003d [ {Â  url:\"http://192.168.1.23/boardwalk.jpg\" TargetRect:{x:100,y:100,w:400,h:300} }, { url:\"http://192.168.1.23/walking.jpg\" TargetRect:{x:500,y:400,w:400,h:300} }, {Â  Text:\"Hello ImageCanvas\" TextAttrs:{Color:\"#FFCCCCCC\", Font:\"Medium\", HAlign:\"HCenter\", VAlign:\"VCenter\", Direction:\"LeftToRight\"} TargetRect:{x:390,y:357,w:500,h:60} } ] canvas \u003d CreateObject(\"roImageCanvas\") port \u003d CreateObject(\"roMessagePort\") canvas.SetMessagePort(port) \u0027Set opaque background canvas.SetLayer(0, {Color:\"#FF000000\", CompositionMode:\"Source\"}) canvas.SetRequireAllImagesToDraw(true) canvas.SetLayer(1, canvasItems) canvas.Show() while(true) msg \u003d wait(0,port) if type(msg) \u003d \"roImageCanvasEvent\" then if (msg.isRemoteKeyPressed()) then i \u003d msg.GetIndex() print \"Key Pressed - \" ; msg.GetIndex() if (i \u003d 2) then \u0027 Up - Close the screen. canvas.close() end if else if (msg.isScreenClosed()) then print \"Closed\" return end if end if end while End Sub",
      "descriptionHTML": "The roImageCanvas component provides an interface to render graphic elements at specific spots on the screen.Although it is not intended to be a full-fledged graphics component for high-performance gaming, it does provide a simple interface for building custom animations out of arrays of images displayed on the screen.An item (graphical element) may be one of three types: image, text, or colored rectangle.\u0026nbsp; The item type is determined by the \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"Content Meta-Data\" /\u003e\n\u003c/ac:link\u003e fields set on the item.ImageIf the \u003cstrong\u003eURL\u003c/strong\u003e attribute is set, the item is displayed as an image.Attributes (see \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"Content Meta-Data\" /\u003e\n\u003c/ac:link\u003e):\u003cstrong\u003eURL\u003c/strong\u003e\u003cbr\u003e\u003cstrong\u003eCompositionMode\u003c/strong\u003e\u003cbr\u003e\u003cstrong\u003eSourceRect\u003c/strong\u003e\u003cbr\u003e\u003cstrong\u003eTargetRect\u003c/strong\u003e\u003cbr\u003e\u003cstrong\u003eTargetTranslation\u003c/strong\u003e\u003cbr\u003e\u003cstrong\u003eTargetRotation\u003c/strong\u003eTextIf the \u003cstrong\u003eText\u003c/strong\u003e attribute is set, the item is displayed as text.Attributes (see \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"Content Meta-Data\" /\u003e\n\u003c/ac:link\u003e):\u003cstrong\u003eText\u003c/strong\u003e\u003cbr\u003e\u003cstrong\u003eTextAttrs { Color, Font, HAlign, VAlign, Direction }\u003c/strong\u003e\u003cbr\u003e\u003cstrong\u003eTargetRect\u003c/strong\u003eRectangleIf the \u003cstrong\u003eColor\u003c/strong\u003e attribute is set, the item is displayed as a filled rectangle.Attributes (see \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"Content Meta-Data\" /\u003e\n\u003c/ac:link\u003e):\u003cstrong\u003eColor\u003cbr\u003eTargetRect\u003c/strong\u003e\u0026nbsp;\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example: displays two images and some text on the screen\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Sub showImageCanvas() canvasItems \u003d [ {Â\u0026nbsp; url:\"http://192.168.1.23/boardwalk.jpg\" TargetRect:{x:100,y:100,w:400,h:300} }, { url:\"http://192.168.1.23/walking.jpg\" TargetRect:{x:500,y:400,w:400,h:300} }, {Â\u0026nbsp; Text:\"Hello ImageCanvas\" TextAttrs:{Color:\"#FFCCCCCC\", Font:\"Medium\", HAlign:\"HCenter\", VAlign:\"VCenter\", Direction:\"LeftToRight\"} TargetRect:{x:390,y:357,w:500,h:60} } ] canvas \u003d CreateObject(\"roImageCanvas\") port \u003d CreateObject(\"roMessagePort\") canvas.SetMessagePort(port) \u0027Set opaque background canvas.SetLayer(0, {Color:\"#FF000000\", CompositionMode:\"Source\"}) canvas.SetRequireAllImagesToDraw(true) canvas.SetLayer(1, canvasItems) canvas.Show() while(true) msg \u003d wait(0,port) if type(msg) \u003d \"roImageCanvasEvent\" then if (msg.isRemoteKeyPressed()) then i \u003d msg.GetIndex() print \"Key Pressed - \" ; msg.GetIndex() if (i \u003d 2) then \u0027 Up - Close the screen. canvas.close() end if else if (msg.isScreenClosed()) then print \"Closed\" return end if end if end while End Sub\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roImageCanvas",
      "documentationVersion": 9
    },
    "roTimespan": {
      "shortDescription": "The Timespan object provides an interface to a simple timer for tracking the duration of activities. It\u0027s useful for tracking how an action has taken or if a specified time has elapsed from some starting event.",
      "interfaceNames": [
        "ifTimespan"
      ],
      "eventNames": [],
      "name": "roTimespan",
      "description": "vbExample: Timing an activityÂ  REM ****************************************************** REM Compute the number of millisecs to perform a task REM ****************************************************** timer \u003d CreateObject(\"roTimespan\") timer.Mark() DoTimeConsumingTask() Print \"Task took: \" + itostr(timer.TotalMilliseconds()) REM ****************************************************** REM Compute how many seconds until rental expires REM ****************************************************** Function secondsLeft(String expirationDate) As Integer str \u003d expirationDate if str \u003d invalid return -1 ts \u003d CreateObject(\"roTimespan\") seconds \u003d ts.GetSecondsToISO8601Date(str) print \"Expires: \" + str + \" secs: \" + Stri(seconds) return seconds End Function",
      "descriptionHTML": "\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example: Timing an activity\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Â\u0026nbsp; REM ****************************************************** REM Compute the number of millisecs to perform a task REM ****************************************************** timer \u003d CreateObject(\"roTimespan\") timer.Mark() DoTimeConsumingTask() Print \"Task took: \" + itostr(timer.TotalMilliseconds()) REM ****************************************************** REM Compute how many seconds until rental expires REM ****************************************************** Function secondsLeft(String expirationDate) As Integer str \u003d expirationDate if str \u003d invalid return -1 ts \u003d CreateObject(\"roTimespan\") seconds \u003d ts.GetSecondsToISO8601Date(str) print \"Expires: \" + str + \" secs: \" + Stri(seconds) return seconds End Function\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roTimespan",
      "documentationVersion": 2
    },
    "roBoolean": {
      "shortDescription": " Object equivalent for intrinsic type Boolean.",
      "interfaceNames": [
        "ifBoolean",
        "ifToStr"
      ],
      "eventNames": [],
      "name": "roBoolean",
      "description": " This is useful in the following situations:When an object is needed, instead of an intrinsic value. For example, \"roList\" maintains a list of objects. If an Boolean is added to roList, it will be automatically wrapped in an roBoolean by the language interpreter. When a function that expects a BrightScript Component as a parameter is passed a boolean, BrightScript automatically creates the equivalent BrightScript Component. If any object exposes the ifBoolean interface, that object can be used in any expression that expects an intrinsic value.",
      "descriptionHTML": "\u0026nbsp;This is useful in the following situations:\u003cli\u003eWhen an object is needed, instead of an intrinsic value. For example, \"roList\" maintains a list of objects. If an Boolean is added to roList, it will be automatically wrapped in an roBoolean by the language interpreter. When a function that expects a BrightScript Component as a parameter is passed a boolean, BrightScript automatically creates the equivalent BrightScript Component.\u003c/li\u003e\n\u003cli\u003eIf any object exposes the ifBoolean interface, that object can be used in any expression that expects an intrinsic value.\u003cbr\u003e\u003cbr\u003e\u003c/li\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roBoolean",
      "documentationVersion": 2
    },
    "roEVPCipher": {
      "shortDescription": "The EVP Cipher component provides an interface to the OpenSSL EVP library of symmetric cipher commands. The EVP library provides a high-level interface to cryptographic functions to implement digital \"envelopes\".",
      "interfaceNames": [
        "ifEVPCipher"
      ],
      "eventNames": [],
      "name": "roEVPCipher",
      "description": "These commands allow data to be encrypted or decrypted using various block and stream ciphers using keys based on passwords or explicitly provided. Some of the ciphers do not have large keys and others have security implications if not used correctly. A beginner is advised to just use a strong block cipher in CBC mode such as bf or des3. All the block ciphers normally use PKCS#5 padding also known as standard block padding. If padding is disabled then the input data must be a multiple of the cipher block length.For additional information on the OpenSSL library of symmetric ciphers see: http://www.openssl.org/docs/apps/enc.html List of Supported Ciphers:Name Cipher Key size (bits) Block size (bits) bf-cbc Blowfish in CBC mode 128 64 bf Alias for bf-cbc 128 64 bf-cfb Blowfish in CFB mode 128 64 bf-ecb Blowfish in ECB mode 128 64 bf-ofb Blowfish in OFB mode 128 64 des-cbc DES in CBC mode 56 64 des Alias for des-cbc 56 64 des-cfb DES in CBC mode 56 64 des-ecb DES in ECB mode 56 64 des-ofb DES in OFB mode 56 64 des-ede-cbc Two key triple DES EDE in CBC mode 80 64 des-ede Two key triple DES EDE in ECB mode 80 64 des-ede-cfb Two key triple DES EDE in CFB mode 80 64 des-ede-ofb Two key triple DES EDE in OFB mode 80 64 des-ede3-cbc Three key triple DES EDE in CBC mode 112 64 des-ede3 Three key triple DES EDE in ECB mode 112 64 des3 Alias for des-ede3-cbc 112 64 des-ede3-cfb Three key triple DES EDE in CFB mode 112 64 des-ede3-ofb Three key triple DES EDE in OFB mode 112 64 desx DESX algorithm. approx. 119 64 desx-cbc DESX in CBC mode approx. 119 64 aes-[128|192|256]-cbc 128/192/256 bit AES in CBC mode 128,192,256 128 aes-[128|192|256] Alias for aes-[128|192|256]-cbc 128,192,256 128 aes-[128|192|256]-cfb 128/192/256 bit AES in 128 bit CFB mode 128,192,256 128 aes-[128|192|256]-cfb1 128/192/256 bit AES in 1 bit CFB mode 128,192,256 128 aes-[128|192|256]-cfb8 128/192/256 bit AES in 8 bit CFB mode 128,192,256 128 aes-[128|192|256]-ecb 128/192/256 bit AES in ECB mode 128,192,256 128 aes-[128|192|256]-ofb 128/192/256 bit AES in OFB mode 128,192,256 128  ",
      "descriptionHTML": "These commands allow data to be encrypted or decrypted using various block and stream ciphers using keys based on passwords or explicitly provided.\u0026nbsp;Some of the ciphers do not have large keys and others have security implications if not used correctly. A beginner is advised to just use a strong block cipher in CBC mode such as bf or des3. All the block ciphers normally use PKCS#5 padding also known as standard block padding. If padding is disabled then the input data must be a multiple of the cipher block length.For additional information on the OpenSSL library of symmetric ciphers see: \u003cbr class\u003d\"atl-forced-newline\"\u003e \u003ca href\u003d\"http://www.openssl.org/docs/apps/enc.html\"\u003ehttp://www.openssl.org/docs/apps/enc.html\u003c/a\u003e\u0026nbsp;List of Supported Ciphers:\u003ctbody style\u003d\"margin-left: 30.0px;\"\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003cth style\u003d\"margin-left: 30.0px;\"\u003eName\u003c/th\u003e\n  \u003cth style\u003d\"margin-left: 30.0px;\"\u003eCipher\u003c/th\u003e\n  \u003cth colspan\u003d\"1\"\u003eKey size (bits)\u003c/th\u003e\n  \u003cth colspan\u003d\"1\"\u003eBlock size (bits)\u003c/th\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003ebf-cbc\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003eBlowfish in CBC mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003ebf\u003c/td\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003eAlias for bf-cbc\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003ebf-cfb\u003c/td\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003eBlowfish in CFB mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003ebf-ecb\u003c/td\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003eBlowfish in ECB mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003ebf-ofb\u003c/td\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003eBlowfish in OFB mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003edes-cbc\u003c/td\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003eDES in CBC mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e56\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003edes\u003c/td\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003eAlias for des-cbc\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e56\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003edes-cfb\u003c/td\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003eDES in CBC mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e56\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003edes-ecb\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003eDES in ECB mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e56\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003edes-ofb\u003c/td\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003eDES in OFB mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e56\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003edes-ede-cbc\u003c/td\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003eTwo key triple DES EDE in CBC mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e80\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003edes-ede\u003c/td\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003eTwo key triple DES EDE in ECB mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e80\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003edes-ede-cfb\u003c/td\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003eTwo key triple DES EDE in CFB mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e80\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003edes-ede-ofb\u003c/td\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003eTwo key triple DES EDE in OFB mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e80\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003edes-ede3-cbc\u003c/td\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003eThree key triple DES EDE in CBC mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e112\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003edes-ede3\u003c/td\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003eThree key triple DES EDE in ECB mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e112\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003edes3\u003c/td\u003e\n  \u003ctd style\u003d\"margin-left: 30.0px;\"\u003eAlias for des-ede3-cbc\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e112\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003edes-ede3-cfb\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003eThree key triple DES EDE in CFB mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e112\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003edes-ede3-ofb\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003eThree key triple DES EDE in OFB mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e112\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003edesx\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003eDESX algorithm.\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003eapprox. 119\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003edesx-cbc\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003eDESX in CBC mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003eapprox. 119\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e64\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003eaes-[128|192|256]-cbc\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003e128/192/256 bit AES in CBC mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128,192,256\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003eaes-[128|192|256]\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003eAlias for aes-[128|192|256]-cbc\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128,192,256\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003eaes-[128|192|256]-cfb\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003e128/192/256 bit AES in 128 bit CFB mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128,192,256\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003eaes-[128|192|256]-cfb1\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003e128/192/256 bit AES in 1 bit CFB mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128,192,256\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003eaes-[128|192|256]-cfb8\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003e128/192/256 bit AES in 8 bit CFB mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128,192,256\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003eaes-[128|192|256]-ecb\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003e128/192/256 bit AES in ECB mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128,192,256\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr style\u003d\"margin-left: 30.0px;\"\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003eaes-[128|192|256]-ofb\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\" style\u003d\"margin-left: 30.0px;\"\u003e128/192/256 bit AES in OFB mode\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128,192,256\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003e128\u003c/td\u003e\n \u003c/tr\u003e\n\u003c/tbody\u003e\u0026nbsp;\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roEVPCipher",
      "documentationVersion": 1
    },
    "roMessageDialog": {
      "shortDescription": "The Message Dialog displays a formatted, multi-line text message to the user. The dialog may optionally be displayed with a busy animation to indicate progress on a long running operation. The dialog will automatically handle formatting of text and resize to fit. It may also display buttons to get user acknowledgment or a selection choice. The following example shows an roMessageDialog with a single done button. When the title, text and button are added, the dialog automatically formats and resizes the dialog as needed for display when Show() is called.",
      "interfaceNames": [
        "ifMessageDialog",
        "ifSetMessagePort",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roMessageDialogEvent"
      ],
      "name": "roMessageDialog",
      "description": "The Message Dialog displays a formatted, multi-line text message to the user. The dialog may optionally be displayed with a busy animation to indicate progress on a long running operation. The dialog will automatically handle formatting of text and resize to fit. It may also display buttons to get user acknowledgment or a selection choice. The following example shows an roMessageDialog with a single done button. When the title, text and button are added, the dialog automatically formats and resizes the dialog as needed for display when Show() is called.Diagram: roMessageDialogThe following code example creates a message dialog and displays it to the user. Note that dialogs are not full screen and that the previous screen is dimmed and displays in the background. When the user presses the message dialog button, the dialog is dismissed and the previous screen comes to the foreground.  Since dialog.EnableBackButton(true) is also called, the message dialog is dismissed when the remote control\u0027s back button is pressed as well.  You can of course add additional buttons to your message dialogs that do things other than dismiss the dialog.  You would simply need to implement button specific event handling code for these cases in the dlgMsg.isButtonPressed() code block.vbExampleFunction ShowMessageDialog() As Void port \u003d CreateObject(\"roMessagePort\") dialog \u003d CreateObject(\"roMessageDialog\") dialog.SetMessagePort(port) dialog.SetTitle(\"[Message dialog title]\") dialog.SetText(\"[Message dialog text............]\") dialog.AddButton(1, \"[button text]\") dialog.EnableBackButton(true) dialog.Show() While True dlgMsg \u003d wait(0, dialog.GetMessagePort()) If type(dlgMsg) \u003d \"roMessageDialogEvent\" if dlgMsg.isButtonPressed() if dlgMsg.GetIndex() \u003d 1 exit while end if else if dlgMsg.isScreenClosed() exit while end if end if end while End FunctionImage: roMessageDialog example results",
      "descriptionHTML": "The Message Dialog displays a formatted, multi-line text message to the user. The dialog may optionally be displayed with a busy animation to indicate progress on a long running operation. The dialog will automatically handle formatting of text and resize to fit. It may also display buttons to get user acknowledgment or a selection choice. \u003cbr class\u003d\"atl-forced-newline\"\u003e The following example shows an roMessageDialog with a single done button. When the title, text and button are added, the dialog automatically formats and resizes the dialog as needed for display when Show() is called. \u003cbr class\u003d\"atl-forced-newline\"\u003e \n\u003cac:image ac:height\u003d\"385\" ac:width\u003d\"561\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddav3c6032f633e547a093e4071af90179fb.png\" /\u003e\n\u003c/ac:image\u003eDiagram: roMessageDialog\u003cbr class\u003d\"atl-forced-newline\"\u003e The following code example creates a message dialog and displays it to the user. Note that dialogs are not full screen and that the previous screen is dimmed and displays in the background. When the user presses the message dialog button, the dialog is dismissed and the previous screen comes to the foreground.\u0026nbsp; Since dialog.EnableBackButton(true) is also called, the message dialog is dismissed when the remote control\u0027s back button is pressed as well.\u0026nbsp; You can of course add additional buttons to your message dialogs that do things other than dismiss the dialog.\u0026nbsp; You would simply need to implement button specific event handling code for these cases in the dlgMsg.isButtonPressed() code block.\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Function ShowMessageDialog() As Void port \u003d CreateObject(\"roMessagePort\") dialog \u003d CreateObject(\"roMessageDialog\") dialog.SetMessagePort(port) dialog.SetTitle(\"[Message dialog title]\") dialog.SetText(\"[Message dialog text............]\") dialog.AddButton(1, \"[button text]\") dialog.EnableBackButton(true) dialog.Show() While True dlgMsg \u003d wait(0, dialog.GetMessagePort()) If type(dlgMsg) \u003d \"roMessageDialogEvent\" if dlgMsg.isButtonPressed() if dlgMsg.GetIndex() \u003d 1 exit while end if else if dlgMsg.isScreenClosed() exit while end if end if end while End Function\n\u003c/ac:plain-text-body\u003eImage: roMessageDialog example results\u003cbr class\u003d\"atl-forced-newline\"\u003e \n\u003cac:image ac:height\u003d\"384\" ac:width\u003d\"576\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddavc8f72a4bbe094babd49ba79c246d05e3.png\" /\u003e\n\u003c/ac:image\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roMessageDialog",
      "documentationVersion": 2
    },
    "roInt": {
      "shortDescription": "Object equivalent for intrinsic type Integer.",
      "interfaceNames": [
        "ifInt",
        "ifToStr",
        "ifIntOps"
      ],
      "eventNames": [],
      "name": "roInt",
      "description": "This is useful in the following situations:When an object is needed, instead of an intrinsic value. For example, \"roList\" maintains a list of objects. If an Integer is added to roList, it will be automatically wrapped in an roInt by the language interpreter. When a function that expects a BrightScript Component as a parameter is passed an int, BrightScript automatically creates the equivalent BrightScript Component. If any object exposes the ifInt interface, that object can be used in any expression that expects an intrinsic value. For example, in this way an roTouchEvent can be used as an integer whose value is the userid of the roTouchEvent. If o is an roInt, then the following statements have the following effects print o \u0027 prints o.GetInt() i%\u003do \u0027 assigns the integer i% the value of o.GetInt() k\u003do \u0027presumably k is dynamic typed, so it becomes another reference to the roInt o o\u003d5 \u0027this is NOT the same as o.SetInt(5). Instead it releases o, and \u0027changes the type of o to Integer (o is dynamically typed). And assigns it to 5. ExampleBrightScript\u003e o\u003dCreateObject(\"roInt\") BrightScript\u003e o.SetInt(555) BrightScript\u003e print o 555 BrightScript\u003e print o.GetInt() 555 BrightScript\u003e print o-55 500",
      "descriptionHTML": "This is useful in the following situations:\u003cli\u003eWhen an object is needed, instead of an intrinsic value. For example, \"roList\" maintains a list of objects. If an Integer is added to roList, it will be automatically wrapped in an roInt by the language interpreter. When a function that expects a BrightScript Component as a parameter is passed an int, BrightScript automatically creates the equivalent BrightScript Component.\u003c/li\u003e\n\u003cli\u003eIf any object exposes the ifInt interface, that object can be used in any expression that expects an intrinsic value. For example, in this way an roTouchEvent can be used as an integer whose value is the userid of the roTouchEvent.\u003c/li\u003e\u0026nbsp;\u003cac:rich-text-body\u003e\n \u003cp\u003eIf o is an roInt, then the following statements have the following effects\u003c/p\u003e\n \u003col\u003e\n  \u003cli\u003eprint o \u0027 prints o.GetInt()\u003c/li\u003e\n  \u003cli\u003ei%\u003do \u0027 assigns the integer i% the value of o.GetInt()\u003c/li\u003e\n  \u003cli\u003ek\u003do \u0027presumably k is dynamic typed, so it becomes another reference to the roInt o\u003c/li\u003e\n  \u003cli\u003eo\u003d5 \u0027this is NOT the same as o.SetInt(5). Instead it releases o, and \u0027changes the type of o to Integer (o is dynamically typed). And assigns it to 5.\u003c/li\u003e\n \u003c/ol\u003e\n\u003c/ac:rich-text-body\u003e\u0026nbsp;\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n BrightScript\u0026gt; o\u003dCreateObject(\"roInt\") BrightScript\u0026gt; o.SetInt(555) BrightScript\u0026gt; print o 555 BrightScript\u0026gt; print o.GetInt() 555 BrightScript\u0026gt; print o-55 500\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roInt",
      "documentationVersion": 3
    },
    "roAppManager": {
      "shortDescription": "The Application Manager APIs set application level attributes, which mostly affect the look-and-feel of the application. The use of screen styles gives each application a consistent look-and-feel, but it\u0027s often desirable to customize attributes such as colors, fonts, and logos for each application. Setting artwork and colors allows the developer to specify a theme for their application. If these values are not set, the application will use default values.",
      "interfaceNames": [
        "ifAppManager"
      ],
      "eventNames": [],
      "name": "roAppManager",
      "description": "The table below describes each attribute and its values, the screen types to which it applies, and the firmware version in which the attribute was first supported. Unless otherwise indicated, an attribute is supported in all firmware versions after the one in which it was first supported.To save space, the screen types in the table are specified by a two letter code:Co roCodeRegistrationScreen Di roMessageDialog, roOneLineDialog, roPinEntryDialog Gr roGridScreen Ke roKeyboardScreen Li roListScreen Pa roParagraphScreen Po roPosterScreen Se roSearchScreen Sp roSpringboardScreen Te roTextScreen All attribute values are strings.  Numeric values are specified as decimal strings. Attribute Screen Types Values Example Version BackgroundColor Gr Li Pa Po Se Sp Te HTML HEX Color Value. #E0DFDF 1.0 BreadcrumbDelimiter Gr Li Pa Po Se Sp Te HTML HEX Color Value. #FF00FF 1.0 BreadcrumbTextLeft Gr Li Pa Po Se Sp Te HTML HEX Color Value. #FF00FF 1.0 BreadcrumbTextRight Gr Li Pa Po Se Sp Te HTML HEX Color Value. #FF00FF 1.0 ButtonHighlightColor Di Se Sp HTML HEX Color Value. #FF00FF 1.0 ButtonMenuHighlightText Di Se Sp HTML HEX Color Value. #0033FF 1.0 ButtonMenuNormalOverlayText Di Se Sp HTML HEX Color Value. #B0B0B0 1.0 ButtonMenuNormalText Di Se Sp HTML HEX Color Value. #686868 1.0 ButtonNormalColor Di Se Sp HTML HEX Color Value. #FF00FF 1.0 CounterSeparator Gr Po HTML HEX Color Value. #00FF00 2.7 CounterTextLeft Gr Po HTML HEX Color Value. #FF0000 2.7 CounterTextRight Gr Po HTML HEX Color Value. #0000FF 2.7 DialogBodyText Di HTML HEX Color Value.  Must be a grayscale value. #808080 3.1 DialogTitleText Di HTML HEX Color Value.  Must be a grayscale value. #363636 3.1 EpisodeSynopsisText Po HTML HEX Color Value. #FF00FF 1.0 FilterBannerActiveColor Po HTML HEX Color Value. #FF00FF 1.0 FilterBannerActiveHD Po URL to set HD Filter Banner Active/Focus Highlighter pkg:/images/Filter_ActiveHint_SD43.png 1.0 FilterBannerActiveSD Po URL to set SD Filter Banner Active/Focus Highlighter pkg:/images/Filter_ActiveHint_SD43.png 1.0 FilterBannerInactiveColor Po HTML HEX Color Value. #FF00FF 1.0 FilterBannerInactiveHD Po URL to set HD Filter Banner Inactive Highlighter pkg:/images/Filter_InactiveHint_SD43.png 1.0 FilterBannerInactiveSD Po URL to set SD Filter Banner Inactive Highlighter pkg:/images/Filter_InactiveHint_SD43.png 1.0 FilterBannerSideColor Po HTML HEX Color Value. #FF00FF 1.0 FilterBannerSliceHD Po URL to set HD Filter Banner Background Image pkg:/images/Filter_BackgndSlice_SD43.png 1.0 FilterBannerSliceSD Po URL to set SD Filter Banner Background Image pkg:/images/Filter_BackgndSlice_SD43.png 1.0 GridScreenBackgroundColor Gr HTML HEX Color Value Must be a grayscale value #363636 2.7 GridScreenBorderOffsetHD Gr String representing point \"(x, y)\" that is the offset from the upper left corner of the focused HD image. Set to the negative width \u0026 height of border. (-25,-25) 2.8 GridScreenBorderOffsetSD Gr String representing point \"(x, y)\" that is the offset from the upper left corner of the focused SD image. Set to the negative width \u0026 height of border. (-20,-20) 2.8 GridScreenDescriptionDateColor Gr HTML HEX Color Value. #FF005B 2.7 GridScreenDescriptionImageHD Gr URL to set HD Description callout background image on Grid. pkg:/images/Description_Background_HD.ng 2.8 GridScreenDescriptionImageSD Gr URL to set SD Description callout background image on Grid. pkg:/images/Description_Background_SD43.png 2.8 GridScreenDescriptionOffsetHD Gr String representing point \"(x, y)\" that is the offset from the upper left corner of the focused SD image. Negative values have the description above and to the left of the focused image. (190,255) 2.8 GridScreenDescriptionOffsetSD Gr String representing point \"(x, y)\" that is the offset from the upper left corner of the focused SD image. Negative values have the description above and to the left of the focused image. (125,170) 2.8 GridScreenDescriptionRuntimeColor Gr HTML HEX Color Value. #5B005B 2.7 GridScreenDescriptionSynopsisColor Gr HTML HEX Color Value. #606000 2.7 GridScreenDescriptionTitleColor Gr HTML HEX Color Value. #00FFFF 2.7 GridScreenFocusBorderHD Gr URL to set SD Focus image on Active Grid Poster pkg:/images/Border_16x9_HD.png 2.8 GridScreenFocusBorderSD Gr URL to set SD Focus image on Active Grid Poster pkg:/images/Border_16x9_SD43.png 2.8 GridScreenListNameColor Gr HTML HEX Color Value. Must be a grayscale value #FFFFFF 2.7 GridScreenLogoHD Gr Logo formatted for display in the overhang pkg:/images/gridlogoHD.png 2.7 GridScreenLogoOffsetHD_X Gr Offset in pixels from the top-left origin of the display. Range 0 to 1280. 592 2.7 GridScreenLogoOffsetHD_Y Gr Offset in pixels from the top-left origin of the display. Range 0 to 720. 31 2.7 GridScreenLogoOffsetSD_X Gr Offset in pixels from the top-left origin of the display. Range 0 to 720. 324 2.7 GridScreenLogoOffsetSD_Y Gr Offset in pixels from the top-left origin of the display. Range 0 to 480. 21 2.7 GridScreenLogoSD Gr Logo formatted for display in the overhang pkg:/images/gridlogoSD.png 2.7 GridScreenMessageColor Gr HTML HEX Color Value. Must be a grayscale value #808080 2.7 GridScreenOverhangHeightHD Gr The HD overhang height. Default: \"69\" 75 2.8 GridScreenOverhangHeightSD Gr The SD overhang height. Default: \"49\" 55 2.8 GridScreenOverhangSliceHD Gr URI for the overhang slice (thin piece of top of screen border). pkg:/images/gridoverhangHD.png 2.7 GridScreenOverhangSliceSD Gr URI for the overhang slice (thin piece of top of screen border). pkg:/images/gridoverhangSD.png 2.7 GridScreenRetrievingColor Gr HTML HEX Color Value. Must be a grayscale value #CCCCCC 2.7 ListItemHighlightHD Gr Li Po URL to set HD highlight image pkg:/images/listitem_highlight_hd.png 3.1 ListItemHighlightSD Gr Li Po URL to set SD highlight image pkg:/images/listitem_highlight_sd.png 3.1 ListItemHighlightText Gr Li Po HTML HEX Color Value. #CCCC00 3.1 ListItemText Gr Li Po HTML HEX Color Value. #00CC00 3.1 ListScreenDescriptionText Li HTML HEX Color Value. #00CC00 3.1 ListScreenTitleColor Li HTML HEX Color Value. #CC0000 3.1 OverhangPrimaryLogoHD Co Ke Li Pa Po Se Sp Te Small application logo formatted for display in overhang top left. pkg:/images/co_logo_sd.png 1.0 OverhangPrimaryLogoOffsetHD_X Co Ke Li Pa Po Se Sp Te Offset in pixels from the top-left origin of the display.Range 0 to 1280 25 1.0 OverhangPrimaryLogoOffsetHD_Y Co Ke Li Pa Po Se Sp Te Offset in pixels from the top-left origin of the display films.Range 0 to 720 50 1.0 OverhangPrimaryLogoOffsetSD_X Co Ke Li Pa Po Se Sp Te Offset in pixels from the top-left origin of the display. Range 0 to 720. 25 1.0 OverhangPrimaryLogoOffsetSD_Y Co Ke Li Pa Po Se Sp Te Offset in pixels from the top-left origin of the display.Range 0 to 480. 50 1.0 OverhangPrimaryLogoSD Co Ke Li Pa Po Se Sp Te Small application logo formatted for display in overhang top left. pkg:/images/co_logo_sd.png 1.0 OverhangSecondaryLogoHD Co Ke Li Pa Po Se Sp Te Small application logo formatted for display in overhang top left. pkg:/images/co_logo_sd.png 1.0 OverhangSecondaryLogoOffsetHD_X Co Ke Li Pa Po Se Sp Te Offset in pixels from the top-left origin of the display. Range 0 to 1280 25 1.0 OverhangSecondaryLogoOffsetHD_Y Co Ke Li Pa Po Se Sp Te Offset in pixels from the top-left origin of the display films. Range 0 to 720 50 1.0 OverhangSecondaryLogoOffsetSD_X Co Ke Li Pa Po Se Sp Te Offset in pixels from the top-left origin of the display.Range 0 to 720. 25 1.0 OverhangSecondaryLogoOffsetSD_Y Co Ke Li Pa Po Se Sp Te Offset in pixels from the top-left origin of the display.Range 0 to 480. 50 1.0 OverhangSecondaryLogoSD Co Ke Li Pa Po Se Sp Te Small application logo formatted for display in overhang top left. pkg:/images/co_logo_sd.png 1.0 OverhangSliceHD Co Ke Li Pa Po Se Sp Te URI for the overhang slice (thin piece of border at the top of the screen in HD size) pkg:/images/overhang_sd.png 1.0 OverhangSliceSD Co Ke Li Pa Po Se Sp Te URI for the overhang slice (thin piece of top of screen border). pkg:/images/overhang_sd.png 1.0 ParagraphBodyText Co Pa Te HTML HEX Color Value. #FF00FF 1.0 ParagraphHeaderText Co Pa Te HTML HEX Color Value. #FF00FF 1.0 PosterScreenLine1Text Po HTML HEX Color Value. #FF00FF 1.0 PosterScreenLine2Text Po HTML HEX Color Value. #FF00FF 1.0 RegistrationCodeColor Co HTML HEX Color Value. #FF00FF 1.0 RegistrationFocalColor Co HTML HEX Color Value. #FF00FF 1.0 RegistrationFocalRectColor Co HTML HEX Color Value. #10FF80   RegistrationFocalRectHD Co Position and size of the HD focal rectangle. Four integer: (x,y,width,height). (228,360,120,82)   RegistrationFocalRectSD Co Position and size of the SD focal rectangle. Four integer: (x,y,width,height). (172,220,90,76)   SpringboardActorColor Sp HTML HEX Color Value. #FF00FF 1.0 SpringboardAlbumColor Sp HTML HEX Color Value. #FF00FF 1.0 SpringboardAlbumLabel Sp Album Label on 1.0 SpringboardAlbumLabelColor Sp HTML HEX Color Value. #FF00FF 1.0 SpringboardAllow6Buttons Sp boolean string true   SpringboardArtistColor Sp HTML HEX Color Value. #FF00FF 1.0 SpringboardArtistLabel Sp Artist Label by 1.0 SpringboardArtistLabelColor Sp HTML HEX Color Value. #FF00FF 1.0 SpringboardDirectorColor Sp HTML HEX Color Value. #FF00FF 1.0 SpringboardDirectorText Sp Director Label Written By 1.0 SpringboardDirectorLabelColor Sp HTML HEX Color Value. #FF00FF 1.0 SpringboardDirectorPrefixText Sp HTML HEX Color Value. #FF00FF   SpringboardGenreColor Sp HTML HEX Color Value. #FF00FF 1.0 SpringboardRuntimeColor Sp HTML HEX Color Value. #FF00FF 1.0 SpringboardSynopsisColor Sp HTML HEX Color Value. #FF00FF 1.0 SpringboardTitleText Sp HTML HEX Color Value. #FF00FF 1.0 TextScreenBodyBackgroundColor Te HTML HEX Color Value. Must be a grayscale value #808080 4.3 TextScreenBodyText Te HTML HEX Color Value. #363636 4.3 TextScreenScrollBarColor Te HTML HEX Color Value. #CC0000 4.3 TextScreenScrollThumbColor Te HTML HEX Color Value. #00CC00 4.3 ThemeType   Theme type. Generic-dark is the only valid value. Otherwise the default theme applies generic-dark 2.7vbExample: roAppManager setting theme valuesSub SetApplicationTheme() app \u003d CreateObject(\"roAppManager\") theme \u003d CreateObject(\"roAssociativeArray\") theme.OverhangSliceHD \u003d \"pkg:/images/Overhang_Slice_HD.png\" theme.OverhangPrimaryLogoSD \u003d \"pkg:/images/Logo_Overhang_SD43.png\" theme.OverhangPrimaryLogoOffsetSD_X \u003d \"72\" theme.OverhangPrimaryLogoOffsetSD_Y \u003d \"25\" theme.OverhangPrimaryLogoHD \u003d \"pkg:/images/Logo_Overhang_HD.png\" theme.OverhangPrimaryLogoOffsetHD_X \u003d \"123\" theme.OverhangPrimaryLogoOffsetHD_Y \u003d \"48\" app.SetTheme(theme) End Sub Â ",
      "descriptionHTML": "The table below describes each attribute and its values, the screen types to which it applies, and the firmware version in which the attribute was first supported. Unless otherwise indicated, an attribute is supported in all firmware versions after the one in which it was first supported.To save space, the screen types in the table are specified by a two letter code:\u003ctbody\u003e\n \u003ctr\u003e\n  \u003ctd\u003eCo\u003c/td\u003e\n  \u003ctd\u003eroCodeRegistrationScreen\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd colspan\u003d\"1\"\u003eDi\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003eroMessageDialog, roOneLineDialog, roPinEntryDialog\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eroGridScreen\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd colspan\u003d\"1\"\u003eKe\u003c/td\u003e\n  \u003ctd colspan\u003d\"1\"\u003eroKeyboardScreen\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eLi\u003c/td\u003e\n  \u003ctd\u003eroListScreen\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003ePa\u003c/td\u003e\n  \u003ctd\u003eroParagraphScreen\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003ePo\u003c/td\u003e\n  \u003ctd\u003eroPosterScreen\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSe\u003c/td\u003e\n  \u003ctd\u003eroSearchScreen\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSp\u003c/td\u003e\n  \u003ctd\u003eroSpringboardScreen\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eTe\u003c/td\u003e\n  \u003ctd\u003eroTextScreen\u003c/td\u003e\n \u003c/tr\u003e\n\u003c/tbody\u003e\u0026nbsp;All attribute values are strings.\u0026nbsp; Numeric values are specified as decimal strings.\u0026nbsp;\u003ccolgroup\u003e\n \u003ccol\u003e \n \u003ccol\u003e \n \u003ccol\u003e \n \u003ccol\u003e \n \u003ccol\u003e \n\u003c/colgroup\u003e\n\u003ctbody\u003e\n \u003ctr\u003e\n  \u003ctd\u003eAttribute\u003c/td\u003e\n  \u003ctd\u003eScreen Types\u003c/td\u003e\n  \u003ctd\u003eValues\u003c/td\u003e\n  \u003ctd\u003eExample\u003c/td\u003e\n  \u003ctd\u003eVersion\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eBackgroundColor\u003c/td\u003e\n  \u003ctd\u003eGr Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#E0DFDF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eBreadcrumbDelimiter\u003c/td\u003e\n  \u003ctd\u003eGr Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eBreadcrumbTextLeft\u003c/td\u003e\n  \u003ctd\u003eGr Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eBreadcrumbTextRight\u003c/td\u003e\n  \u003ctd\u003eGr Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eButtonHighlightColor\u003c/td\u003e\n  \u003ctd\u003eDi Se Sp\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eButtonMenuHighlightText\u003c/td\u003e\n  \u003ctd\u003eDi Se Sp\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#0033FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eButtonMenuNormalOverlayText\u003c/td\u003e\n  \u003ctd\u003eDi Se Sp\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#B0B0B0\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eButtonMenuNormalText\u003c/td\u003e\n  \u003ctd\u003eDi Se Sp\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#686868\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eButtonNormalColor\u003c/td\u003e\n  \u003ctd\u003eDi Se Sp\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eCounterSeparator\u003c/td\u003e\n  \u003ctd\u003eGr Po\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#00FF00\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eCounterTextLeft\u003c/td\u003e\n  \u003ctd\u003eGr Po\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF0000\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eCounterTextRight\u003c/td\u003e\n  \u003ctd\u003eGr Po\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#0000FF\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eDialogBodyText\u003c/td\u003e\n  \u003ctd\u003eDi\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u0026nbsp; Must be a grayscale value.\u003c/td\u003e\n  \u003ctd\u003e#808080\u003c/td\u003e\n  \u003ctd\u003e3.1\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eDialogTitleText\u003c/td\u003e\n  \u003ctd\u003eDi\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u0026nbsp; Must be a grayscale value.\u003c/td\u003e\n  \u003ctd\u003e#363636\u003c/td\u003e\n  \u003ctd\u003e3.1\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eEpisodeSynopsisText\u003c/td\u003e\n  \u003ctd\u003ePo\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eFilterBannerActiveColor\u003c/td\u003e\n  \u003ctd\u003ePo\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eFilterBannerActiveHD\u003c/td\u003e\n  \u003ctd\u003ePo\u003c/td\u003e\n  \u003ctd\u003eURL to set HD Filter Banner Active/Focus Highlighter\u003c/td\u003e\n  \u003ctd\u003epkg:/images/Filter_ActiveHint_SD43.png\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eFilterBannerActiveSD\u003c/td\u003e\n  \u003ctd\u003ePo\u003c/td\u003e\n  \u003ctd\u003eURL to set SD Filter Banner Active/Focus Highlighter\u003c/td\u003e\n  \u003ctd\u003epkg:/images/Filter_ActiveHint_SD43.png\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eFilterBannerInactiveColor\u003c/td\u003e\n  \u003ctd\u003ePo\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eFilterBannerInactiveHD\u003c/td\u003e\n  \u003ctd\u003ePo\u003c/td\u003e\n  \u003ctd\u003eURL to set HD Filter Banner Inactive Highlighter\u003c/td\u003e\n  \u003ctd\u003epkg:/images/Filter_InactiveHint_SD43.png\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eFilterBannerInactiveSD\u003c/td\u003e\n  \u003ctd\u003ePo\u003c/td\u003e\n  \u003ctd\u003eURL to set SD Filter Banner Inactive Highlighter\u003c/td\u003e\n  \u003ctd\u003epkg:/images/Filter_InactiveHint_SD43.png\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eFilterBannerSideColor\u003c/td\u003e\n  \u003ctd\u003ePo\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eFilterBannerSliceHD\u003c/td\u003e\n  \u003ctd\u003ePo\u003c/td\u003e\n  \u003ctd\u003eURL to set HD Filter Banner Background Image\u003c/td\u003e\n  \u003ctd\u003epkg:/images/Filter_BackgndSlice_SD43.png\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eFilterBannerSliceSD\u003c/td\u003e\n  \u003ctd\u003ePo\u003c/td\u003e\n  \u003ctd\u003eURL to set SD Filter Banner Background Image\u003c/td\u003e\n  \u003ctd\u003epkg:/images/Filter_BackgndSlice_SD43.png\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenBackgroundColor\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value Must be a grayscale value\u003c/td\u003e\n  \u003ctd\u003e#363636\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenBorderOffsetHD\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eString representing point \"(x, y)\" that is the offset from the upper left corner of the focused HD image. Set to the negative width \u0026amp; height of border.\u003c/td\u003e\n  \u003ctd\u003e(-25,-25)\u003c/td\u003e\n  \u003ctd\u003e2.8\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenBorderOffsetSD\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eString representing point \"(x, y)\" that is the offset from the upper left corner of the focused SD image. Set to the negative width \u0026amp; height of border.\u003c/td\u003e\n  \u003ctd\u003e(-20,-20)\u003c/td\u003e\n  \u003ctd\u003e2.8\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenDescriptionDateColor\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF005B\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenDescriptionImageHD\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eURL to set HD Description callout background image on Grid.\u003c/td\u003e\n  \u003ctd\u003epkg:/images/Description_Background_HD.ng\u003c/td\u003e\n  \u003ctd\u003e2.8\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenDescriptionImageSD\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eURL to set SD Description callout background image on Grid.\u003c/td\u003e\n  \u003ctd\u003epkg:/images/Description_Background_SD43.png\u003c/td\u003e\n  \u003ctd\u003e2.8\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenDescriptionOffsetHD\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eString representing point \"(x, y)\" that is the offset from the upper left corner of the focused SD image. Negative values have the description above and to the left of the focused image.\u003c/td\u003e\n  \u003ctd\u003e(190,255)\u003c/td\u003e\n  \u003ctd\u003e2.8\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenDescriptionOffsetSD\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eString representing point \"(x, y)\" that is the offset from the upper left corner of the focused SD image. Negative values have the description above and to the left of the focused image.\u003c/td\u003e\n  \u003ctd\u003e(125,170)\u003c/td\u003e\n  \u003ctd\u003e2.8\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenDescriptionRuntimeColor\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#5B005B\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenDescriptionSynopsisColor\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#606000\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenDescriptionTitleColor\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#00FFFF\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenFocusBorderHD\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eURL to set SD Focus image on Active Grid Poster\u003c/td\u003e\n  \u003ctd\u003epkg:/images/Border_16x9_HD.png\u003c/td\u003e\n  \u003ctd\u003e2.8\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenFocusBorderSD\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eURL to set SD Focus image on Active Grid Poster\u003c/td\u003e\n  \u003ctd\u003epkg:/images/Border_16x9_SD43.png\u003c/td\u003e\n  \u003ctd\u003e2.8\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenListNameColor\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value. Must be a grayscale value\u003c/td\u003e\n  \u003ctd\u003e#FFFFFF\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenLogoHD\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eLogo formatted for display in the overhang\u003c/td\u003e\n  \u003ctd\u003epkg:/images/gridlogoHD.png\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenLogoOffsetHD_X\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eOffset in pixels from the top-left origin of the display. Range 0 to 1280.\u003c/td\u003e\n  \u003ctd\u003e592\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenLogoOffsetHD_Y\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eOffset in pixels from the top-left origin of the display. Range 0 to 720.\u003c/td\u003e\n  \u003ctd\u003e31\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenLogoOffsetSD_X\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eOffset in pixels from the top-left origin of the display. Range 0 to 720.\u003c/td\u003e\n  \u003ctd\u003e324\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenLogoOffsetSD_Y\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eOffset in pixels from the top-left origin of the display. Range 0 to 480.\u003c/td\u003e\n  \u003ctd\u003e21\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenLogoSD\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eLogo formatted for display in the overhang\u003c/td\u003e\n  \u003ctd\u003epkg:/images/gridlogoSD.png\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenMessageColor\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value. Must be a grayscale value\u003c/td\u003e\n  \u003ctd\u003e#808080\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenOverhangHeightHD\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eThe HD overhang height. Default: \"69\"\u003c/td\u003e\n  \u003ctd\u003e75\u003c/td\u003e\n  \u003ctd\u003e2.8\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenOverhangHeightSD\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eThe SD overhang height. Default: \"49\"\u003c/td\u003e\n  \u003ctd\u003e55\u003c/td\u003e\n  \u003ctd\u003e2.8\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenOverhangSliceHD\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eURI for the overhang slice (thin piece of top of screen border).\u003c/td\u003e\n  \u003ctd\u003epkg:/images/gridoverhangHD.png\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenOverhangSliceSD\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eURI for the overhang slice (thin piece of top of screen border).\u003c/td\u003e\n  \u003ctd\u003epkg:/images/gridoverhangSD.png\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eGridScreenRetrievingColor\u003c/td\u003e\n  \u003ctd\u003eGr\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value. Must be a grayscale value\u003c/td\u003e\n  \u003ctd\u003e#CCCCCC\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eListItemHighlightHD\u003c/td\u003e\n  \u003ctd\u003eGr Li Po\u003c/td\u003e\n  \u003ctd\u003eURL to set HD highlight image\u003c/td\u003e\n  \u003ctd\u003epkg:/images/listitem_highlight_hd.png\u003c/td\u003e\n  \u003ctd\u003e3.1\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eListItemHighlightSD\u003c/td\u003e\n  \u003ctd\u003eGr Li Po\u003c/td\u003e\n  \u003ctd\u003eURL to set SD highlight image\u003c/td\u003e\n  \u003ctd\u003epkg:/images/listitem_highlight_sd.png\u003c/td\u003e\n  \u003ctd\u003e3.1\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eListItemHighlightText\u003c/td\u003e\n  \u003ctd\u003eGr Li Po\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#CCCC00\u003c/td\u003e\n  \u003ctd\u003e3.1\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eListItemText\u003c/td\u003e\n  \u003ctd\u003eGr Li Po\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#00CC00\u003c/td\u003e\n  \u003ctd\u003e3.1\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eListScreenDescriptionText\u003c/td\u003e\n  \u003ctd\u003eLi\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#00CC00\u003c/td\u003e\n  \u003ctd\u003e3.1\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eListScreenTitleColor\u003c/td\u003e\n  \u003ctd\u003eLi\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#CC0000\u003c/td\u003e\n  \u003ctd\u003e3.1\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eOverhangPrimaryLogoHD\u003c/td\u003e\n  \u003ctd\u003eCo Ke Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eSmall application logo formatted for display in overhang top left.\u003c/td\u003e\n  \u003ctd\u003epkg:/images/co_logo_sd.png\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eOverhangPrimaryLogoOffsetHD_X\u003c/td\u003e\n  \u003ctd\u003eCo Ke Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eOffset in pixels from the top-left origin of the display.Range 0 to 1280\u003c/td\u003e\n  \u003ctd\u003e25\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eOverhangPrimaryLogoOffsetHD_Y\u003c/td\u003e\n  \u003ctd\u003eCo Ke Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eOffset in pixels from the top-left origin of the display films.Range 0 to 720\u003c/td\u003e\n  \u003ctd\u003e50\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eOverhangPrimaryLogoOffsetSD_X\u003c/td\u003e\n  \u003ctd\u003eCo Ke Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eOffset in pixels from the top-left origin of the display. Range 0 to 720.\u003c/td\u003e\n  \u003ctd\u003e25\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eOverhangPrimaryLogoOffsetSD_Y\u003c/td\u003e\n  \u003ctd\u003eCo Ke Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eOffset in pixels from the top-left origin of the display.Range 0 to 480.\u003c/td\u003e\n  \u003ctd\u003e50\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eOverhangPrimaryLogoSD\u003c/td\u003e\n  \u003ctd\u003eCo Ke Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eSmall application logo formatted for display in overhang top left.\u003c/td\u003e\n  \u003ctd\u003epkg:/images/co_logo_sd.png\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eOverhangSecondaryLogoHD\u003c/td\u003e\n  \u003ctd\u003eCo Ke Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eSmall application logo formatted for display in overhang top left.\u003c/td\u003e\n  \u003ctd\u003epkg:/images/co_logo_sd.png\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eOverhangSecondaryLogoOffsetHD_X\u003c/td\u003e\n  \u003ctd\u003eCo Ke Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eOffset in pixels from the top-left origin of the display. Range 0 to 1280\u003c/td\u003e\n  \u003ctd\u003e25\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eOverhangSecondaryLogoOffsetHD_Y\u003c/td\u003e\n  \u003ctd\u003eCo Ke Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eOffset in pixels from the top-left origin of the display films. Range 0 to 720\u003c/td\u003e\n  \u003ctd\u003e50\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eOverhangSecondaryLogoOffsetSD_X\u003c/td\u003e\n  \u003ctd\u003eCo Ke Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eOffset in pixels from the top-left origin of the display.Range 0 to 720.\u003c/td\u003e\n  \u003ctd\u003e25\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eOverhangSecondaryLogoOffsetSD_Y\u003c/td\u003e\n  \u003ctd\u003eCo Ke Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eOffset in pixels from the top-left origin of the display.Range 0 to 480.\u003c/td\u003e\n  \u003ctd\u003e50\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eOverhangSecondaryLogoSD\u003c/td\u003e\n  \u003ctd\u003eCo Ke Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eSmall application logo formatted for display in overhang top left.\u003c/td\u003e\n  \u003ctd\u003epkg:/images/co_logo_sd.png\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eOverhangSliceHD\u003c/td\u003e\n  \u003ctd\u003eCo Ke Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eURI for the overhang slice (thin piece of border at the top of the screen in HD size)\u003c/td\u003e\n  \u003ctd\u003epkg:/images/overhang_sd.png\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eOverhangSliceSD\u003c/td\u003e\n  \u003ctd\u003eCo Ke Li Pa Po Se Sp Te\u003c/td\u003e\n  \u003ctd\u003eURI for the overhang slice (thin piece of top of screen border).\u003c/td\u003e\n  \u003ctd\u003epkg:/images/overhang_sd.png\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eParagraphBodyText\u003c/td\u003e\n  \u003ctd\u003eCo Pa Te\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eParagraphHeaderText\u003c/td\u003e\n  \u003ctd\u003eCo Pa Te\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003ePosterScreenLine1Text\u003c/td\u003e\n  \u003ctd\u003ePo\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003ePosterScreenLine2Text\u003c/td\u003e\n  \u003ctd\u003ePo\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eRegistrationCodeColor\u003c/td\u003e\n  \u003ctd\u003eCo\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eRegistrationFocalColor\u003c/td\u003e\n  \u003ctd\u003eCo\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eRegistrationFocalRectColor\u003c/td\u003e\n  \u003ctd\u003eCo\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#10FF80\u003c/td\u003e\n  \u003ctd\u003e\u0026nbsp;\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eRegistrationFocalRectHD\u003c/td\u003e\n  \u003ctd\u003eCo\u003c/td\u003e\n  \u003ctd\u003ePosition and size of the HD focal rectangle. Four integer: (x,y,width,height).\u003c/td\u003e\n  \u003ctd\u003e(228,360,120,82)\u003c/td\u003e\n  \u003ctd\u003e\u0026nbsp;\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eRegistrationFocalRectSD\u003c/td\u003e\n  \u003ctd\u003eCo\u003c/td\u003e\n  \u003ctd\u003ePosition and size of the SD focal rectangle. Four integer: (x,y,width,height).\u003c/td\u003e\n  \u003ctd\u003e(172,220,90,76)\u003c/td\u003e\n  \u003ctd\u003e\u0026nbsp;\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSpringboardActorColor\u003c/td\u003e\n  \u003ctd\u003eSp\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSpringboardAlbumColor\u003c/td\u003e\n  \u003ctd\u003eSp\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSpringboardAlbumLabel\u003c/td\u003e\n  \u003ctd\u003eSp\u003c/td\u003e\n  \u003ctd\u003eAlbum Label\u003c/td\u003e\n  \u003ctd\u003eon\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSpringboardAlbumLabelColor\u003c/td\u003e\n  \u003ctd\u003eSp\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSpringboardAllow6Buttons\u003c/td\u003e\n  \u003ctd\u003eSp\u003c/td\u003e\n  \u003ctd\u003eboolean string\u003c/td\u003e\n  \u003ctd\u003etrue\u003c/td\u003e\n  \u003ctd\u003e\u0026nbsp;\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSpringboardArtistColor\u003c/td\u003e\n  \u003ctd\u003eSp\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSpringboardArtistLabel\u003c/td\u003e\n  \u003ctd\u003eSp\u003c/td\u003e\n  \u003ctd\u003eArtist Label\u003c/td\u003e\n  \u003ctd\u003eby\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSpringboardArtistLabelColor\u003c/td\u003e\n  \u003ctd\u003eSp\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSpringboardDirectorColor\u003c/td\u003e\n  \u003ctd\u003eSp\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSpringboardDirectorText\u003c/td\u003e\n  \u003ctd\u003eSp\u003c/td\u003e\n  \u003ctd\u003eDirector Label\u003c/td\u003e\n  \u003ctd\u003eWritten By\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSpringboardDirectorLabelColor\u003c/td\u003e\n  \u003ctd\u003eSp\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSpringboardDirectorPrefixText\u003c/td\u003e\n  \u003ctd\u003eSp\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e\u0026nbsp;\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSpringboardGenreColor\u003c/td\u003e\n  \u003ctd\u003eSp\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSpringboardRuntimeColor\u003c/td\u003e\n  \u003ctd\u003eSp\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSpringboardSynopsisColor\u003c/td\u003e\n  \u003ctd\u003eSp\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eSpringboardTitleText\u003c/td\u003e\n  \u003ctd\u003eSp\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#FF00FF\u003c/td\u003e\n  \u003ctd\u003e1.0\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eTextScreenBodyBackgroundColor\u003c/td\u003e\n  \u003ctd\u003eTe\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value. Must be a grayscale value\u003c/td\u003e\n  \u003ctd\u003e#808080\u003c/td\u003e\n  \u003ctd\u003e4.3\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eTextScreenBodyText\u003c/td\u003e\n  \u003ctd\u003eTe\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#363636\u003c/td\u003e\n  \u003ctd\u003e4.3\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eTextScreenScrollBarColor\u003c/td\u003e\n  \u003ctd\u003eTe\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#CC0000\u003c/td\u003e\n  \u003ctd\u003e4.3\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eTextScreenScrollThumbColor\u003c/td\u003e\n  \u003ctd\u003eTe\u003c/td\u003e\n  \u003ctd\u003eHTML HEX Color Value.\u003c/td\u003e\n  \u003ctd\u003e#00CC00\u003c/td\u003e\n  \u003ctd\u003e4.3\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eThemeType\u003c/td\u003e\n  \u003ctd\u003e\u0026nbsp;\u003c/td\u003e\n  \u003ctd\u003eTheme type. Generic-dark is the only valid value. Otherwise the default theme applies\u003c/td\u003e\n  \u003ctd\u003egeneric-dark\u003c/td\u003e\n  \u003ctd\u003e2.7\u003c/td\u003e\n \u003c/tr\u003e\n\u003c/tbody\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example: roAppManager setting theme values\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Sub SetApplicationTheme() app \u003d CreateObject(\"roAppManager\") theme \u003d CreateObject(\"roAssociativeArray\") theme.OverhangSliceHD \u003d \"pkg:/images/Overhang_Slice_HD.png\" theme.OverhangPrimaryLogoSD \u003d \"pkg:/images/Logo_Overhang_SD43.png\" theme.OverhangPrimaryLogoOffsetSD_X \u003d \"72\" theme.OverhangPrimaryLogoOffsetSD_Y \u003d \"25\" theme.OverhangPrimaryLogoHD \u003d \"pkg:/images/Logo_Overhang_HD.png\" theme.OverhangPrimaryLogoOffsetHD_X \u003d \"123\" theme.OverhangPrimaryLogoOffsetHD_Y \u003d \"48\" app.SetTheme(theme) End Sub Â\u0026nbsp;\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roAppManager",
      "documentationVersion": 7
    },
    "roSearchScreen": {
      "shortDescription": "The Search Screen provides a standard way to allow users to enter text for searching.",
      "interfaceNames": [
        "ifSearchScreen",
        "ifSetMessagePort",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roSearchScreenEvent"
      ],
      "name": "roSearchScreen",
      "description": "This screen features a simplified keyboard (a-z, 0-9) designed to provide just the keys necessary to perform case-insensitive searches without punctuation. Ideally, the user would enter a search string and the backend service would perform that query in a case-insensitive manner ignoring special characters like punctuation. The script is notified as each key is pressed so that a progress disclosure search can be performed if supported by the back-end service. In addition, the script can control the text displayed on the screen and will receive events when the text entry is complete. In addition to entering search strings, this screen features a list that can be used to display search results or show the most recent searches. It\u0027s desirable for the screen to maintain a list of recent searches for the user to allow them to easily repeat a recent query without typing. In some implementations, it may be desirable to use this list to show a progressive set of results after each character while the user is typing. This object is created with no parameters:CreateObject(\"roSearchScreen\")vbExampleREM ****************************************************** REM Main routine - example of search screen usage REM ****************************************************** Sub Main() print \"start\" \u0027toggle the search suggestions vs. search history behavior \u0027this allow you to generate both versions of the example below displayHistory \u003d false history \u003d CreateObject(\"roArray\", 1, true) \u0027prepopulate the search history with sample results history.Push(\"seinfeld\") history.Push(\"fraiser\") history.Push(\"cheers\") port \u003d CreateObject(\"roMessagePort\") screen \u003d CreateObject(\"roSearchScreen\") \u0027commenting out SetBreadcrumbText() hides breadcrumb on screen screen.SetBreadcrumbText(\"\", \"search\") screen.SetMessagePort(port) if displayHistory screen.SetSearchTermHeaderText(\"Recent Searches:\") screen.SetSearchButtonText(\"search\") screen.SetClearButtonText(\"clear history\") screen.SetClearButtonEnabled(true) \u0027defaults to true screen.SetSearchTerms(history) else screen.SetSearchTermHeaderText(\"Suggestions:\") screen.SetSearchButtonText(\"search\") screen.SetClearButtonEnabled(false) endif print \"Doing show screen...\" screen.Show() print \"Waiting for a message from the screen...\" \u0027 search screen main event loop done \u003d false while done \u003d false msg \u003d wait(0, screen.GetMessagePort()) if type(msg) \u003d \"roSearchScreenEvent\" if msg.isScreenClosed() print \"screen closed\" done \u003d true else if msg.isCleared() print \"search terms cleared\" history.Clear() else if msg.isPartialResult() print \"partial search: \"; msg.GetMessage() if not displayHistory screen.SetSearchTerms(GenerateSearchSuggestions(msg.GetMessage())) endif else if msg.isFullResult() print \"full search: \"; msg.GetMessage() history.Push(msg.GetMessage()) if displayHistory screen.AddSearchTerm(msg.GetMessage()) end if \u0027uncomment to exit the screen after a full search result: \u0027done \u003d true else print \"Unknown event: \"; msg.GetType(); \" msg: \"; msg.GetMessage() endif endif endwhile print \"Exiting...\" End SubÂ  Function GenerateSearchSuggestions(partSearchText As String) As Object availableContent \u003d [ \"ghost in the shell\" \"parasite dolls\" \"final fantasy\" \"ninja scroll\" \"space ghost\" \"hellboy\" \"star wars\" \"terminator\" \"house of cards\" \"dexter\" ] suggestions \u003d [] if partSearchText \u003c\u003e \"\" partSearchText \u003d LCase(partSearchText) for each available in availableContent if available.Instr(partSearchText) \u003e\u003d 0 suggestions.Push(available) end if end for end if return suggestions End Function Image: roSearchScreen example results (search suggestions)Image: roSearchScreen example results (search history) ",
      "descriptionHTML": "This screen features a simplified keyboard (a-z, 0-9) designed to provide just the keys necessary to perform case-insensitive searches without punctuation. \u003cbr class\u003d\"atl-forced-newline\"\u003e Ideally, the user would enter a search string and the backend service would perform that query in a case-insensitive manner ignoring special characters like punctuation. The script is notified as each key is pressed so that a progress disclosure search can be performed if supported by the back-end service. In addition, the script can control the text displayed on the screen and will receive events when the text entry is complete. \u003cbr class\u003d\"atl-forced-newline\"\u003e In addition to entering search strings, this screen features a list that can be used to display search results or show the most recent searches. It\u0027s desirable for the screen to maintain a list of recent searches for the user to allow them to easily repeat a recent query without typing. In some implementations, it may be desirable to use this list to show a progressive set of results after each character while the user is typing. \u003cbr class\u003d\"atl-forced-newline\"\u003e This object is created with no parameters:\u003cbr\u003e CreateObject(\"roSearchScreen\")\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n REM ****************************************************** REM Main routine - example of search screen usage REM ****************************************************** Sub Main() print \"start\" \u0027toggle the search suggestions vs. search history behavior \u0027this allow you to generate both versions of the example below displayHistory \u003d false history \u003d CreateObject(\"roArray\", 1, true) \u0027prepopulate the search history with sample results history.Push(\"seinfeld\") history.Push(\"fraiser\") history.Push(\"cheers\") port \u003d CreateObject(\"roMessagePort\") screen \u003d CreateObject(\"roSearchScreen\") \u0027commenting out SetBreadcrumbText() hides breadcrumb on screen screen.SetBreadcrumbText(\"\", \"search\") screen.SetMessagePort(port) if displayHistory screen.SetSearchTermHeaderText(\"Recent Searches:\") screen.SetSearchButtonText(\"search\") screen.SetClearButtonText(\"clear history\") screen.SetClearButtonEnabled(true) \u0027defaults to true screen.SetSearchTerms(history) else screen.SetSearchTermHeaderText(\"Suggestions:\") screen.SetSearchButtonText(\"search\") screen.SetClearButtonEnabled(false) endif print \"Doing show screen...\" screen.Show() print \"Waiting for a message from the screen...\" \u0027 search screen main event loop done \u003d false while done \u003d false msg \u003d wait(0, screen.GetMessagePort()) if type(msg) \u003d \"roSearchScreenEvent\" if msg.isScreenClosed() print \"screen closed\" done \u003d true else if msg.isCleared() print \"search terms cleared\" history.Clear() else if msg.isPartialResult() print \"partial search: \"; msg.GetMessage() if not displayHistory screen.SetSearchTerms(GenerateSearchSuggestions(msg.GetMessage())) endif else if msg.isFullResult() print \"full search: \"; msg.GetMessage() history.Push(msg.GetMessage()) if displayHistory screen.AddSearchTerm(msg.GetMessage()) end if \u0027uncomment to exit the screen after a full search result: \u0027done \u003d true else print \"Unknown event: \"; msg.GetType(); \" msg: \"; msg.GetMessage() endif endif endwhile print \"Exiting...\" End SubÂ\u0026nbsp; Function GenerateSearchSuggestions(partSearchText As String) As Object availableContent \u003d [ \"ghost in the shell\" \"parasite dolls\" \"final fantasy\" \"ninja scroll\" \"space ghost\" \"hellboy\" \"star wars\" \"terminator\" \"house of cards\" \"dexter\" ] suggestions \u003d [] if partSearchText \u0026lt;\u0026gt; \"\" partSearchText \u003d LCase(partSearchText) for each available in availableContent if available.Instr(partSearchText) \u0026gt;\u003d 0 suggestions.Push(available) end if end for end if return suggestions End Function \n\u003c/ac:plain-text-body\u003e\u0026nbsp;Image: roSearchScreen example results (search suggestions)\u003cac:image ac:height\u003d\"364\" ac:width\u003d\"547\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddave2cebb6a638c72dec7fd04e7dda4d133.png\" /\u003e\n\u003c/ac:image\u003eImage: roSearchScreen example results (search history)\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roSearchScreen",
      "documentationVersion": 10
    },
    "roXMLElement": {
      "shortDescription": "roXMLElement is used to contain an XML tree.",
      "interfaceNames": [
        "ifXMLElement"
      ],
      "eventNames": [],
      "name": "roXMLElement",
      "description": "Example:    \u003ctag1\u003ethis is some text\u003c/tag1\u003eWould parse such that:    Name \u003d \"tag1\"     Attributes \u003d invalid     Body \u003d roString with \"this is some text\"Example:\u003cemptytag caveman\u003d\"barney\" /\u003eWould parse such that:    Name \u003d \"emptytag\"     Attributes \u003d roAssociativeArray, with one entry { caveman: \"barney\" }     Body \u003d invalidIf the tag contains other tags, body will be of type roXMLList. To generate XML, create an roXMLElement, then use functions like SetName(), AddAttribute(), SetBody(), AddElementWithBody(), AddElement(), AddBodyElement(), and AddText() functions to build the XML object hierarchy.Then call GenXML() to return the XML as a string.GenXML() takes one parameter (boolean) that indicates whether the generated xml should have the \u003c?xml \u003e tag at the top.vbExample subroutine to print out the contents of an roXMLElement treeÂ PrintXML(root, 0) Sub PrintXML(element As Object, depth As Integer) print tab(depth*3);\"Name: \";element.GetName() if not element.GetAttributes().IsEmpty() then print tab(depth*3);\"Attributes: \"; for each a in element.GetAttributes() print a;\"\u003d\";left(element.GetAttributes()[a], 20); if element.GetAttributes().IsNext() then print \", \"; end for print end if if element.GetText()\u003c\u003einvalid then print tab(depth*3);\"Contains Text: \";left(element.GetText(), 40) end if if element.GetChildElements()\u003c\u003einvalid print tab(depth*3);\"Contains roXMLList:\" for each e in element.GetChildElements() PrintXML(e, depth+1) end for end if print end subvbExample generating XMLÂ  root.SetName(\"myroot\") root.AddAttribute(\"key1\", \"value1\") root.AddAttribute(\"key2\", \"value2\") ne \u003d root.AddBodyElement() ne.SetName(\"sub\") ne.SetBody(\"this is the sub1 text\") ne \u003d root.AddBodyElement() ne.SetName(\"subelement2\") ne.SetBody(\"more sub text\") ne.AddAttribute(\"k\", \"v\") ne \u003d root.AddElement(\"subelement3\") ne.SetBody(\"more sub text 3\") root.AddElementWithBody(\"sub\", \"another sub (#4)\") PrintXML(root, 0) print root.GenXML(false)vbAnother ExampleÂ  xml \u003d CreateObject(\"roXMLElement\") xml.SetName(\"root\") subel1 \u003d xml.AddBodyElement() subel1.SetName(\"subelement1\") subel2 \u003d xml.AddBodyElement() subel2.SetName(\"subelement2\")Is the same as:vbÂ  xml \u003d CreateObject(\"roXMLElement\") xml.SetName(\"root\") subel1 \u003d xml.AddElement(\"subelement1\") subel2 \u003d xml.AddElement(\"subelement2\")  ",
      "descriptionHTML": "Example:\u0026nbsp; \u0026nbsp; \u0026lt;tag1\u0026gt;this is some text\u0026lt;/tag1\u0026gt;Would parse such that:\u0026nbsp;\u0026nbsp;\u0026nbsp; Name \u003d \"tag1\"\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp; Attributes \u003d invalid\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp; Body \u003d roString with \"this is some text\"Example:\u0026lt;emptytag caveman\u003d\"barney\" /\u0026gt;Would parse such that:\u0026nbsp;\u0026nbsp;\u0026nbsp; Name \u003d \"emptytag\"\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp; Attributes \u003d roAssociativeArray, with one entry { caveman: \"barney\" }\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp; Body \u003d invalidIf the tag contains other tags, body will be of type roXMLList.\u0026nbsp;To generate XML, create an roXMLElement, then use functions like SetName(), AddAttribute(), SetBody(), AddElementWithBody(), AddElement(), AddBodyElement(), and AddText() functions to\u0026nbsp;build the XML object hierarchy.Then call GenXML() to return the XML as a string.GenXML() takes one parameter (boolean) that indicates whether the generated xml\u0026nbsp;should have the \u0026lt;?xml \u0026gt; tag at the top.\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example subroutine to print out the contents of an roXMLElement tree\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Â\u0026nbsp;PrintXML(root, 0) Sub PrintXML(element As Object, depth As Integer) print tab(depth*3);\"Name: \";element.GetName() if not element.GetAttributes().IsEmpty() then print tab(depth*3);\"Attributes: \"; for each a in element.GetAttributes() print a;\"\u003d\";left(element.GetAttributes()[a], 20); if element.GetAttributes().IsNext() then print \", \"; end for print end if if element.GetText()\u0026lt;\u0026gt;invalid then print tab(depth*3);\"Contains Text: \";left(element.GetText(), 40) end if if element.GetChildElements()\u0026lt;\u0026gt;invalid print tab(depth*3);\"Contains roXMLList:\" for each e in element.GetChildElements() PrintXML(e, depth+1) end for end if print end sub\n\u003c/ac:plain-text-body\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example generating XML\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Â\u0026nbsp; root.SetName(\"myroot\") root.AddAttribute(\"key1\", \"value1\") root.AddAttribute(\"key2\", \"value2\") ne \u003d root.AddBodyElement() ne.SetName(\"sub\") ne.SetBody(\"this is the sub1 text\") ne \u003d root.AddBodyElement() ne.SetName(\"subelement2\") ne.SetBody(\"more sub text\") ne.AddAttribute(\"k\", \"v\") ne \u003d root.AddElement(\"subelement3\") ne.SetBody(\"more sub text 3\") root.AddElementWithBody(\"sub\", \"another sub (#4)\") PrintXML(root, 0) print root.GenXML(false)\n\u003c/ac:plain-text-body\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Another Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Â\u0026nbsp; xml \u003d CreateObject(\"roXMLElement\") xml.SetName(\"root\") subel1 \u003d xml.AddBodyElement() subel1.SetName(\"subelement1\") subel2 \u003d xml.AddBodyElement() subel2.SetName(\"subelement2\") \n\u003c/ac:plain-text-body\u003eIs the same as:\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Â\u0026nbsp; xml \u003d CreateObject(\"roXMLElement\") xml.SetName(\"root\") subel1 \u003d xml.AddElement(\"subelement1\") subel2 \u003d xml.AddElement(\"subelement2\")\n\u003c/ac:plain-text-body\u003e\u0026nbsp;\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roXMLElement",
      "documentationVersion": 4
    },
    "roHttpAgent": {
      "shortDescription": "All Scene Graph nodes can use the roHttpAgent component to support cookies, custom HTTP headers, and support secure HTTP file transfer protocols, such as passing certificates to the server as part of a URL transfer. An roHttpAgent component object is created by default for all Scene Graph nodes for this purpose. The roHttpAgent object supports the interface used by many BrightScript components to allow secure HTTP file transfer protocols. Child nodes of a Scene Graph node automatically inherit the parent roHttpAgent object, unless a new roHttpAgent object is created, or an existing roHttpAgent is set for a child node. There are two roSGNode interface methods that allow a specific roHttpAgent object to be selected and set for a specific Scene Graph node.",
      "interfaceNames": [
        "ifHttpAgent"
      ],
      "eventNames": [],
      "name": "roHttpAgent",
      "description": "All Scene Graph nodes can use the roHttpAgent component to support cookies, custom HTTP headers, and support secure HTTP file transfer protocols, such as passing certificates to the server as part of a URL transfer. An roHttpAgent component object is created by default for all Scene Graph nodes for this purpose. The roHttpAgent object supports the interface used by many BrightScript components to allow secure HTTP file transfer protocols. Child nodes of a Scene Graph node automatically inherit the parent roHttpAgent object, unless a new roHttpAgent object is created, or an existing roHttpAgent is set for a child node. There are two roSGNode interface methods that allow a specific roHttpAgent object to be selected and set for a specific Scene Graph node.An roHttpAgent object is created automatically for all Scene Graph nodes, or can be created with no parameters:CreateObject(\"roHttpAgent\")Scene Graph Audio and Video nodes always create a new roHttpAgent object and do not share it, and can use a different mechanism for HTTPS and cookie support, that involves setting certificates and cookies as Content Meta-Data attributes for the node ContentNode node.",
      "descriptionHTML": "All Scene Graph nodes can use the roHttpAgent component to support cookies, custom HTTP headers, and support secure HTTP file transfer protocols, such as passing certificates to the server as part of a URL transfer. An roHttpAgent component object is created by default\u0026nbsp;for all Scene Graph nodes for this purpose. The roHttpAgent object supports the \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"ifHttpAgent\" /\u003e\n\u003c/ac:link\u003e interface used by many BrightScript components to allow secure HTTP file transfer protocols. Child nodes of a Scene Graph node automatically inherit the parent roHttpAgent object, unless a new roHttpAgent object is created\u003cspan style\u003d\"color: rgb(255,0,0);\"\u003e\u003cspan style\u003d\"color: rgb(0,0,0);\"\u003e, or an existing roHttpAgent is set for a \u003c/span\u003e\u003c/span\u003e\u003cspan style\u003d\"color: rgb(0,0,0);\"\u003echild node.\u003c/span\u003e There are two roSGNode \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"ifSGNodeHttpAgentAccess\" /\u003e\n\u003c/ac:link\u003e interface methods that allow a specific roHttpAgent object to be selected and\u0026nbsp;set\u0026nbsp;for a specific Scene Graph node.An\u0026nbsp;roHttpAgent object is created automatically for all Scene Graph nodes, or can be created with no parameters:\u003ccode\u003eCreateObject(\"roHttpAgent\")\u003c/code\u003e\u003cac:rich-text-body\u003e\n \u003cp\u003eScene Graph Audio and Video nodes always create a new roHttpAgent object and do not share it, and can use a different mechanism for HTTPS and cookie support, that involves setting certificates and cookies as Content Meta-Data attributes for the node ContentNode node.\u003c/p\u003e\n\u003c/ac:rich-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roHttpAgent",
      "documentationVersion": 5
    },
    "roRegistry": {
      "shortDescription": "The Registry is an area of non-volatile storage where a small number of persistent settings can be stored.",
      "interfaceNames": [
        "ifRegistry"
      ],
      "eventNames": [],
      "name": "roRegistry",
      "description": "The Registry provides a means for an application to write and read small amounts of data such as settings, scores, etc.  The data persists even if the user exits the application and even if the player is rebooted.  Registry data is removed only when the application explicitly removes it, the user uninstalls the application, which remove the registry for the application, or the user performs a factory reset, which removes the registry for all applications.There is a separate registry for each developer ID.  This allows multiple applications to use the registry without being able to read or modify the registry from other applications.  If desired, a single registry can be shared across multiple applications by using the same developer ID to package the applications. This is the conventional way that an \"application suite\" with shared preferences and other shared information should work.  Each registry is divided into sections which are specified by the developer for organization and grouping of attributes.  Methods in ifRegistry are provided to list the sections in the registry and to provide access to the data in each section.  The maximum size of each application registry is 16K bytes. Care should be taken to minimize the amount of data stored and the frequency it is updated.The Registry also supports the use of a special transient registry section. A registry section named \"Transient\" can be used to store attributes that have the lifetime of a single boot. Within a specific boot session, these values will be persistent to the application and stored as any other registry value. Whenever the user reboots the Roku Streaming Player, all \"Transient\" registry sections are removed and the values no longer persist. This technique is useful for caching data to minimize network access, yet still ensuring that this data is always fresh after a system reboot.The registry is encrypted, and updates are relatively performance intensive and should be used sparingly.  Note that all writes to the registry are delayed, and not committed to non-volatile storage until ifRegistry.Flush() or ifRegistrySection.Flush() is explicitly called. The platform may choose opportune times to flush data on its own, but no application is technically correct unless it explicitly calls Flush() at appropriate times. Flushing the registry is a relatively time-consuming operation, so it should be done as infrequently as possible.  The Registry data is stored in a fault tolerant manner by preserving a backup for each write which is automatically rolled-back in the event of a failure.Access to the registry is available through the roRegistry object. This object is created with no parameters.CreateObject(\"roRegistry\")",
      "descriptionHTML": "The Registry provides a means for an application to write and read small amounts of data such as settings, scores, etc.\u0026nbsp; The data persists even if the user exits the application and even if the player is rebooted.\u0026nbsp; Registry data is removed only when the application explicitly removes it, the user uninstalls the application, which remove the registry for the application, or the user performs a factory reset, which removes the registry for all applications.There is a separate registry for each \u003ca href\u003d\"http://sdkdocs.roku.com/display/sdkdoc/Channel+Packaging+And+Publishing#ChannelPackagingAndPublishing-31Genkey\"\u003edeveloper ID\u003c/a\u003e.\u0026nbsp; This allows multiple applications to use the registry without being able to read or modify the registry from other applications.\u0026nbsp; If desired, a single registry can be shared across multiple applications by using the same developer ID to package the applications. This is the conventional way that an \"application suite\" with shared preferences and other shared information should work.\u0026nbsp; Each registry is divided into sections which are specified by the developer for organization and grouping of attributes.\u0026nbsp; Methods in ifRegistry are provided to list the sections in the registry and to provide access to the data in each section. \u0026nbsp;The maximum size of each application registry is 16K bytes. Care should be taken to minimize the amount of data stored and the frequency it is updated.The Registry also supports the use of a special \u003cem\u003etransient\u003c/em\u003e registry section. A registry section named \"Transient\" can be used to store attributes that have the lifetime of a single boot. Within a specific boot session, these values will be persistent to the application and stored as any other registry value. Whenever the user reboots the Roku Streaming Player, all \"Transient\" registry sections are removed and the values no longer persist. This technique is useful for caching data to minimize network access, yet still ensuring that this data is always fresh after a system reboot.The registry is encrypted, and updates are relatively performance intensive and should be used sparingly.\u0026nbsp; Note that all writes to the registry are delayed, and not committed to non-volatile storage until ifRegistry.Flush() or ifRegistrySection.Flush() is explicitly called. The platform may choose opportune times to flush data on its own, but no application is technically correct unless it explicitly calls Flush() at appropriate times. Flushing the registry is a relatively time-consuming operation, so it should be done as infrequently as possible.\u0026nbsp; The Registry data is stored in a fault tolerant manner by preserving a backup for each write which is automatically rolled-back in the event of a failure.Access to the registry is available through the roRegistry object. \u003cbr class\u003d\"atl-forced-newline\"\u003e This object is created with no parameters.CreateObject(\"roRegistry\")",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roRegistry",
      "documentationVersion": 3
    },
    "roAppInfo": {
      "shortDescription": "roAppInfo returns information about the application.",
      "interfaceNames": [
        "ifAppInfo"
      ],
      "eventNames": [],
      "name": "roAppInfo",
      "description": "roAppInfo retrieves the developer ID, which can be useful during development. It also retrieves manifest values, such as the title and version number, avoiding the need to parse the manifest file from BrightScript. This object is created with no parameters. vbExample codeappInfo \u003d CreateObject(\"roAppInfo\") print \" ID: \" ; appInfo.GetID() print \" IsDev: \" ; appInfo.IsDev() print \" DevID: \" ; appInfo.GetDevID() print \" Title: \" ; appInfo.GetTitle() print \"Version: \" ; appInfo.GetVersion() print \"MajVers: \" ; appInfo.GetValue(\"major_version\")noneExample output\u0027 ID: 41089_bd3a \u0027 IsDev: false \u0027 DevID: 990df3584920876b7e74fe7b29e1f505f148373b \u0027 Title: BrightScript Test \u0027 Version: 1.0.0 \u0027 MajVers: 1",
      "descriptionHTML": "roAppInfo retrieves the developer ID, which can be useful during development.\u0026nbsp;It also retrieves manifest values, such as the title and version number, avoiding the need to parse the manifest file from BrightScript.\u0026nbsp;This object is created with no parameters.\u0026nbsp;\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example code\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n appInfo \u003d CreateObject(\"roAppInfo\") print \" ID: \" ; appInfo.GetID() print \" IsDev: \" ; appInfo.IsDev() print \" DevID: \" ; appInfo.GetDevID() print \" Title: \" ; appInfo.GetTitle() print \"Version: \" ; appInfo.GetVersion() print \"MajVers: \" ; appInfo.GetValue(\"major_version\")\n\u003c/ac:plain-text-body\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n none\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example output\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n \u0027 ID: 41089_bd3a \u0027 IsDev: false \u0027 DevID: 990df3584920876b7e74fe7b29e1f505f148373b \u0027 Title: BrightScript Test \u0027 Version: 1.0.0 \u0027 MajVers: 1 \n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roAppInfo",
      "documentationVersion": 11
    },
    "roLocalization": {
      "shortDescription": "The roLocalization object provides functions to assist in localization.  This component is available beginning with firmware version 4.3.",
      "interfaceNames": [
        "ifLocalization"
      ],
      "eventNames": [],
      "name": "roLocalization",
      "description": "This object provides functions to assist in localization.  It is created with no parameters:CreateObject(\"roLocalization\") Exampleloc \u003d CreateObject(\"roLocalization\") image \u003d loc.GetLocalizedAsset(\"images\", \"splash.png\")",
      "descriptionHTML": "This object provides functions to assist in localization.\u0026nbsp; It is created with no parameters:\u003cli\u003eCreateObject(\"roLocalization\")\u003c/li\u003e\u0026nbsp;\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n loc \u003d CreateObject(\"roLocalization\") image \u003d loc.GetLocalizedAsset(\"images\", \"splash.png\")\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roLocalization",
      "documentationVersion": 7
    },
    "roAudioMetadata": {
      "shortDescription": "The roAudioMetadata component provides developers access to audio file metadata included in many audio files. This should enable some audiofiles to deliver the information needed to fill out an roSpringboard screen without passing the info in a separate xml feed. roAudioMetadata currently only works with local file URLs. ",
      "interfaceNames": [
        "ifAudioMetadata"
      ],
      "eventNames": [],
      "name": "roAudioMetadata",
      "description": "The roAudioMetadata requires the use of a dynamically loaded library that is not part of the initially booted image. Therefore, an entry must be added to the manifest of any applications that use the roAudioMetadata component so it can be loaded when the channel is launched. Here\u0027s the manifest entry: requires_audiometadata\u003d1This object is created without any arguments:CreateObject(\"roAudioMetadata\")vbExampleREM printAA() is from generalUtils.brs in our sample apps REM and used to print an associative Array Sub SaveCoverArtFile(filename As String) meta \u003d CreateObject(\"roAudioMetadata\") meta.SetUrl(filename) print \"------------- GetTags() -------------------------\" tags \u003d meta.GetTags() printAA(tags) print \"------------- GetAudioProperties() --------------\" properties \u003d meta.GetAudioProperties() printAA(properties) print \"------------- GetCoverArt() ---------------------\" thumbnail \u003d meta.GetCoverArt() if (thumbnail \u003c\u003e invalid) then if (thumbnail.bytes \u003d invalid) then return end if imgtype \u003d thumbnail.type image_ext\u003d\"\" if (imgtype \u003d \"image/jpeg\" or imgtype \u003d \"jpg\") then image_ext \u003d \"jpg\" else if (imgtype \u003d \"image/png\" or imgtype \u003d \"png\") then image_ext \u003d \"png\" else image_ext \u003d \"jpg\" end if tmp_img \u003d \"tmp:/CoverArtImage\" + \".\" + image_ext if (tmp_img \u003c\u003e invalid) then DeleteFile(tmp_img) end if thumbnail.bytes.Writefile(tmp_img) end if End Sub ",
      "descriptionHTML": "The roAudioMetadata requires the use of a dynamically loaded library that is not part of the initially booted image. Therefore, an entry must be added to the manifest of any applications that use the roAudioMetadata component so it can be loaded when the channel is launched. Here\u0027s the manifest entry:\u0026nbsp;requires_audiometadata\u003d1\u003cbr class\u003d\"atl-forced-newline\"\u003e This object is created without any arguments:\u003cli\u003eCreateObject(\"roAudioMetadata\")\u003c/li\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n REM printAA() is from generalUtils.brs in our sample apps REM and used to print an associative Array Sub SaveCoverArtFile(filename As String) meta \u003d CreateObject(\"roAudioMetadata\") meta.SetUrl(filename) print \"------------- GetTags() -------------------------\" tags \u003d meta.GetTags() printAA(tags) print \"------------- GetAudioProperties() --------------\" properties \u003d meta.GetAudioProperties() printAA(properties) print \"------------- GetCoverArt() ---------------------\" thumbnail \u003d meta.GetCoverArt() if (thumbnail \u0026lt;\u0026gt; invalid) then if (thumbnail.bytes \u003d invalid) then return end if imgtype \u003d thumbnail.type image_ext\u003d\"\" if (imgtype \u003d \"image/jpeg\" or imgtype \u003d \"jpg\") then image_ext \u003d \"jpg\" else if (imgtype \u003d \"image/png\" or imgtype \u003d \"png\") then image_ext \u003d \"png\" else image_ext \u003d \"jpg\" end if tmp_img \u003d \"tmp:/CoverArtImage\" + \".\" + image_ext if (tmp_img \u0026lt;\u0026gt; invalid) then DeleteFile(tmp_img) end if thumbnail.bytes.Writefile(tmp_img) end if End Sub\n\u003c/ac:plain-text-body\u003e\u0026nbsp;\u003cbr class\u003d\"atl-forced-newline\"\u003e\u003cspan style\u003d\"font-family: monospace;\"\u003e\u003cbr\u003e\u003c/span\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roAudioMetadata",
      "documentationVersion": 2
    },
    "roMessagePort": {
      "shortDescription": "A Message Port is the place messages (events) are sent.",
      "interfaceNames": [
        "ifMessagePort"
      ],
      "eventNames": [],
      "name": "roMessagePort",
      "description": "When using BrightScript, you would not call these functions directly. Instead, use the \"Wait\" BrightScript statement.  This object is created with no parameters:CreateObject(\"roMessagePort\")",
      "descriptionHTML": "When using BrightScript, you would not call these functions directly. Instead, use the \"Wait\" BrightScript statement. \u0026nbsp;This object is created with no parameters:\u003cli\u003eCreateObject(\"roMessagePort\")\u003c/li\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roMessagePort",
      "documentationVersion": 1
    },
    "roDouble": {
      "shortDescription": "Object equivalent for intrinsic type \u0027Double\u0027.",
      "interfaceNames": [
        "ifToStr",
        "ifDouble"
      ],
      "eventNames": [],
      "name": "roDouble",
      "description": "roDouble is a legacy object name, corresponding to the intrinsic Double object.  Applications should use Double literal values and/or Double-typed variables directly. ",
      "descriptionHTML": "roDouble is a legacy object name, corresponding to the intrinsic Double object.\u0026nbsp; Applications should use Double literal values and/or Double-typed variables directly.\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roDouble",
      "documentationVersion": 2
    },
    "roSocketAddress": {
      "shortDescription": "The roSocketAddress is used by the roStreamSocket and roDataGramSocket components for TCP and UDP traffic respectively.",
      "interfaceNames": [
        "ifSocketAddress"
      ],
      "eventNames": [],
      "name": "roSocketAddress",
      "description": "This object is created without any arguments:CreateObject(\"roSocketAddress\")Methods in are used to assign an IP address to the object.  roSocketAddress currently supports only IPV4 addresses.",
      "descriptionHTML": "This object is created without any arguments:\u003cli\u003eCreateObject(\"roSocketAddress\")\u003c/li\u003eMethods in \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"ifSocketAddress\" /\u003e\n\u003c/ac:link\u003e are used to assign an IP address to the object.\u0026nbsp; roSocketAddress currently supports only IPV4 addresses.",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roSocketAddress",
      "documentationVersion": 3
    },
    "roSGScreen": {
      "shortDescription": "The roSGScreen object is a Scene Graph canvas that displays the contents of a Scene Graph Scene node tree.",
      "interfaceNames": [
        "ifRoSGScreen"
      ],
      "eventNames": [],
      "name": "roSGScreen",
      "description": "The object is created by calling:CreateObject(\"roSGScreen\")CreateScene() takes one argument, the name of the Scene component to create.  Channels will typically extend Scene with their own application specific Scene type, such as MyScene.roSGScreen Typical Usage Examplescreen \u003d CreateObject(\"roSGScreen\") scene \u003d screen.CreateScene(\"MyScene\") screen.show()",
      "descriptionHTML": "The object is created by calling:\u003ccode\u003eCreateObject(\"roSGScreen\")\u003c/code\u003e\u003ccode\u003eCreateScene()\u003c/code\u003e\u0026nbsp;takes one argument, the name of the Scene component to create. \u0026nbsp;Channels will typically extend Scene with their own application specific Scene type, such as MyScene.\u003cac:parameter ac:name\u003d\"title\"\u003e\n roSGScreen Typical Usage Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n screen \u003d CreateObject(\"roSGScreen\") scene \u003d screen.CreateScene(\"MyScene\") screen.show() \n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roSGScreen",
      "documentationVersion": 13
    },
    "roChannelStore": {
      "shortDescription": "The roChannelStore component allows the application to perform a purchase of an In-Channel Product or upgrade a channel. Most of the purchase flow, screens and messaging associated with the financial transaction are handled by the firmware outside of control or monitoring by BrightScript code. The BrightScript code merely initiates the purchase and receives a final result. This will engender trust with users and give them confidence that they are dealing with the Roku Channel Store.",
      "interfaceNames": [
        "ifChannelStore",
        "ifSetMessagePort",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roChannelStoreEvent"
      ],
      "name": "roChannelStore",
      "description": "The roChannelStore component allows the application to perform a purchase of an In-Channel Product or upgrade a channel. Most of the purchase flow, screens and messaging associated with the financial transaction are handled by the firmware outside of control or monitoring by BrightScript code. The BrightScript code merely initiates the purchase and receives a final result. This will engender trust with users and give them confidence that they are dealing with the Roku Channel Store.The roChannelStore component allows purchasing only those In-Channel Products which are associated with the running channel. Please see the Add an In-Channel Digital Product section of for details on how to create an In-Channel Product and associate it with a channel. After one or Products are created, GetCatalog() can be used to retrieve a list of Products and their attributes. DoOrder() can be called to initiate a purchase of one or more of the Products.The roChannelStore component also allows upgrading of the running channel. When any channel is created, it can be associated with another channel, its \"In-Channel Upgrade\" channel. Then GetUpgrade() can be called in the first channel to retrieve information about the upgrade, and DoUpgrade() can be called to initiate the purchase of the upgrade. If the purchase is successful, the new channel is added and the old channel is automatically deleted.Note that only a channel downloaded from the Channel Store can have an In-Channel Product or upgrade associated with it. A side-loaded channel cannot have associated products or upgrades.The roChannelStore object has a FakeServer() method that will enable you to test the purchase flow scenarios without actually making a real transaction in the Roku channel store. This will be useful in the development of your channel, but should never be used in the actual channel you publish.This object is created without any arguments:CreateObject(\"roChannelStore\")",
      "descriptionHTML": "The roChannelStore component allows the application to perform a purchase of an In-Channel Product or upgrade a channel. Most of the purchase flow, screens and messaging associated with the financial transaction are handled by the firmware outside of control or monitoring by BrightScript code. The BrightScript code merely initiates the purchase and receives a final result. This will engender trust with users and give them confidence that they are dealing with the Roku Channel Store.The roChannelStore component allows purchasing only those In-Channel Products which are associated with the running channel. Please see the \n\u003cac:link ac:anchor\u003d\"AddanIn-ChannelDigitalProduct\"\u003e\n \u003cri:page ri:content-title\u003d\"Roku Billing and In-Channel Purchasing (Since v4.3)\" /\u003e\n \u003cac:plain-text-link-body\u003e\n  Add an In-Channel Digital Product \n \u003c/ac:plain-text-link-body\u003e\n\u003c/ac:link\u003esection of \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"Channel Packaging And Publishing\" /\u003e\n\u003c/ac:link\u003e for details on how to create an In-Channel Product and associate it with a channel. After one or Products are created, GetCatalog() can be used to retrieve a list of Products and their attributes. DoOrder() can be called to initiate a purchase of one or more of the Products.The roChannelStore component also allows upgrading of the running channel. When any channel is created, it can be associated with another channel, its \"In-Channel Upgrade\" channel. Then GetUpgrade() can be called in the first channel to retrieve information about the upgrade, and DoUpgrade() can be called to initiate the purchase of the upgrade. If the purchase is successful, the new channel is added and the old channel is automatically deleted.Note that only a channel downloaded from the Channel Store can have an In-Channel Product or upgrade associated with it. A side-loaded channel cannot have associated products or upgrades.The roChannelStore object has a FakeServer() method that will enable you to test the purchase flow scenarios without actually making a real transaction in the Roku channel store. This will be\u0026nbsp;useful in the development of your channel, but should never be used in the actual channel you publish.This object is created without any arguments:\u003cli\u003eCreateObject(\"roChannelStore\")\u003c/li\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roChannelStore",
      "documentationVersion": 19
    },
    "roFontRegistry": {
      "shortDescription": "The roFontRegistry object allows you to create roFont objects, either using the default font or using fonts in TrueType or OpenType files packaged with your application.",
      "interfaceNames": [
        "ifFontRegistry"
      ],
      "eventNames": [],
      "name": "roFontRegistry",
      "description": "This object is created with no parameters:CreateObject(\"roFontRegistry\") Examplereg \u003d CreateObject(\"roFontRegistry\") font \u003d reg.GetDefaultFont(30, false, false) screen \u003d CreateObject(\"roScreen\") screen.DrawText(\"hello world\", 100, 100, \u0026hFFFFFFFF, font)Using a font filereg.Register(\"pkg:/fonts/myfont.ttf\") font \u003d reg.GetFont(\"MyFont\", 30, false, false) screen \u003d CreateObject(\"roScreen\") screen.DrawText(\"hello world\", 100, 100, \u0026hFFFFFFFF, font) Font files can quickly get very large, so be conscious of the size of the font files you include with your application. You should be able to find very good font files that are 50k or less. Anything larger is probably too big. The customvideoplayer sample application is a good example of usage. ",
      "descriptionHTML": "This object is created with no parameters:\u003cli\u003eCreateObject(\"roFontRegistry\")\u003c/li\u003e\u0026nbsp;\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n reg \u003d CreateObject(\"roFontRegistry\") font \u003d reg.GetDefaultFont(30, false, false) screen \u003d CreateObject(\"roScreen\") screen.DrawText(\"hello world\", 100, 100, \u0026amp;hFFFFFFFF, font)\n\u003c/ac:plain-text-body\u003e\u003cac:parameter ac:name\u003d\"title\"\u003e\n Using a font file\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n reg.Register(\"pkg:/fonts/myfont.ttf\") font \u003d reg.GetFont(\"MyFont\", 30, false, false) screen \u003d CreateObject(\"roScreen\") screen.DrawText(\"hello world\", 100, 100, \u0026amp;hFFFFFFFF, font)\n\u003c/ac:plain-text-body\u003e\u0026nbsp;Font files can quickly get very large, so be conscious of the size of the font files you include with your application. You should be able to find very good font files that are 50k or less. Anything larger is probably too big. The customvideoplayer sample application is a good example of usage.\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roFontRegistry",
      "documentationVersion": 3
    },
    "roPosterScreen": {
      "shortDescription": "The Poster Screen provides a graphical display of poster art for content selection or can be used as a submenu to provide hierarchical structure to the application.",
      "interfaceNames": [
        "ifPosterScreen",
        "ifHttpAgent"
      ],
      "eventNames": [
        "roPosterScreenEvent"
      ],
      "name": "roPosterScreen",
      "description": "In some cases, applications may wish to present a flat single-level list of titles in a queue, but the Poster Screen can also be used at multiple levels in the application to provide hierarchical browsing. It also provides an optional \"filter banner\" for displaying categories representing filtered subsets of the data or categorized groups. Each item in the poster screen is represented by an image (aka poster), so any type of item that can be visually represented by an image can be displayed in the poster screen. It is used to show lists of data to users and common patterns include content categories, movies, podcasts, and search results. Just below the overhang is the filter banner. It allows a method of easily selecting or filtering content based on categories. The categories are set by the developer during screen initialization, and the script is notified when a new category is highlighted or selected. Based on the event notification, the script can set the desired content in the view. The filter banner is optional.Diagram: roPosterScreen (flat-category)Notes:ShortDescriptionLine1 from the content metadata. Generally the category title. ShortDescriptionLine2 from the content metadata. Generally a description for the category.Diagram: roPosterScreen (arced-landscape)Diagram: roPosterScreen (arced-portrait)Diagram: roPosterScreen (flat-episodic)Notes:TV content is often displayed as a series of episodes within a season. The flat-episodic screen type provides a standard way to display episodic content, such as a TV series. There is also a flat-episodic-16x9-episodic screen type to display episodic content with 16x9 images. The paragraph text allows the user to view the synopsis for the currently selected episode. As the user scrolls right/left to select a new episode, the paragraph text and the short description lines are updated to reflect the description of the highlighted episode In order to see poster art in the side posters instead of episode numbers, please ensure that the SDPosterUrl and HDPosterUrl are defined for the content and that episodeNumber is not defined for that content. EpisodeNumber overrides the poster URL.This object is created with no parameters:CreateObject(\"roPosterScreen\")vbExampleFunction Main() port \u003d CreateObject(\"roMessagePort\") poster \u003d CreateObject(\"roPosterScreen\") poster.SetBreadcrumbText(\"[location1]\", \"[location2]\") poster.SetMessagePort(port) list \u003d CreateObject(\"roArray\", 10, true) For i \u003d 0 To 10 o \u003d CreateObject(\"roAssociativeArray\") o.ContentType \u003d \"episode\" o.Title \u003d \"[Title]\" o.ShortDescriptionLine1 \u003d \"[ShortDescriptionLine1]\" o.ShortDescriptionLine2 \u003d \"[ShortDescriptionLine2]\" o.Description \u003d \"\" o.Description \u003d \"[Description] \" o.Rating \u003d \"NR\" o.StarRating \u003d \"75\" o.ReleaseDate \u003d \"[\u003cmm/dd/yyyy]\" o.Length \u003d 5400 o.Categories \u003d [] o.Categories.Push(\"[Category1]\") o.Categories.Push(\"[Category2]\") o.Categories.Push(\"[Category3]\") o.Actors \u003d [] o.Actors.Push(\"[Actor1]\") o.Actors.Push(\"[Actor2]\") o.Actors.Push(\"[Actor3]\") o.Director \u003d \"[Director]\" list.Push(o) End For poster.SetContentList(list) poster.Show()Â  While True msg \u003d wait(0, port) If msg.isScreenClosed() Then return -1 ElseIf msg.isListItemSelected() print \"msg: \";msg.GetMessage();\"idx: \";msg.GetIndex() End If End While End Function  Image: roPosterScreen example resultsThe following screen is displayed when this code is executed: Note: In this example, we did not set valid values for SDPosterUrl or HDPoster URL, so no artwork is displayed. We have also elected not to display the filter banner and did not call the SetListNames API, so no filter banner is displayed. The screen is fully functional in other respects and responds to user input, scrolls left/right and receives events as the poster selection changes.",
      "descriptionHTML": "In some cases, applications may wish to present a flat single-level list of titles in a queue, but the Poster Screen can also be used at multiple levels in the application to provide hierarchical browsing. It also provides an optional \"filter banner\" for displaying categories representing filtered subsets of the data or categorized groups. \u003cbr class\u003d\"atl-forced-newline\"\u003e Each item in the poster screen is represented by an image (aka poster), so any type of item that can be visually represented by an image can be displayed in the poster screen. It is used to show lists of data to users and common patterns include content categories, movies, podcasts, and search results. \u003cbr class\u003d\"atl-forced-newline\"\u003e Just below the overhang is the filter banner. It allows a method of easily selecting or filtering content based on categories. The categories are set by the developer during screen initialization, and the script is notified when a new category is highlighted or selected. Based on the event notification, the script can set the desired content in the view. The filter banner is optional. \u003cbr class\u003d\"atl-forced-newline\"\u003e \n\u003cac:image ac:height\u003d\"385\" ac:width\u003d\"561\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddav5cdc72f22e0a176f89cbcb7ad12debc8.png\" /\u003e\n\u003c/ac:image\u003eDiagram: roPosterScreen (flat-category)\u003cbr class\u003d\"atl-forced-newline\"\u003e Notes:\u003cli\u003eShortDescriptionLine1 from the content metadata. Generally the category title.\u003c/li\u003e\n\u003cli\u003eShortDescriptionLine2 from the content metadata. Generally a description for the category.\u003c/li\u003e\u003cbr class\u003d\"atl-forced-newline\"\u003e \n\u003cac:image ac:height\u003d\"383\" ac:width\u003d\"561\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddave03466805122630c19c8a26b941a8a80.png\" /\u003e\n\u003c/ac:image\u003eDiagram: roPosterScreen (arced-landscape)\u003cbr class\u003d\"atl-forced-newline\"\u003e \n\u003cac:image ac:height\u003d\"382\" ac:width\u003d\"561\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddav58da1de5433fe76e8bdad9c7db6eb726.png\" /\u003e\n\u003c/ac:image\u003eDiagram: roPosterScreen (arced-portrait)\u003cbr class\u003d\"atl-forced-newline\"\u003e \n\u003cac:image ac:height\u003d\"382\" ac:width\u003d\"561\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddav53f5003889362b8e4bd479389b0709fa.png\" /\u003e\n\u003c/ac:image\u003eDiagram: roPosterScreen (flat-episodic)Notes:\u003cli\u003eTV content is often displayed as a series of episodes within a season. The flat-episodic screen type provides a standard way to display episodic content, such as a TV series.\u003c/li\u003e\n\u003cli\u003eThere is also a flat-episodic-16x9-episodic screen type to display episodic content with 16x9 images.\u003c/li\u003e\n\u003cli\u003eThe paragraph text allows the user to view the synopsis for the currently selected episode. As the user scrolls right/left to select a new episode, the paragraph text and the short description lines are updated to reflect the description of the highlighted episode\u003c/li\u003e\n\u003cli\u003eIn order to see poster art in the side posters instead of episode numbers, please ensure that the SDPosterUrl and HDPosterUrl are defined for the content and that episodeNumber is not defined for that content. EpisodeNumber overrides the poster URL.\u003c/li\u003e\u003cbr class\u003d\"atl-forced-newline\"\u003e This object is created with no parameters:\u003cli\u003eCreateObject(\"roPosterScreen\")\u003c/li\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Function Main() port \u003d CreateObject(\"roMessagePort\") poster \u003d CreateObject(\"roPosterScreen\") poster.SetBreadcrumbText(\"[location1]\", \"[location2]\") poster.SetMessagePort(port) list \u003d CreateObject(\"roArray\", 10, true) For i \u003d 0 To 10 o \u003d CreateObject(\"roAssociativeArray\") o.ContentType \u003d \"episode\" o.Title \u003d \"[Title]\" o.ShortDescriptionLine1 \u003d \"[ShortDescriptionLine1]\" o.ShortDescriptionLine2 \u003d \"[ShortDescriptionLine2]\" o.Description \u003d \"\" o.Description \u003d \"[Description] \" o.Rating \u003d \"NR\" o.StarRating \u003d \"75\" o.ReleaseDate \u003d \"[\u0026lt;mm/dd/yyyy]\" o.Length \u003d 5400 o.Categories \u003d [] o.Categories.Push(\"[Category1]\") o.Categories.Push(\"[Category2]\") o.Categories.Push(\"[Category3]\") o.Actors \u003d [] o.Actors.Push(\"[Actor1]\") o.Actors.Push(\"[Actor2]\") o.Actors.Push(\"[Actor3]\") o.Director \u003d \"[Director]\" list.Push(o) End For poster.SetContentList(list) poster.Show()Â\u0026nbsp; While True msg \u003d wait(0, port) If msg.isScreenClosed() Then return -1 ElseIf msg.isListItemSelected() print \"msg: \";msg.GetMessage();\"idx: \";msg.GetIndex() End If End While End Function\n\u003c/ac:plain-text-body\u003e\u0026nbsp;\u0026nbsp;Image: roPosterScreen example results\u003cbr class\u003d\"atl-forced-newline\"\u003e The following screen is displayed when this code is executed: \u003cbr class\u003d\"atl-forced-newline\"\u003e \n\u003cac:image ac:height\u003d\"384\" ac:width\u003d\"576\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddavfbf4e4508caeef1fb99e00793ce98eb8.png\" /\u003e\n\u003c/ac:image\u003e \u003cbr class\u003d\"atl-forced-newline\"\u003e Note: In this example, we did not set valid values for SDPosterUrl or HDPoster URL, so no artwork is displayed. We have also elected not to display the filter banner and did not call the SetListNames API, so no filter banner is displayed. The screen is fully functional in other respects and responds to user input, scrolls left/right and receives events as the poster selection changes.",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roPosterScreen",
      "documentationVersion": 3
    },
    "roTextScreen": {
      "shortDescription": "roTextScreen provides a way of displaying large amounts of scrollable text.",
      "interfaceNames": [
        "ifSetMessagePort",
        "ifTextScreen",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roTextScreenEvent"
      ],
      "name": "roTextScreen",
      "description": "This type of screen can be used to display help text, credits, license agreements, or other large amounts of text that require scrolling.The interface allows you to set the text and specify zero or more buttons.If no buttons are specified, then the user can exit the screen by pressing BACK or OK.",
      "descriptionHTML": "This type of screen can be used to display help text, credits, license agreements, or other large amounts of text that require scrolling.The interface allows you to set the text and specify zero or more buttons.If no buttons are specified, then the user can exit the screen by pressing BACK or OK.",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roTextScreen",
      "documentationVersion": 6
    },
    "roXMLList": {
      "shortDescription": "Contains a list of roXML objects.",
      "interfaceNames": [
        "ifList",
        "ifXMLList"
      ],
      "eventNames": [],
      "name": "roXMLList",
      "description": "Normally roXMLList objects are not created via CreateObject(), but are returned from various ifXMLElement functions such as GetChildElements() and GetBody().",
      "descriptionHTML": "Normally roXMLList objects are not created via CreateObject(), but are returned from various ifXMLElement functions such as GetChildElements() and GetBody().",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roXMLList",
      "documentationVersion": 2
    },
    "roArray": {
      "shortDescription": "An array stores an indexed collection of BrightScript objects. Each entry of an array can be a different type, or they may all of the same type.",
      "interfaceNames": [
        "ifEnum",
        "ifArrayGet",
        "ifArraySet",
        "ifArraySort",
        "ifArray"
      ],
      "eventNames": [],
      "name": "roArray",
      "description": "An roArray is created with two parameters:CreateObject(\"roArray\", size As Integer, resizeAs Boolean)Size is the initial number of elements allocated for the array. If resize is true, the array will be resized if needed to accommodate more elements. If the array is large, this might be slow. The \"dim\" statement may be used instead of CreateObject to allocate a new array. Dim has the advantage in that it automatically creates arrays of arrays for multi-dimensional arrays.",
      "descriptionHTML": "An roArray is created with two parameters:CreateObject(\"roArray\", \u003cem\u003esize\u003c/em\u003e As Integer, \u003cem\u003eresize\u003c/em\u003eAs Boolean)\u003cli\u003e\u003cem\u003eSize\u003c/em\u003e is the initial number of elements allocated for the array. If \u003cem\u003eresize\u003c/em\u003e is true, the array will be resized if needed to accommodate more elements. If the array is large, this might be slow.\u003c/li\u003e\n\u003cli\u003eThe \"dim\" statement may be used instead of CreateObject to allocate a new array. Dim has the advantage in that it automatically creates arrays of arrays for multi-dimensional arrays.\u003c/li\u003e\u003cbr class\u003d\"atl-forced-newline\"\u003e\u003cbr\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roArray",
      "documentationVersion": 4
    },
    "roInput": {
      "shortDescription": "An roInput object can be used to receive events sent from a network client using the External Control Protocol (ECP), as described in .",
      "interfaceNames": [
        "ifInput"
      ],
      "eventNames": [
        "roInputEvent"
      ],
      "name": "roInput",
      "description": "See External Control Service Commands for information about the ECP input command.This object is created without any arguments:CreateObject(\"roInput\")",
      "descriptionHTML": "See \n\u003cac:link ac:anchor\u003d\"ExternalControlServiceCommands\"\u003e\n \u003cri:page ri:content-title\u003d\"External Control Guide\" /\u003e\n \u003cac:link-body\u003e\n  \u003cspan style\u003d\"color: rgb(0,102,204);\"\u003eExternal Control Service Commands\u003c/span\u003e\n \u003c/ac:link-body\u003e\n\u003c/ac:link\u003e for information about the ECP input command.This object is created without any arguments:\u003cli\u003eCreateObject(\"roInput\")\u003c/li\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roInput",
      "documentationVersion": 4
    },
    "roFileSystem": {
      "shortDescription": "The roFilesystem component implements common filesystem inspection and modificationroutines.",
      "interfaceNames": [
        "ifFileSystem",
        "ifSetMessagePort",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roFileSystemEvent"
      ],
      "name": "roFileSystem",
      "description": "All paths are matched case-insensitively, regardless of the case-sensitivity of the underlying filesystem. The supported character set is limited to only those characters supported by vfat filesystems (valid Windows characters). The usbplayer sample application is a good example of roFileSystem usage. USB devices with VFAT, NTFS, HFS, and HFS Plus filesystems are supported. The USB filesystems are currently mounted read only. This object is created with no parameters:CreateObject(\"roFileSystem\") ",
      "descriptionHTML": "All paths are matched case-insensitively, regardless of the case-sensitivity of the underlying filesystem. The supported character set is limited to only those characters supported by vfat filesystems (valid Windows characters). The usbplayer sample application is a good example of roFileSystem usage. USB devices with VFAT, NTFS, HFS, and HFS Plus filesystems are supported. The USB filesystems are currently mounted read only. \u003cbr class\u003d\"atl-forced-newline\"\u003e This object is created with no parameters:\u003cli\u003eCreateObject(\"roFileSystem\")\u003c/li\u003e\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roFileSystem",
      "documentationVersion": 1
    },
    "roRegex": {
      "shortDescription": "The roRegex component provides the powerful regular expression processing of the PCRE library to Brightscript strings.",
      "interfaceNames": [
        "ifRegex"
      ],
      "eventNames": [],
      "name": "roRegex",
      "description": "Please see the PCRE documentation (http://www.pcre.org/) for documentation on the PCRE library used for regular expression matching.  See the the perlre man page for complete documentation of the possible regular expressions this library can parse and match. In general, most Perl compatible regular expressions are supported.This object is created with a string that represents the matching-pattern and a string to indicate flags that modify the behavior of the matching operation(s):CreateObject(\"roRegex\", \"[a-z]+\", \"i\")The match string (\"[a-z]+\" in the example above, which matches all lowercase letters) can include most Perl compatible regular expressions documented in the PCRE documentation (http://www.pcre.org/)Any combination of the following behavior flags (\"i\" in the example above which modifies to match upper and lowercase letters) is supported:\"i\" Case insensitive match \"m\" Multiline mode. The start of line \"^\" and end of line \"$\" constructs match immediately following or before any newline in the subject string as well as the very start and end of the string. Normally, just the start and end of the string would match. \"s\" Sets dot-all mode that includes newline in the \".*\" regular expression. This modifier is equivalent to Perl\u0027s /s modifier. \"x\" Sets extended mode that ignores whitespace characters except when escaped or inside a character class. Characters between an unescaped # outside a character a character class and the next newline character, inclusive, are also ignored. This modifier is equivalent to Perl\u0027s /x modifier",
      "descriptionHTML": "\u003cac:rich-text-body\u003e\n Please see the PCRE documentation (\n \u003ca href\u003d\"http://www.pcre.org/\"\u003ehttp://www.pcre.org/\u003c/a\u003e) for documentation on the PCRE library used for regular expression matching.\u0026nbsp; See the\u0026nbsp;\n \u003ca class\u003d\"external-link\" href\u003d\"http://perldoc.perl.org/perlre.html\" rel\u003d\"nofollow\"\u003ethe perlre man page\u003c/a\u003e for complete documentation of the possible regular expressions this library can parse and match. In general, most Perl compatible regular expressions are supported.\n\u003c/ac:rich-text-body\u003eThis object is created with a string that represents the \u003cem\u003ematching-pattern\u003c/em\u003e and a string to indicate flags that modify the behavior of the matching operation(s):\u003cli\u003eCreateObject(\"roRegex\", \"[a-z]+\", \"i\")\u003c/li\u003eThe match string (\"[a-z]+\" in the example above, which matches all lowercase letters) can include most Perl compatible regular expressions documented in the PCRE documentation (\u003ca href\u003d\"http://www.pcre.org/\"\u003ehttp://www.pcre.org/\u003c/a\u003e)Any combination of the following behavior flags (\"i\" in the example above which modifies to match upper and lowercase letters) is supported:\u003cli\u003e\"i\" Case insensitive match\u003c/li\u003e\n\u003cli\u003e\"m\" Multiline mode. The start of line \"^\" and end of line \"$\" constructs match immediately following or before any newline in the subject string as well as the very start and end of the string. Normally, just the start and end of the string would match.\u003c/li\u003e\n\u003cli\u003e\"s\" Sets dot-all mode that includes newline in the \".*\" regular expression. This modifier is equivalent to Perl\u0027s /s modifier.\u003c/li\u003e\n\u003cli\u003e\"x\" Sets extended mode that ignores whitespace characters except when escaped or inside a character class. Characters between an unescaped # outside a character a character class and the next newline character, inclusive, are also ignored. This modifier is equivalent to Perl\u0027s /x modifier\u003c/li\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roRegex",
      "documentationVersion": 2
    },
    "roCompositor": {
      "shortDescription": "The roCompositor allows the composition and animation of multiple roBitmaps and roRegions.",
      "interfaceNames": [
        "ifCompositor"
      ],
      "eventNames": [],
      "name": "roCompositor",
      "description": "The roCompositor can create and manage roSprites in a z-ordered list. The sprites can be of arbitrary size and can be thought of as planes. The compositor can manage collision detection between the sprites, support scrolling the sprite bitmap source, and support animated sprites (multi-frame sprites with frame-flipping animation). You may have multiple roCompositor components, and they can composite onto the same or separate bitmaps. That said, the most common scenario is to have a single roCompositorvbExample: Scrolling a bitmapLibrary \"v30/bslCore.brs\" Function main() black\u003d\u0026hFF\u0027RGBA screen\u003dCreateObject(\"roScreen\") compositor\u003dCreateObject(\"roCompositor\") compositor.SetDrawTo(screen, black) http \u003d CreateObject(\"roUrlTransfer\") http.SetMessagePort(CreateObject(\"roMessagePort\")) http.SetUrl(\"http://rokudev.roku.com/rokudev/examples/scroll/VeryBigPng.png\") http.AsyncGetToFile(\"tmp:/VeryBigPng.png\") wait(0, http.GetPort()) bigbm\u003dCreateObject(\"roBitmap\",\"tmp:/VeryBigPng.png\") region\u003dCreateObject(\"roRegion\", bigbm, 0, 0, 1280, 720) region.SetWrap(True) view_sprite\u003dcompositor.NewSprite(0, 0, region) compositor.draw() screen.SwapBuffers() msgport \u003d CreateObject(\"roMessagePort\") screen.SetMessagePort(msgport) codes \u003d bslUniversalControlEventCodes() While True msg\u003dwait(0, msgport) \u0027 wait for a button print \"Msg: \"; type(msg); \" event: \"; msg.GetInt() If type(msg)\u003d\"roUniversalControlEvent\" Then If msg.GetInt()\u003dcodes.BUTTON_UP_PRESSED Then Zip(screen, view_sprite, compositor, 0,-4) \u0027up Else If msg.GetInt()\u003dcodes.BUTTON_DOWN_PRESSED Then Zip(screen, view_sprite, compositor, 0,+4) \u0027 down Else If msg.GetInt()\u003dcodes.BUTTON_RIGHT_PRESSED Then Zip(screen, view_sprite, compositor, +4,0) \u0027 right Else If msg.GetInt()\u003dcodes.BUTTON_LEFT_PRESSED Then Zip(screen, view_sprite, compositor, -4, 0) \u0027 left Else If msg.GetInt() \u003d codes.BUTTON_BACK_PRESSED \u0027 back button Exit While End If End If End While End Function Function Zip(screen, view_sprite, compositor, xd, yd) For x\u003d1 To 60 view_sprite.OffsetRegion(xd, yd, 0, 0) compositor.draw() screen.SwapBuffers() End For End Function",
      "descriptionHTML": "The roCompositor can create and manage roSprites in a z-ordered list. The sprites can be of arbitrary size and can be thought of as planes. The compositor can manage collision detection between the sprites, support scrolling the sprite bitmap source, and support animated sprites (multi-frame sprites with frame-flipping animation). You may have multiple roCompositor components, and they can composite onto the same or separate bitmaps. That said, the most common scenario is to have a single roCompositor\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example: Scrolling a bitmap\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Library \"v30/bslCore.brs\" Function main() black\u003d\u0026amp;hFF\u0027RGBA screen\u003dCreateObject(\"roScreen\") compositor\u003dCreateObject(\"roCompositor\") compositor.SetDrawTo(screen, black) http \u003d CreateObject(\"roUrlTransfer\") http.SetMessagePort(CreateObject(\"roMessagePort\")) http.SetUrl(\"http://rokudev.roku.com/rokudev/examples/scroll/VeryBigPng.png\") http.AsyncGetToFile(\"tmp:/VeryBigPng.png\") wait(0, http.GetPort()) bigbm\u003dCreateObject(\"roBitmap\",\"tmp:/VeryBigPng.png\") region\u003dCreateObject(\"roRegion\", bigbm, 0, 0, 1280, 720) region.SetWrap(True) view_sprite\u003dcompositor.NewSprite(0, 0, region) compositor.draw() screen.SwapBuffers() msgport \u003d CreateObject(\"roMessagePort\") screen.SetMessagePort(msgport) codes \u003d bslUniversalControlEventCodes() While True msg\u003dwait(0, msgport) \u0027 wait for a button print \"Msg: \"; type(msg); \" event: \"; msg.GetInt() If type(msg)\u003d\"roUniversalControlEvent\" Then If msg.GetInt()\u003dcodes.BUTTON_UP_PRESSED Then Zip(screen, view_sprite, compositor, 0,-4) \u0027up Else If msg.GetInt()\u003dcodes.BUTTON_DOWN_PRESSED Then Zip(screen, view_sprite, compositor, 0,+4) \u0027 down Else If msg.GetInt()\u003dcodes.BUTTON_RIGHT_PRESSED Then Zip(screen, view_sprite, compositor, +4,0) \u0027 right Else If msg.GetInt()\u003dcodes.BUTTON_LEFT_PRESSED Then Zip(screen, view_sprite, compositor, -4, 0) \u0027 left Else If msg.GetInt() \u003d codes.BUTTON_BACK_PRESSED \u0027 back button Exit While End If End If End While End Function Function Zip(screen, view_sprite, compositor, xd, yd) For x\u003d1 To 60 view_sprite.OffsetRegion(xd, yd, 0, 0) compositor.draw() screen.SwapBuffers() End For End Function \n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roCompositor",
      "documentationVersion": 2
    },
    "roLongInteger": {
      "shortDescription": "Object equivalent for intrinsic type LongInteger.",
      "interfaceNames": [
        "ifToStr",
        "ifLongInt"
      ],
      "eventNames": [],
      "name": "roLongInteger",
      "description": "roLongInteger is the object name corresponding to the intrinsic LongInteger object.",
      "descriptionHTML": "roLongInteger is the object name corresponding to the intrinsic LongInteger object.",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roLongInteger",
      "documentationVersion": 4
    },
    "roListScreen": {
      "shortDescription": "The List Screen provides a graphical display of content in a vertical list within a single screen.",
      "interfaceNames": [
        "ifSetMessagePort",
        "ifListScreen",
        "ifHttpAgent",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roListScreenEvent"
      ],
      "name": "roListScreen",
      "description": "Users can browse the content by scrolling the text list vertically.  The vertical list is displayed on the left side of the screen and the poster is displayed on the right side of the screen.  As the user scrolls through the content, the poster is updated with the poster art of the focused list item. There is an optional short description text below the poster that can display the description of the focused item and gets updated as the user scrolls the list.                           The poster art uses the following art sizes:             Artwork sizes: SD\u003d136x124; HD\u003d250x250 roListScreen has a default dark highlight for the focused list item.  The highlight can be customized by including a .png file with the following dimensions:             Highlight sizes: SD\u003d304x38; HD\u003d511x54    ",
      "descriptionHTML": "Users can browse the content by scrolling the text list vertically.\u0026nbsp; The vertical list is displayed on the left side of the screen and the poster is displayed on the right side of the screen.\u0026nbsp; As the user scrolls through the content, the poster is updated with the poster art of the focused list item. There is an optional short description text below the poster that can display the description of the focused item and gets updated as the user scrolls the list.\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;The poster art uses the following art sizes:\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;Artwork sizes: SD\u003d136x124; HD\u003d250x250\u0026nbsp;roListScreen has a default dark highlight for the focused list item.\u0026nbsp; The highlight can be customized by including a .png file with the following dimensions:\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Highlight sizes: SD\u003d304x38; HD\u003d511x54\u003cac:image\u003e\n \u003cri:attachment ri:filename\u003d\"image2012-6-7 10:59:42.png\" /\u003e\n\u003c/ac:image\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roListScreen",
      "documentationVersion": 6
    },
    "roList": {
      "shortDescription": "The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members. The array operator [ ] can be used to access any element in the ordered list.",
      "interfaceNames": [
        "ifList",
        "ifEnum",
        "ifArrayGet",
        "ifArraySet",
        "ifArray"
      ],
      "eventNames": [],
      "name": "roList",
      "description": "The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members. The array operator [ ] can be used to access any element in the ordered list. vbExamplelist \u003d CreateObject(\"roList\") list.AddTail(\"a\") list.AddTail(\"b\") list.AddTail(\"c\") list.AddTail(\"d\") list.ResetIndex() x\u003d list.GetIndex() while x \u003c\u003e invalid print x x \u003d list.GetIndex() end while print list[2] Output: a b c d c ",
      "descriptionHTML": "The list object implements the interfaces: ifList, ifArray, ifEnum and therefore can behave like an array that can dynamically add members. The array operator [ ] can be used to access any element in the ordered list.\u0026nbsp;\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n list \u003d CreateObject(\"roList\") list.AddTail(\"a\") list.AddTail(\"b\") list.AddTail(\"c\") list.AddTail(\"d\") list.ResetIndex() x\u003d list.GetIndex() while x \u0026lt;\u0026gt; invalid print x x \u003d list.GetIndex() end while print list[2]\n\u003c/ac:plain-text-body\u003e\u0026nbsp;\u003cstrong\u003eOutput:\u003c/strong\u003e\u003cbr\u003e a\u003cbr\u003e b\u003cbr\u003e c\u003cbr\u003e d\u003cbr\u003e c\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roList",
      "documentationVersion": 2
    },
    "roCodeRegistrationScreen": {
      "shortDescription": "The Code Registration Screen is designed to present the user a registration code, and the information required to instruct the user on how to register with a service provider. This screen is designed for a rendezvous registration process, where the user is presented a code and the URL for a registration site. The user goes to the site and enters their code, which causes the device and the account to be linked. In the background, the script is polling for completion and the screen is closed to display an activation successful screen when done.",
      "interfaceNames": [
        "ifCodeRegistrationScreen",
        "ifSetMessagePort",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roCodeRegistrationScreenEvent"
      ],
      "name": "roCodeRegistrationScreen",
      "description": "Diagram: roCodeRegistrationScreen vbExampleFunction ShowMessageDialog() As Void port \u003d CreateObject(\"roMessagePort\") screen \u003d CreateObject(\"roCodeRegistrationScreen\") screen.SetMessagePort(port) screen.SetTitle(\"[Registration screen title]\") screen.AddParagraph(\"[Registration screen paragraphs are justified to right and left edges]\") screen.AddFocalText(\" \", \"spacing-dense\") screen.AddFocalText(\"From your computer,\", \"spacing-dense\") screen.AddFocalText(\"go to www.myco.com/roku\", \"spacing-dense\") screen.AddFocalText(\"and enter this code:\", \"spacing-dense\") screen.AddFocalText(\" \", \"spacing-dense\") screen.SetRegistrationCode(\"retrieving code...\") screen.AddParagraph(\"[Registration screen paragraphs are justified to right and left edges and may continue on multiple lines]\") screen.AddButton(0, \"get a new code\") screen.AddButton(1, \"back\") screen.Show() sleep (10000) \u0027simulate fetching registration code from webapi screen.SetRegistrationCode(\"ABC7TG\") screen.Show() while true dlgMsg \u003d wait(0, dialog.GetMessagePort()) exit while end while End Function Image: roCodeRegistrationScreen example results ",
      "descriptionHTML": "\u003cbr class\u003d\"atl-forced-newline\"\u003e \n\u003cac:image ac:height\u003d\"383\" ac:width\u003d\"561\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddavdd611cc69b4f727317c2cfd02108fdec.png\" /\u003e\n\u003c/ac:image\u003eDiagram: roCodeRegistrationScreen\u0026nbsp;\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Function ShowMessageDialog() As Void port \u003d CreateObject(\"roMessagePort\") screen \u003d CreateObject(\"roCodeRegistrationScreen\") screen.SetMessagePort(port) screen.SetTitle(\"[Registration screen title]\") screen.AddParagraph(\"[Registration screen paragraphs are justified to right and left edges]\") screen.AddFocalText(\" \", \"spacing-dense\") screen.AddFocalText(\"From your computer,\", \"spacing-dense\") screen.AddFocalText(\"go to www.myco.com/roku\", \"spacing-dense\") screen.AddFocalText(\"and enter this code:\", \"spacing-dense\") screen.AddFocalText(\" \", \"spacing-dense\") screen.SetRegistrationCode(\"retrieving code...\") screen.AddParagraph(\"[Registration screen paragraphs are justified to right and left edges and may continue on multiple lines]\") screen.AddButton(0, \"get a new code\") screen.AddButton(1, \"back\") screen.Show() sleep (10000) \u0027simulate fetching registration code from webapi screen.SetRegistrationCode(\"ABC7TG\") screen.Show() while true dlgMsg \u003d wait(0, dialog.GetMessagePort()) exit while end while End Function\n\u003c/ac:plain-text-body\u003e\u0026nbsp;Image: roCodeRegistrationScreen example results\u003cbr class\u003d\"atl-forced-newline\"\u003e\n\u003cac:image\u003e\n \u003cri:attachment ri:filename\u003d\"cdregistscrn1.jpg\" /\u003e\n\u003c/ac:image\u003e\u0026nbsp;\u003cac:image\u003e\n \u003cri:attachment ri:filename\u003d\"cdregistscrn2.jpg\" /\u003e\n\u003c/ac:image\u003e\u003cbr class\u003d\"atl-forced-newline\"\u003e\u003cbr\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roCodeRegistrationScreen",
      "documentationVersion": 5
    },
    "roSystemLog": {
      "shortDescription": "The roSystemLog component enables the application to receive events from the Roku Streaming Player that are intended for reporting errors and trends, rather than trigger a response to a user action.",
      "interfaceNames": [
        "ifSystemLog"
      ],
      "eventNames": [],
      "name": "roSystemLog",
      "description": " The roSystemLog component requires specific Design Patterns in your BrightScript Application. Take care to:Use one roMessagePort throughout the application (instead of creating a new roMessagePort for each screen) Create one roSystemLog instance at startup that remains for the entire lifetime of the application. Pass the global roMessagePort referenced in the first bullet point to SetMessagePort() on the roSystemLog component. Enable the desired log types using EnableType() Handle the roSystemLogEvents in all message loops. All of the log event messages are sent to the roMessagePort that is registered on the roSystemLog object.   See for details on the messages.This object is created with no parameters:CreateObject(\"roSystemLog\") vbExample Sub showVideoScreenWithLogging(item As Object) port \u003d CreateObject(\"roMessagePort\") Â  vs \u003d CreateObject(\"roVideoScreen\") Â \u0027 **** Metrics ***** \u0027 Create a SystemLog object for detailed HTTP information and Â \u0027 periodic bandwidth measurements. The high level idea is to use Â \u0027 the roVideoScreen events as the primary driver of the Â \u0027 reporting and then to use the http.error and http.connect Â \u0027 roSystemLogEvents for detailed information. In this case that Â  \u0027 detailed information is primarily the ip addresses. Â syslog \u003d CreateObject(\"roSystemLog\") Â syslog.SetMessagePort(port) Â syslog.EnableType(\"http.error\") Â syslog.EnableType(\"http.connect\") Â syslog.EnableType(\"bandwidth.minute\") Â \u0027 **** End Metrics ***** vs.SetContent(item) vs.SetPostionNotificationPeriod(1) vs.SetMessagePort(port) vs.Show() metrics \u003d CreateObject(\"roAssociativeArray\") metrics.streamStartTimer \u003d CreateObject(\"roTimespan\") metrics.timeSpentBuffering \u003d 0 metrics.errorCount \u003d 0 While True If msg.isPlaybackPosition() Then If metrics.streamStartTimer \u003c\u003e invalid duration \u003d metrics.streamStartTimer.TotalMilliseconds() dateTime \u003d CreateObject(\"roDateTime\").asSeconds()*1000 startTime \u003d dateTime - duration note \u003d \"Rebuferring\" if lastpos \u003d 0 note \u003d\"Initial loading\" print \"Report following prints via urls to your site\" print \"Note is \" ; note print \"Report startTime, buffering, duration, note\" End If Elseif type(msg) \u003d \"roSystemLogEvent\" Then \u0027 Handle the roSystemLogEvents: i \u003d msg.GetInfo() If i.LogType \u003d \"http.error\" or i.LogType \u003d \"http.connect\" If i.LogType \u003d \"http.error\" metrics.errorCount \u003d metrics.errorCount + 1 print \"http error: \"; i.HttpCode; \"URL: \";i.Url End If url \u003d i.OrigUrl If (not httpIpAddrs.DoesExist(url)) Then httpIpAddrs[url] \u003d CreateObject(\"roAssociativeArray\") End If httpIpAddrs[url].AddReplace(i.TargetIp,\"\") Else If i.LogType \u003d \"bandwidth.minute\" metrics.bandwidth \u003d i.Bandwidth End If End If REM more event handling End While End Sub",
      "descriptionHTML": "\u0026nbsp;The roSystemLog component requires specific Design Patterns in your BrightScript Application. Take care to:\u003cli\u003eUse one roMessagePort throughout the application (instead of creating a new roMessagePort for each screen)\u003c/li\u003e\n\u003cli\u003eCreate one roSystemLog instance at startup that remains for the entire lifetime of the application.\u003c/li\u003e\n\u003cli\u003ePass the global roMessagePort referenced in the first bullet point to SetMessagePort() on the roSystemLog component.\u003c/li\u003e\n\u003cli\u003eEnable the desired log types using EnableType()\u003c/li\u003e\n\u003cli\u003eHandle the \n \u003cac:link\u003e\n  \u003cri:page ri:content-title\u003d\"roSystemLogEvent\" /\u003e\n  \u003cac:plain-text-link-body\u003e\n   roSystemLogEvents\n  \u003c/ac:plain-text-link-body\u003e\n \u003c/ac:link\u003e in all message loops.\u003c/li\u003e\u003cbr class\u003d\"atl-forced-newline\"\u003e\u0026nbsp;All of the log event messages are sent to the roMessagePort that is registered on the roSystemLog object.\u0026nbsp;\u0026nbsp; See \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"roSystemLogEvent\" /\u003e\n\u003c/ac:link\u003e for details on the messages.This object is created with no parameters:CreateObject(\"roSystemLog\")\u0026nbsp;\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n  Sub showVideoScreenWithLogging(item As Object) port \u003d CreateObject(\"roMessagePort\") Â\u0026nbsp; vs \u003d CreateObject(\"roVideoScreen\") Â\u0026nbsp;\u0027 **** Metrics ***** \u0027 Create a SystemLog object for detailed HTTP information and Â\u0026nbsp;\u0027 periodic bandwidth measurements. The high level idea is to use Â\u0026nbsp;\u0027 the roVideoScreen events as the primary driver of the Â\u0026nbsp;\u0027 reporting and then to use the http.error and http.connect Â\u0026nbsp;\u0027 roSystemLogEvents for detailed information. In this case that Â\u0026nbsp; \u0027 detailed information is primarily the ip addresses. Â\u0026nbsp;syslog \u003d CreateObject(\"roSystemLog\") Â\u0026nbsp;syslog.SetMessagePort(port) Â\u0026nbsp;syslog.EnableType(\"http.error\") Â\u0026nbsp;syslog.EnableType(\"http.connect\") Â\u0026nbsp;syslog.EnableType(\"bandwidth.minute\") Â\u0026nbsp;\u0027 **** End Metrics ***** vs.SetContent(item) vs.SetPostionNotificationPeriod(1) vs.SetMessagePort(port) vs.Show() metrics \u003d CreateObject(\"roAssociativeArray\") metrics.streamStartTimer \u003d CreateObject(\"roTimespan\") metrics.timeSpentBuffering \u003d 0 metrics.errorCount \u003d 0 While True If msg.isPlaybackPosition() Then If metrics.streamStartTimer \u0026lt;\u0026gt; invalid duration \u003d metrics.streamStartTimer.TotalMilliseconds() dateTime \u003d CreateObject(\"roDateTime\").asSeconds()*1000 startTime \u003d dateTime - duration note \u003d \"Rebuferring\" if lastpos \u003d 0 note \u003d\"Initial loading\" print \"Report following prints via urls to your site\" print \"Note is \" ; note print \"Report startTime, buffering, duration, note\" End If Elseif type(msg) \u003d \"roSystemLogEvent\" Then \u0027 Handle the roSystemLogEvents: i \u003d msg.GetInfo() If i.LogType \u003d \"http.error\" or i.LogType \u003d \"http.connect\" If i.LogType \u003d \"http.error\" metrics.errorCount \u003d metrics.errorCount + 1 print \"http error: \"; i.HttpCode; \"URL: \";i.Url End If url \u003d i.OrigUrl If (not httpIpAddrs.DoesExist(url)) Then httpIpAddrs[url] \u003d CreateObject(\"roAssociativeArray\") End If httpIpAddrs[url].AddReplace(i.TargetIp,\"\") Else If i.LogType \u003d \"bandwidth.minute\" metrics.bandwidth \u003d i.Bandwidth End If End If REM more event handling End While End Sub \n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roSystemLog",
      "documentationVersion": 4
    },
    "roStreamSocket": {
      "shortDescription": "The roStreamSocket component enables Brightscript apps to accept and connect to TCP streams as well as send and receive data with them. The interface is modeled on and works much like standard Berkeley sockets.",
      "interfaceNames": [
        "ifSocketConnectionOption",
        "ifSocket",
        "ifSocketConnectionStatus",
        "ifSocketAsync",
        "ifSocketConnection",
        "ifSocketStatus"
      ],
      "eventNames": [
        "roSocketEvent"
      ],
      "name": "roStreamSocket",
      "description": "This object is created without any arguments:CreateObject(\"roStreamSocket\") vbOpen TCP Connection to ServersendAddress \u003d CreateObject(\"roSocketAddress\") sendAddress.SetAddress(\"www.google.com:80\") socket \u003d CreateObject(\"roStreamSocket\") socket.setSendToAddress(sendAddress) If socket.Connect() Print \"Connected Successfully\" End IfvbEcho Serverfunction main() messagePort \u003d CreateObject(\"roMessagePort\") connections \u003d {} buffer \u003d CreateObject(\"roByteArray\") buffer[512] \u003d 0 tcpListen \u003d CreateObject(\"roStreamSocket\") tcpListen.setMessagePort(messagePort) addr \u003d CreateObject(\"roSocketAddress\") addr.setPort(54321) tcpListen.setAddress(addr) tcpListen.notifyReadable(true) tcpListen.listen(4) if not tcpListen.eOK() print \"Error creating listen socket\" stop end if while True event \u003d wait(0, messagePort) if type(event) \u003d \"roSocketEvent\" changedID \u003d event.getSocketID() if changedID \u003d tcpListen.getID() and tcpListen.isReadable() \u0027 New newConnection \u003d tcpListen.accept() if newConnection \u003d Invalid print \"accept failed\" else print \"accepted new connection \" newConnection.getID() newConnection.notifyReadable(true) newConnection.setMessagePort(messagePort) connections[Stri(newConnection.getID())] \u003d newConnection end if else \u0027 Activity on an open connection connection \u003d connections[Stri(changedID)] closed \u003d False if connection.isReadable() received \u003d connection.receive(buffer, 0, 512) print \"received is \" received if received \u003e 0 print \"Echo input: \u0027\"; buffer.ToAsciiString(); \"\u0027\" \u0027 If we are unable to send, just drop data for now. \u0027 You could use notifywritable and buffer data, but that is \u0027 omitted for clarity. connection.send(buffer, 0, received) else if received\u003d0 \u0027 client closed closed \u003d True end if end if if closed or not connection.eOK() print \"closing connection \" changedID connection.close() connections.delete(Stri(changedID)) end if end if end if end while print \"Main loop exited\" tcpListen.close() for each id in connections connections[id].close() end for End Function   ",
      "descriptionHTML": "This object is created without any arguments:\u003cli\u003eCreateObject(\"roStreamSocket\")\u003c/li\u003e\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cac:structured-macro ac:macro-id\u003d\"013fba28-8614-4c81-8bbf-197c7fbf5a87\" ac:name\u003d\"code\" ac:schema-version\u003d\"1\"\u003e\n \u003cac:parameter ac:name\u003d\"language\"\u003e\n  vb\n \u003c/ac:parameter\u003e\n \u003cac:parameter ac:name\u003d\"title\"\u003e\n  Open TCP Connection to Server\n \u003c/ac:parameter\u003e\n \u003cac:plain-text-body\u003e\n  sendAddress \u003d CreateObject(\"roSocketAddress\") sendAddress.SetAddress(\"www.google.com:80\") socket \u003d CreateObject(\"roStreamSocket\") socket.setSendToAddress(sendAddress) If socket.Connect() Print \"Connected Successfully\" End If\n \u003c/ac:plain-text-body\u003e\n\u003c/ac:structured-macro\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Echo Server\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n function main() messagePort \u003d CreateObject(\"roMessagePort\") connections \u003d {} buffer \u003d CreateObject(\"roByteArray\") buffer[512] \u003d 0 tcpListen \u003d CreateObject(\"roStreamSocket\") tcpListen.setMessagePort(messagePort) addr \u003d CreateObject(\"roSocketAddress\") addr.setPort(54321) tcpListen.setAddress(addr) tcpListen.notifyReadable(true) tcpListen.listen(4) if not tcpListen.eOK() print \"Error creating listen socket\" stop end if while True event \u003d wait(0, messagePort) if type(event) \u003d \"roSocketEvent\" changedID \u003d event.getSocketID() if changedID \u003d tcpListen.getID() and tcpListen.isReadable() \u0027 New newConnection \u003d tcpListen.accept() if newConnection \u003d Invalid print \"accept failed\" else print \"accepted new connection \" newConnection.getID() newConnection.notifyReadable(true) newConnection.setMessagePort(messagePort) connections[Stri(newConnection.getID())] \u003d newConnection end if else \u0027 Activity on an open connection connection \u003d connections[Stri(changedID)] closed \u003d False if connection.isReadable() received \u003d connection.receive(buffer, 0, 512) print \"received is \" received if received \u0026gt; 0 print \"Echo input: \u0027\"; buffer.ToAsciiString(); \"\u0027\" \u0027 If we are unable to send, just drop data for now. \u0027 You could use notifywritable and buffer data, but that is \u0027 omitted for clarity. connection.send(buffer, 0, received) else if received\u003d0 \u0027 client closed closed \u003d True end if end if if closed or not connection.eOK() print \"closing connection \" changedID connection.close() connections.delete(Stri(changedID)) end if end if end if end while print \"Main loop exited\" tcpListen.close() for each id in connections connections[id].close() end for End Function \n\u003c/ac:plain-text-body\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roStreamSocket",
      "documentationVersion": 5
    },
    "roRSA": {
      "shortDescription": "The RSA component provides an interface to the OpenSSL RSA library of signing algorithms.",
      "interfaceNames": [
        "ifRSA"
      ],
      "eventNames": [],
      "name": "roRSA",
      "description": "This component can be used to sign/verify using RSA. Typically, you would use the roEVPDigest component to create a message digest, then use roRSA to sign it. vbExample: RSA signing using SHA1ba \u003d CreateObject(\"roByteArray\") \u0027 ...populate bytearray... digest \u003d CreateObject(\"roEVPDigest\") digest.Setup(\"sha1\") hashString \u003d digest.Process(ba) hashBA \u003d CreateObject(\"roByteArray\") hashBA.FromHexString(hashString) rsa \u003d CreateObject(\"roRSA\") \u0027 ... save private key to tmp:/privateKey.txt rsa.SetPrivateKey(\"tmp:/privateKey.txt\") rsa.SetDigestAlgorithm(\"sha1\") signature \u003d rsa.Sign(hashBA)vbExample: RSA verification using SHA1rsa \u003d CreateObject(\"roRSA\") rsa.SetPublicKey(:tmp:/publicKey.txt\") rsa.SetDigestAlgorithm(\"sha1\") \u0027 see hashBA and signature from above example result \u003d rsa.Verify(hashBA, signature) if (result \u003d 1) print \"Verified\" else print \"Not verified, result \u003d \" ; result end if",
      "descriptionHTML": "This component can be used to sign/verify using RSA.\u0026nbsp;Typically, you would use the roEVPDigest component to create a message digest, then use roRSA to sign it.\u0026nbsp;\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example: RSA signing using SHA1\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n ba \u003d CreateObject(\"roByteArray\") \u0027 ...populate bytearray... digest \u003d CreateObject(\"roEVPDigest\") digest.Setup(\"sha1\") hashString \u003d digest.Process(ba) hashBA \u003d CreateObject(\"roByteArray\") hashBA.FromHexString(hashString) rsa \u003d CreateObject(\"roRSA\") \u0027 ... save private key to tmp:/privateKey.txt rsa.SetPrivateKey(\"tmp:/privateKey.txt\") rsa.SetDigestAlgorithm(\"sha1\") signature \u003d rsa.Sign(hashBA)\n\u003c/ac:plain-text-body\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example: RSA verification using SHA1\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n rsa \u003d CreateObject(\"roRSA\") rsa.SetPublicKey(:tmp:/publicKey.txt\") rsa.SetDigestAlgorithm(\"sha1\") \u0027 see hashBA and signature from above example result \u003d rsa.Verify(hashBA, signature) if (result \u003d 1) print \"Verified\" else print \"Not verified, result \u003d \" ; result end if\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roRSA",
      "documentationVersion": 2
    },
    "roSearchHistory": {
      "shortDescription": "The Search History object implements the system wide storage of search terms for use in implementing the roSearchScreen.",
      "interfaceNames": [
        "ifSearchHistory"
      ],
      "eventNames": [],
      "name": "roSearchHistory",
      "description": "As the user searches for content, recent searches are placed into the search history. This allows the user to easily re-execute these commands later without typing on the keyboard. The initial list of recent searches is displayed on the roSearchScreen to assist the user in finding content to watch. This history is used system wide, so that the user can find references to their search in multiple types of content. This object is created with no parameters:CreateObject(\"roSearchHistory\") Examplehistory \u003d CreateObject(\"roSearchHistory\") list \u003d history.GetAsArray() print \"There are \"; list.Count(); \" items in the history\"",
      "descriptionHTML": "As the user searches for content, recent searches are placed into the search history. This allows the user to easily re-execute these commands later without typing on the keyboard. The initial list of recent searches is displayed on the roSearchScreen to assist the user in finding content to watch. This history is used system wide, so that the user can find references to their search in multiple types of content. \u003cbr class\u003d\"atl-forced-newline\"\u003e This object is created with no parameters:\u003cli\u003eCreateObject(\"roSearchHistory\")\u003c/li\u003e\u0026nbsp;\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n history \u003d CreateObject(\"roSearchHistory\") list \u003d history.GetAsArray() print \"There are \"; list.Count(); \" items in the history\"\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roSearchHistory",
      "documentationVersion": 3
    },
    "roSlideShow": {
      "shortDescription": "The Slide Show screen provides the ability to setup a photo slide show to playback a series of images.",
      "interfaceNames": [
        "ifSlideShow",
        "ifHttpAgent"
      ],
      "eventNames": [
        "roSlideShowEvent"
      ],
      "name": "roSlideShow",
      "description": "Images may be jpg, png or gif files. The developer can control the sequencing and timing of the slideshow. The object is designed to accept an array of objects, describing the images and providing url\u0027s for accessing each image. TextOverlayUL, TextOverlayUR, and TextOverlayBody are content meta-data properties used to display a text overlay.   This object is created with no parameters:CreateObject(\"roSlideShow\")  ",
      "descriptionHTML": "Images may be jpg, png or gif files. The developer can control the sequencing and timing of the slideshow. The object is designed to accept an array of \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"Content Meta-Data\" /\u003e\n\u003c/ac:link\u003e objects, describing the images and providing url\u0027s for accessing each image. TextOverlayUL, TextOverlayUR, and TextOverlayBody\u0026nbsp;are content meta-data properties used to display a text overlay. \u0026nbsp;\u003cbr class\u003d\"atl-forced-newline\"\u003e This object is created with no parameters:\u003cli\u003eCreateObject(\"roSlideShow\")\u003c/li\u003e\u0026nbsp;\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roSlideShow",
      "documentationVersion": 1
    },
    "roSGNode": {
      "shortDescription": "The roSGNode object is the BrightScript equivalent of Scene Graph XML file node creation.",
      "interfaceNames": [
        "ifSGNodeDict",
        "ifSGNodeBoundingRect",
        "ifSGNodeFocus",
        "ifSGNodeHttpAgentAccess",
        "ifSGNodeChildren",
        "ifSGNodeField"
      ],
      "eventNames": [],
      "name": "roSGNode",
      "description": "To create an roSGNode object for a specific node class, call:CreateObject(\"roSGNode\", \"nodetype\")Where nodetype is a string specifying the node class to be created. For example, the following creates an object of the Scene Graph Poster node class:CreateObject(\"roSGNode\", \"Poster\")Reference information on all Scene Graph node classes can be found in this Scene Graph Reference.Prior to creating an roSGScreen object and calling its show() function, creating roSGNode objects and using their interfaces is not guaranteed to work correctly. If you need to create some roSGNode objects and/or use roSGNode interfaces prior to calling an roSGScreen object show() function, you can use an roSGScreen object createScene() function to create an instance of a Scene Graph XML component that does any required setup and initialization prior to the roSGScreen object being displayed.In addition, roSGNode implements the ifAssociativeArray interface as a wrapper for ifSGNodeFIeld so that the convenient node.field notation may be using for setting, getting, and observing fields.  ",
      "descriptionHTML": "To create an \u003cstrong\u003eroSGNode\u003c/strong\u003e object for a specific node class, call:\u003ccode\u003eCreateObject(\"roSGNode\", \"\u003cem\u003enodetype\u003c/em\u003e\") \u003c/code\u003eWhere \u003cem\u003enodetype\u003c/em\u003e is a string specifying the node class to be created. For example, the following creates an object of the Scene Graph \u003cstrong\u003ePoster\u003c/strong\u003e node class:\u003ccode\u003eCreateObject(\"roSGNode\", \"Poster\") \u003c/code\u003eReference information on all Scene Graph node classes can be found in this\u0026nbsp;\u003ca href\u003d\"http://sdkdocs.roku.com/display/sdkdoc/Scene+Graph+Reference\"\u003e\u003cstrong\u003eScene Graph Reference\u003c/strong\u003e\u003c/a\u003e.Prior to creating an \u003cstrong\u003eroSGScreen\u003c/strong\u003e object and calling its \u003ccode\u003eshow()\u003c/code\u003e function, creating \u003cstrong\u003eroSGNode\u003c/strong\u003e objects and using their interfaces is not guaranteed to work correctly. If you need to create some \u003cstrong\u003eroSGNode\u003c/strong\u003e objects and/or use \u003cstrong\u003eroSGNode\u003c/strong\u003e interfaces prior to calling an \u003cstrong\u003eroSGScreen\u003c/strong\u003e object \u003ccode\u003eshow()\u003c/code\u003e function, you can use an \u003cstrong\u003eroSGScreen\u003c/strong\u003e object\u0026nbsp;\u003ccode\u003ecreateScene()\u003c/code\u003e function\u0026nbsp;to create an instance of a Scene Graph XML component that does any required setup and initialization prior to the \u003cstrong\u003eroSGScreen\u003c/strong\u003e object being displayed.In addition, \u003cstrong\u003eroSGNode\u003c/strong\u003e implements the ifAssociativeArray interface as a wrapper for ifSGNodeFIeld so that the convenient \u003cem\u003enode\u003c/em\u003e.\u003cem\u003efield\u003c/em\u003e notation may be using for setting, getting, and observing fields.\u0026nbsp;\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roSGNode",
      "documentationVersion": 18
    },
    "roAudioResource": {
      "shortDescription": "The roAudioResouce allows .wav files to be cached to memory and quickly played at any time.",
      "interfaceNames": [
        "ifAudioResource"
      ],
      "eventNames": [],
      "name": "roAudioResource",
      "description": "roAudioResource is intended to support short audio clips which need to be played with very little latency.  The system caches the entire wav file in memory so that playback can begin very quickly.On Roku \"Classic\" models, roAudioResource does not support mixing of sounds. So when you play a sound effect, any background music is paused while the sound effect plays and then resumes after the sound effect ends.  On later models, sound effects are mixed with background music.  See the Roku Models and Features section of the for a list of Classic models.This object is created with a filename parameter that is a path to the sound resource file:   CreateObject(\"roAudioResource\", filename) The filename must be the name of a local file and cannot be a URL. To use a URL, you may download the file to the application\u0027s \"tmp:\" file system using  and pass a filename of the form \"tmp:/file.wav\" to CreateObject.Examplesound \u003d CreateObject(\"roAudioResource\", \"pkg:/sounds/beep1.wav\") sound.Trigger(75)An object can also be created using the name of a system sound effect:\"select\" - the sound effect to be played when a selection is made, e.g. when OK is pressed. \"navsingle\" - the sound effect to be played when navigating a list or grid, e.g. when left or right is pressed. \"navmulti\" - the sound effect to be played when paging through a list or grid, e.g. when rewind or fast-forward is pressed. \"deadend\" - the sound effect to be played when a button press could not be processed.Note that system sound effects are played at the volume selected in the user\u0027s settings, or not played at all if the user has turned sound effects off, regardless of the volume value passed to Trigger.vbExamplesound \u003d CreateObject(\"roAudioResource\", \"select\") sound.Trigger(50)",
      "descriptionHTML": "roAudioResource is intended to support short audio clips which need to be played with very little latency.\u0026nbsp; The system caches the entire wav file in memory so that playback can begin very quickly.On Roku \"Classic\" models, roAudioResource does not support mixing of sounds. So when you play a sound effect, any background music is paused while the sound effect plays and then resumes after the sound effect ends.\u0026nbsp; On later models, sound effects are mixed with background music.\u0026nbsp; See the \n\u003cac:link ac:anchor\u003d\"RokuModels\"\u003e\n \u003cri:page ri:content-title\u003d\"The Roku Channel Developer Program\" /\u003e\n \u003cac:plain-text-link-body\u003e\n  Roku Models and Features\n \u003c/ac:plain-text-link-body\u003e\n\u003c/ac:link\u003e section of the \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"Developer Guide\" ri:space-key\u003d\"RokuMLDocs\" /\u003e\n\u003c/ac:link\u003e for a list of Classic models.This object is created with a filename parameter that is a path to the sound resource file: \u003cbr\u003e\u0026nbsp; CreateObject(\"roAudioResource\", filename)\u003cbr\u003eThe filename must be the name of a local file and cannot be a URL. To use a URL, you may download the file to the application\u0027s \"tmp:\" file system using\u0026nbsp;\n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"roUrlTransfer\" /\u003e\n\u003c/ac:link\u003e and pass a filename of the form \"\u003ca href\u003d\"http://tmp/assetname\"\u003etmp:/file.wav\u003c/a\u003e\" to CreateObject.\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n sound \u003d CreateObject(\"roAudioResource\", \"pkg:/sounds/beep1.wav\") sound.Trigger(75)\n\u003c/ac:plain-text-body\u003eAn object can also be created using the name of a system sound effect:\u003cli\u003e\"select\" - the sound effect\u0026nbsp;to be played when a selection is made, e.g. when OK is pressed.\u003c/li\u003e\n\u003cli\u003e\"navsingle\" - the sound effect to be played when navigating a list or grid, e.g. when left or right is pressed.\u003c/li\u003e\n\u003cli\u003e\"navmulti\" - the sound effect to be played when paging through a list or grid, e.g. when rewind or fast-forward is pressed.\u003c/li\u003e\n\u003cli\u003e\"deadend\" - the sound effect to be played when a button press could not be processed.\u003c/li\u003eNote that system sound effects are played at the volume selected in the user\u0027s settings, or not played at all if the user has turned sound effects off, regardless of the volume value passed to Trigger.\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n sound \u003d CreateObject(\"roAudioResource\", \"select\") sound.Trigger(50)\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roAudioResource",
      "documentationVersion": 10
    },
    "roFunction": {
      "shortDescription": "Object equivalent for intrinsic type Function.",
      "interfaceNames": [
        "ifFunction",
        "ifToStr"
      ],
      "eventNames": [],
      "name": "roFunction",
      "description": " ",
      "descriptionHTML": "\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roFunction",
      "documentationVersion": 2
    },
    "roRegistrySection": {
      "shortDescription": "A Registry Section enables the organization of settings within the registry.  Different registry sections may have their own keys with the same name.  In other words, key names are scoped within the registry section to which they belong.",
      "interfaceNames": [
        "ifRegistrySection"
      ],
      "eventNames": [],
      "name": "roRegistrySection",
      "description": "This object must be supplied with a \"section\" name on creation.  If no such section exists, it will be created.  Section names are case sensitive, so sections named \"Settings\" and \"settings\" are two different sections.CreateObject(\"roRegistrySection\", section as String)vbExample: get and set some user authentication in the registryFunction GetAuthData() As Dynamic sec \u003d CreateObject(\"roRegistrySection\", \"Authentication\") if sec.Exists(\"UserRegistrationToken\") return sec.Read(\"UserRegistrationToken\") endif return invalid End Function Function SetAuthData(userToken As String) As Void sec \u003d CreateObject(\"roRegistrySection\", \"Authentication\") sec.Write(\"UserRegistrationToken\", userToken) sec.Flush() End Function  ",
      "descriptionHTML": "This object must be supplied with a \"section\" name on creation.\u0026nbsp; If no such section exists, it will be created.\u0026nbsp; Section names are case sensitive, so sections named \"Settings\" and \"settings\" are two different sections.CreateObject(\"roRegistrySection\", section as String)\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example: get and set some user authentication in the registry\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Function GetAuthData() As Dynamic sec \u003d CreateObject(\"roRegistrySection\", \"Authentication\") if sec.Exists(\"UserRegistrationToken\") return sec.Read(\"UserRegistrationToken\") endif return invalid End Function Function SetAuthData(userToken As String) As Void sec \u003d CreateObject(\"roRegistrySection\", \"Authentication\") sec.Write(\"UserRegistrationToken\", userToken) sec.Flush() End Function \n\u003c/ac:plain-text-body\u003e\u0026nbsp;\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roRegistrySection",
      "documentationVersion": 4
    },
    "roSpringboardScreen": {
      "shortDescription": "The Springboard Screen shows detailed information about an individual piece of content and provides options for actions that may be taken on that content.",
      "interfaceNames": [
        "ifSpringboardScreen",
        "ifSetMessagePort",
        "ifHttpAgent",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roSpringboardScreenEvent"
      ],
      "name": "roSpringboardScreen",
      "description": "The detailed description of the content is displayed with poster art for the title. Artwork may be displayed portrait or landscape orientation depending on the ContentType set in the .The caller may add one or more buttons to the screen with actions such as Play, Resume, Purchase or More Info. The script is notified via an event when a button is selected and it is the responsibility of the script writer to handle that event as desired and perform the requested action.Diagram: roSpringboard video screen Diagram: roSpringboard audio screen, ContentType\u003daudioNotes:Orientation for artwork is based on ContentType setting and may be portrait or landscape. The audio springboard is capable of adding a progress bar. If the ContentType is audio, the album art dimensions are:SD: 124 x 112 HD: 188 x 188If the ContentType is episode, the album art dimensions are:SD: 180 x 122 HD: 264 x 198If the ContentType is any other value, the album art dimensions are:SD: 112 x 142 HD: 148 x 212Up to 5 user-defined buttons may be displayed. Buttons are displayed in the order they are added and always appear in a fixed region of the screen The description text will be formatted and justified (right and left edges) to fit between the margins. When the maximum length is reached, the text will be clipped and terminated with an ellipsis. The font is variable pitch, so the maximum number of characters is dependent on the text. The spacing is approximately 85 characters per line x 4 lines \u003d 340 characters. The fonts and character spacing for HD and SD are similar, and display approximately the same number of characters, but the relationship is not exactly 1:1. The star rating can show either community StarRating (red) or UserStarRating (yellow). If both values are set, the control will display the UserStarRating. If ratings are not desired, it can be removed by calling SetStaticRatingEnabled(false), providing more space to display actor names. The Length attribute will display a formatted string or show length. If the value is zero, this field will display 0m, if the attribute is not set/missing then this field will not be displayed.This object is created with no parameters:CreateObject(\"roSpringboardScreen\")The following example shows the process of creating an roSpringboardScreen, setting up the content meta-data, showing the screen and waiting for an event. This example is simplified for clarity and it\u0027s assumed the real-world applications will use techniques like getting data from web services using roUrlTransfer.vbExampleFunction Main() port \u003d CreateObject(\"roMessagePort\") springBoard \u003d CreateObject(\"roSpringboardScreen\") springBoard.SetBreadcrumbText(\"[location 1]\", \"[location2]\") springBoard.SetMessagePort(port) o \u003d CreateObject(\"roAssociativeArray\") o.ContentType \u003d \"episode\" o.Title \u003d \"[Title]\" o.ShortDescriptionLine1 \u003d \"[ShortDescriptionLine1]\" o.ShortDescriptionLine2 \u003d \"[ShortDescriptionLine2]\" o.Description \u003d \"\" For i \u003d 1 To 15 o.Description \u003d o.Description + \"[Description] \" End For o.SDPosterUrl \u003d \"\" o.HDPosterUrl \u003d \"\" o.Rating \u003d \"NR\" o.StarRating \u003d \"75\" o.ReleaseDate \u003d \"[mm/dd/yyyy]\" o.Length \u003d 5400 o.Categories \u003d CreateObject(\"roArray\", 10, true) o.Categories.Push(\"[Category1]\") o.Categories.Push(\"[Category2]\") o.Categories.Push(\"[Category3]\") o.Actors \u003d CreateObject(\"roArray\", 10, true) o.Actors.Push(\"[Actor1]\") o.Actors.Push(\"[Actor2]\") o.Actors.Push(\"[Actor3]\") o.Director \u003d \"[Director]\" springBoard.SetContent(o) springBoard.Show() While True msg \u003d wait(0, port) If msg.isScreenClosed() Then Return -1 Elseif msg.isButtonPressed() print \"msg: \"; msg.GetMessage(); \"idx: \"; msg.GetIndex() Endif End While End FunctionImage: roSpringboardScreen example resultsThe following screen is displayed when this code is executed:",
      "descriptionHTML": "The detailed description of the content is displayed with poster art for the title. Artwork may be displayed portrait or landscape orientation depending on the ContentType set in the \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"Content Meta-Data\" /\u003e\n\u003c/ac:link\u003e.The caller may add one or more buttons to the screen with actions such as Play, Resume, Purchase or More Info. The script is notified via an event when a button is selected and it is the responsibility of the script writer to handle that event as desired and perform the requested action.\u003cbr class\u003d\"atl-forced-newline\"\u003e \n\u003cac:image ac:height\u003d\"377\" ac:width\u003d\"561\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddav3570180012b8208f098d035b989f8fa8.png\" /\u003e\n\u003c/ac:image\u003eDiagram: roSpringboard video screen\u003cbr class\u003d\"atl-forced-newline\"\u003e\u003cspan style\u003d\"color: rgb(127,127,127);\"\u003e\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"color: rgb(127,127,127);\"\u003e\u003cstrong\u003e\n  \u003cac:image ac:width\u003d\"561\"\u003e\n   \u003cri:attachment ri:filename\u003d\"springboard-audio.png\" /\u003e\n  \u003c/ac:image\u003e\u003c/strong\u003e\u003c/span\u003e\u003cspan style\u003d\"color: rgb(127,127,127);\"\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003c/span\u003eDiagram: roSpringboard audio screen, ContentType\u003daudio\u003cbr class\u003d\"atl-forced-newline\"\u003e \u003cbr class\u003d\"atl-forced-newline\"\u003e Notes:\u003cli\u003eOrientation for artwork is based on ContentType setting and may be portrait or landscape.\u003c/li\u003e\n\u003cli\u003eThe audio springboard is capable of adding a progress bar.\u003c/li\u003e\n\u003cli\u003eIf the ContentType is audio, the album art dimensions are:\u003c/li\u003eSD: 124 x 112\u003cbr\u003e HD: 188 x 188\u003cli\u003eIf the ContentType is episode, the album art dimensions are:\u003c/li\u003eSD: 180 x 122\u003cbr\u003e HD: 264 x 198\u003cli\u003eIf the ContentType is any other value, the album art dimensions are:\u003c/li\u003eSD: 112 x 142\u003cbr\u003e HD: 148 x 212\u003cli\u003eUp to 5 user-defined buttons may be displayed. Buttons are displayed in the order they are added and always appear in a fixed region of the screen\u003c/li\u003e\n\u003cli\u003eThe description text will be formatted and justified (right and left edges) to fit between the margins. When the maximum length is reached, the text will be clipped and terminated with an ellipsis. The font is variable pitch, so the maximum number of characters is dependent on the text. The spacing is approximately 85 characters per line x 4 lines \u003d 340 characters. The fonts and character spacing for HD and SD are similar, and display approximately the same number of characters, but the relationship is not exactly 1:1.\u003c/li\u003e\n\u003cli\u003eThe star rating can show either community StarRating (red) or UserStarRating (yellow). If both values are set, the control will display the UserStarRating. If ratings are not desired, it can be removed by calling SetStaticRatingEnabled(false), providing more space to display actor names.\u003c/li\u003e\n\u003cli\u003eThe Length attribute will display a formatted string or show length. If the value is zero, this field will display 0m, if the attribute is not set/missing then this field will not be displayed.\u003c/li\u003e\u003cbr class\u003d\"atl-forced-newline\"\u003e This object is created with no parameters:\u003cli\u003eCreateObject(\"roSpringboardScreen\")\u003c/li\u003eThe following example shows the process of creating an roSpringboardScreen, setting up the content meta-data, showing the screen and waiting for an event. This example is simplified for clarity and it\u0027s assumed the real-world applications will use techniques like getting data from web services using roUrlTransfer.\u003cbr class\u003d\"atl-forced-newline\"\u003e\u003cbr\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Function Main() port \u003d CreateObject(\"roMessagePort\") springBoard \u003d CreateObject(\"roSpringboardScreen\") springBoard.SetBreadcrumbText(\"[location 1]\", \"[location2]\") springBoard.SetMessagePort(port) o \u003d CreateObject(\"roAssociativeArray\") o.ContentType \u003d \"episode\" o.Title \u003d \"[Title]\" o.ShortDescriptionLine1 \u003d \"[ShortDescriptionLine1]\" o.ShortDescriptionLine2 \u003d \"[ShortDescriptionLine2]\" o.Description \u003d \"\" For i \u003d 1 To 15 o.Description \u003d o.Description + \"[Description] \" End For o.SDPosterUrl \u003d \"\" o.HDPosterUrl \u003d \"\" o.Rating \u003d \"NR\" o.StarRating \u003d \"75\" o.ReleaseDate \u003d \"[mm/dd/yyyy]\" o.Length \u003d 5400 o.Categories \u003d CreateObject(\"roArray\", 10, true) o.Categories.Push(\"[Category1]\") o.Categories.Push(\"[Category2]\") o.Categories.Push(\"[Category3]\") o.Actors \u003d CreateObject(\"roArray\", 10, true) o.Actors.Push(\"[Actor1]\") o.Actors.Push(\"[Actor2]\") o.Actors.Push(\"[Actor3]\") o.Director \u003d \"[Director]\" springBoard.SetContent(o) springBoard.Show() While True msg \u003d wait(0, port) If msg.isScreenClosed() Then Return -1 Elseif msg.isButtonPressed() print \"msg: \"; msg.GetMessage(); \"idx: \"; msg.GetIndex() Endif End While End Function\n\u003c/ac:plain-text-body\u003eImage: roSpringboardScreen example results\u003cbr class\u003d\"atl-forced-newline\"\u003e The following screen is displayed when this code is executed: \u003cbr class\u003d\"atl-forced-newline\"\u003e \n\u003cac:image ac:height\u003d\"384\" ac:width\u003d\"576\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddav256ada1e0e0cdc53d79428655ca7702b.png\" /\u003e\n\u003c/ac:image\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roSpringboardScreen",
      "documentationVersion": 2
    },
    "roProgramGuide": {
      "shortDescription": "Represents Electronic Program Guide (EPG) information from the Roku TV tuner.",
      "interfaceNames": [
        "ifProgramGuide"
      ],
      "eventNames": [],
      "name": "roProgramGuide",
      "description": "A Roku TV incorporates a tuner giving access to broadcast TV and radio received over an antenna or cable. In addition to the video and audio data from the tuner, the Roku TV receives electronic program guide (EPG) data about the currently-broadcasting program, and the next few programs to be broadcast. The roProgramGuide object provides access to that guide data.This object can be created with no parameterscreateObject(\"roProgramGuide\")It can also be obtained by calling GetGuide() on an instance of roTuner.See for an example of accessing program guide data. ",
      "descriptionHTML": "A Roku TV incorporates a tuner giving access to broadcast TV and radio received over an antenna or cable. In addition to the video and audio data from the tuner, the Roku TV receives electronic program guide (EPG) data about the currently-broadcasting program, and the next few programs to be broadcast. The roProgramGuide object provides access to that guide data.This object can be created with no parameters\u003ccode\u003ecreateObject(\"roProgramGuide\")\u003c/code\u003eIt can also be obtained by calling GetGuide() on an instance of roTuner.See \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"roTuner\" /\u003e\n\u003c/ac:link\u003e for an example of accessing program guide data.\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roProgramGuide",
      "documentationVersion": 4
    },
    "roPath": {
      "shortDescription": "The roPath component provides developers an easy way to create valid file system paths.",
      "interfaceNames": [
        "ifPath",
        "ifString"
      ],
      "eventNames": [],
      "name": "roPath",
      "description": "The roPath component is a convenience class that implements  while providing additional validation and path inspection functionality. See  for more information about valid path names.This object is created with a string that represents the initial path:CreateObject(\"roPath\", \"ext1:/vid\")Examplepath \u003d CreateObject(\"roPath\", filename) parts \u003d path.Split() if parts.phy \u003d \"tmp:\" then print \"this is a temp file\" if parts.extension \u003d \".bmp\" then print \"this is a bitmap file\" ",
      "descriptionHTML": "The roPath component is a convenience class that implements\u0026nbsp;\n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"ifString\" /\u003e\n\u003c/ac:link\u003e while providing additional validation and path inspection functionality. See\u0026nbsp;\n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"File System\" /\u003e\n\u003c/ac:link\u003e for more information about valid path names.This object is created with a string that represents the initial path:\u003cli\u003eCreateObject(\"roPath\", \"ext1:/vid\")\u003c/li\u003e\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n path \u003d CreateObject(\"roPath\", filename) parts \u003d path.Split() if parts.phy \u003d \"tmp:\" then print \"this is a temp file\" if parts.extension \u003d \".bmp\" then print \"this is a bitmap file\"\n\u003c/ac:plain-text-body\u003e\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roPath",
      "documentationVersion": 4
    },
    "roVideoScreen": {
      "shortDescription": "The Video Screen object implements the video playback portion of the user interface.",
      "interfaceNames": [
        "ifVideoScreen",
        "ifSetMessagePort",
        "ifHttpAgent",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roVideoScreenEvent"
      ],
      "name": "roVideoScreen",
      "description": "The API\u0027s to the video screen allow the developer to setup a fully featured playback environment with minimal coding. The developer is responsible for initial playback setup and providing the required data (e.g. StreamURLs, SteamsBitrates, etc.) as part of the . Once created and displayed, the screen will respond to events and manage the playback experience for the user.The roVideoScreen is designed for streaming content. The preferred implementation should provide multiple bitrates (ideally four) of video to provide a high quality user experience under a variety of network conditions. Using the StreamBitrates and StreamURLs provided in the content meta-data for the item, the roVideoScreen will automatically monitor and select the best stream based on the users measured bandwidth. If network performance changes, the system will adapt and rebuffer to stream at a different bandwidth if necessary. Note that the StreamURLs, StreamBitrates, StreamQualities and StreamStickyHttpRedirects are all arrays that are aligned with each other. For example, the first stream listed would be the 0th element of all of these arrays.The bitrates should represent the actual bitrate of the stream. The bitrate is used for both the display of the dots as well as the stream selection algorithm. The dots work a follows: If the stream bitrate equals:     0 \u003d no dots \u003c 500 Kbps\u003d 1 dot \u003c 800 Kbps \u003d 2 dots \u003c1.1 Mbps \u003d 3 dots \u003e\u003d 1.1 Mbps \u003d 4 dotsThe dots are displayed automatically based on the bitrate of the stream selected unless there is a single stream and the bitrate is set to zero, then it won\u0027t show any dots. The StreamQuality attribute is used to select streams and indicates if a stream is HD or not. If the attribute for HDBranded is set to true and the stream is HD, the HD icon will show beside the quality dots. If the StreamQuality is set to HD, and the user display type is set to SD, the HD stream will not be selected.The roVideoScreen automatically provides trick mode for all supported content types. There are two type of trick modes supported; scene based selection and time-based selection. If BIF image files are provided for a title, scene-based trick modes will appear. (See the BIF File format Documentation for more information) The user will be presented with the images and progress bar needed for SEEK, FF, REW within a stream. The following image shows how trick modes are rendered with BIF files:The FF/REW functionality provides three speeds; slow, medium and fast. At slower speeds, the system displays the current frame in the center of the screen and additional frames on the side for contextual information. At higher speeds, the side frames disappear and only the center image is displayed. The I-frames within the video do not need to precisely align with the time stamp of the image frames in the BIF file. When the user stops and selects a frame, the video playback begins at the first I-frame less than or equal to the time position of the selected frame.When BIF images are not available, the system will default to a time based trick play behavior. The user control is still the same, but only the progress bar is displayed and the user will not see individual scenes within the video. This mode is the default, so if images are not available for an individual title, the system will always provide this functionality by default.The system will only seek to locations on an I-Frame boundary. Window Media (WMA9 or VC-1) uses the simple index object to determine the I-frame locations and H.264 uses the MOOV atom to determine the correct offsets. If the BIF images are at a consistent time intervals which do not align to I-Frame boundaries, the system will use the nearest I-Frame less than or equal to the time of the BIF image. MP4 or Windows Media are the preferred formats.Important Notes on Video PlaybackThe dimensions vary on a title-by-title basis depending on the source material and the target aspect ratio for the encode (e.g. 4:3 or 16:9).  Content is always encoded at full width and the height is adjusted.  For example, a 1.66 aspect ratio source is encoded as a 720x432 video and displayed as letterboxed for a 4:3 display. The frame rate used for encoding is dependent on the source material. Film content is generally 23.976 fps, while video content is generally at 29.97. For typical streaming video applications, we recommend a range of ~384Kbps to ~4.5Mbps. For USB playback, we recommend that you stay under 8.0 Mbps. This provides a good balance between quality and support for a wide number of users. In some cases lower and higher bitrates have been used, but this frequently results in poor quality or limits the % of the installed base that can view this encoding It is critical that the StreamURLs, StreamBitrates, StreamQualities and StreamStickyHttpRedirects arrays are all aligned with each other. For example, the first stream listed would be the 0th element of all of these arrays. You may have multiple streams in the arrays and the system will automatically pick the most appropriate stream based on the users available bandwidth and video settings. The StreamQualities array identifies streams as either SD or HD. If the user is configured for SD the system will not select HD streams for playback. The optional StreamStartTimeOffset is the offset into the stream which is considered to be the new origin of playback. Live  declares the video as live and replaces the time remaining text in the progress bar with \"live\". HLS Http Live Streaming support is included in the firmware (Introduced in firmware v2.6). We currently support version 3 of the Http Live Streaming protocol (Pantos  Draft submitted to IETF November 19, 2010 http://tools.ietf.org/html/draft-pantos-http-live-streaming-05 ). When using HLS, the StreamUrls and StreamQualities array should each have exactly one element.  If the HLS stream has only a single bitrate stream, the StreamBitrates array should contain one element specifying that bitrate.  If the stream contains more than one variant stream at multiple bitrates, the StreamBitrates array should contain one element with a value of zero. Please see the Video Encoding Guide for information about creating HLS .m3u8 files and segmented .ts files from your current h264 encoded video or distributing live video over HLS to the Roku box. In addition to the support for version 2 of the HLS Pantos draft spec, the Roku box supports .m3u8 files that are compressed via deflate or gzip.            The HTTP response for a query that returns a gzip-compressed file must contain the header:          Content-Encoding: gzip           The HTTP response for a query that returns a deflate-compressed file must contain the header:       Content-Encoding: deflate \"Trick Modes\" and seeking work a little differently with HLS streams. There are a couple of ways that seeking works with HLS and they are different than other streams.          One way of seeking uses the \"target duration\" specified in the .m3u8 file. The first segment in an m3u8 file is assigned a time offset:          T \u003d G * N          where G is the \"target duration\" value and N is the sequence number of the segment. Each subsequent segment is assigned a time offset equal to T (the time     offset of the first segment) plus the duration value of all earlier segments. The duration of a segment is determined by the EXTINF line before that segment.  Smooth Streaming (since v4.7) and later by setting the StreamFormat to \"ism\" and setting the streamURL to the MANIFEST url. The player type (ContentMetaData.StreamFormat) is \"ism\" The stream URL is the URL that points to the manifest Only H.264 and/or AAC encoding formats are currently supported. Only direct PlayReady licensing is supported. Indirect licensing is currently unsupported. That is, for decryption to work, the ProtectionHeader must be available in the manifest and the LA_URL should contain a valid URL to an accessible PlayReady license server. If there are multiple audio tracks, a track will be chosen based on the StreamIndex.Language attribute in the manifest. If the StreamIndex.Language attribute is not populated, the audio track will be chosen arbitrarily. To select a specific audio track before playback, set the ContentMetaData.TrackIDAudio field to the desired track\u0027s StreamIndex.Name attribute. If there are multiple video tracks, a track will be chosen arbitrarily. To select a specific video track before playback, set the ContentMetaData.TrackIDVideo field to the desired track\u0027s StreamIndex.Name attribute. Standard PlayReady SDK 2.0 Direct License Acquisition Over-the-Air (since v4.8) works by reading the Rights Management Protection Header in the Smooth Streaming Manifest Url.  The Roku firmware retrieves the license from the PlayReady license server at the license acquisition url endpoint in the Protection Header.#EXT-X_TARGETDURATION:10 #EXT-X-MEDIA-SEQUENCE:37 #EXTINF:10 url1 #EXTINF:8 url2 #EXTINF:10 url3The segment url1 has a time offset of 370, url2 is 380, and url3 is 388. Note that if no TARGETDURATION is specified, the default is 1, so the first segment in the file will have a nonzero time offset (equal to the target duration). The PlayStart content-meta data value allows direct seeking to an offset that is valid within the window of data in the current .m3u8 file.There is a second way to seek in an HLS stream. If the m3u8 file has #EXT-X-PROGRAM-DATE-TIME entries, you can seek to a particular date/time by passing a value equal to a modified Unix epoch value. The modified epoch is 1/1/2004 rather than the standard Unix epoch of 1/1/1970. A Unix time value can be converted to an HLS seek time by subtracting 1072915200 (the number of seconds between 1/1/1970 and 1/1/2004). Once again, setting the PlayStart content meta data value allows direct seeking to a specific time offset.For example, to seek to the segment marked with the date/time of 7/4/2010 11:30, set PlayStart to 205327800. An example shell expression showing this arithmetic is: % expr `date -d \"7/4/2010Z11:30:00.000\" +%s` - 1072915200 205327800In BrightScript, the same calculation might be:vbdt \u003d CreateObject(\"roDateTime\") dt.fromISO8601String(\"7/4/2010T11:30:00.000\") itemContentMetaData.PlayStart \u003d dt. asSeconds() - 1072915200 \u0027205327800In firmware version 2.6, we\u0027ve introduced support for SRT files. Please see the content meta-data parameter SubtitleUrl for pointing to a matching SRT file for your video content. In firmware version 2.7, we\u0027ve introduced 1080p support. Please see the content meta-data parameter FullHD for specifying 1080p resolution. Playback at 1080p resolution will only occur when the user has set the display type to HDTV 1080p. Another content meta-data parameter, FrameRate, specifies the frames per second of the video. Valid values are 24 and 30. If the user\u0027s display type is set to 1080p and FullHD for the content is false or not set, HD playback will be at 720p resolution. If the user\u0027s display type is set to HDTV 720p and FullHD content is set to 1080p resolution, the box will downscale the content to 720p resolution.This object is created with no parameters:CreateObject(\"roVideoScreen\")vbExampleÂ  \u0027********************************************************************** \u0027 This example function is passed an associative array representing a \u0027 piece of content (e.g. a TV episode) There are other attributes \u0027 (title, description, etc.) but this example focuses on showing \u0027 attributes required for initiating playback. It creates a video \u0027 screen, sets the content and starts playback by calling Show() \u0027********************************************************************** Function showVideoScreen(episode As Object) if type(episode) \u003c\u003e \"roAssociativeArray\" then print \"invalid data passed to showVideoScreen\" return -1 endif port \u003d CreateObject(\"roMessagePort\") screen \u003d CreateObject(\"roVideoScreen\") \u0027 Note: HDBranded controls whether the \"HD\" logo is displayed for a \u0027 title. This is separate from IsHD because its possible to \u0027 have an HD title where you don\u0027t want to show the HD logo \u0027 branding for the title. Set these two as appropriate for \u0027 your content episode.HDBranded \u003d false episode.IsHD \u003d false \u0027 Note: The preferred way to specify stream info in v2.6 is to use \u0027 the Stream roAssociativeArray content meta data parameter. episode.Stream \u003d { url:\"http://myserver.mydomain.com/mycontent.mp4\", bitrate:2000 quality:false contentid:\"mycontent-2000\" } episode.StreamFormat: \"mp4\" \u0027 now just tell the screen about the title to be played, set the \u0027 message port for where you will receive events and call show to \u0027 begin playback. You should see a buffering screen and then \u0027 playback will start immediately when we have enough data buffered. screen.SetContent(episode) screen.SetMessagePort(port) screen.Show() \u0027 Wait in a loop on the message port for events to be received. \u0027 We will just quit the loop and return to the calling function \u0027 when the users terminates playback, but there are other things \u0027 you could do here like monitor playback position and see events \u0027 from the streaming player. Look for status messages from the video \u0027 player for status and failure events that occur during playback while true msg \u003d wait(0, port) if type(msg) \u003d \"roVideoScreenEvent\" then print \"showVideoScreen | msg \u003d \"; msg.GetMessage() \" | index \u003d \"; msg.GetIndex() if msg.isScreenClosed() print \"Screen closed\" exit while else if msg.isStatusMessage() print \"status message: \"; msg.GetMessage() else if msg.isPlaybackPosition() print \"playback position: \"; msg.GetIndex() else if msg.isFullResult() print \"playback completed\" exit while else if msg.isPartialResult() print \"playback interrupted\" exit while else if msg.isRequestFailed() print \"request failed - error: \"; msg.GetIndex();\" - \"; msg.GetMessage() exit while end if end if end while End Function",
      "descriptionHTML": "The API\u0027s to the video screen allow the developer to setup a fully featured playback environment with minimal coding. The developer is responsible for initial playback setup and providing the required data (e.g. StreamURLs, SteamsBitrates, etc.) as part of the \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"Content Meta-Data\" /\u003e\n\u003c/ac:link\u003e. Once created and displayed, the screen will respond to events and manage the playback experience for the user.The roVideoScreen is designed for streaming content. The preferred implementation should provide multiple bitrates (ideally four) of video to provide a high quality user experience under a variety of network conditions. Using the StreamBitrates and StreamURLs provided in the content meta-data for the item, the roVideoScreen will automatically monitor and select the best stream based on the users measured bandwidth. If network performance changes, the system will adapt and rebuffer to stream at a different bandwidth if necessary. Note that the StreamURLs, StreamBitrates, StreamQualities and StreamStickyHttpRedirects are all arrays that are aligned with each other. For example, the first stream listed would be the 0\u003csup\u003eth\u003c/sup\u003e element of all of these arrays.The bitrates should represent the actual bitrate of the stream. The bitrate is used for both the display of the dots as well as the stream selection algorithm. \u003cbr class\u003d\"atl-forced-newline\"\u003e The dots work a follows:\u0026nbsp;If the stream bitrate equals:\u003cli\u003e\u0026nbsp; \u0026nbsp; \u0026nbsp;0 \u003d no dots\u003c/li\u003e\n\u003cli\u003e\u0026lt; 500 Kbps\u003d 1 dot\u003c/li\u003e\n\u003cli\u003e\u0026lt; 800 Kbps \u003d 2 dots\u003c/li\u003e\n\u003cli\u003e\u0026lt;1.1 Mbps \u003d 3 dots\u003c/li\u003e\n\u003cli\u003e\u0026gt;\u003d 1.1 Mbps \u003d 4 dots\u003c/li\u003eThe dots are displayed automatically based on the bitrate of the stream selected unless there is a single stream and the bitrate is set to zero, then it won\u0027t show any dots. The StreamQuality attribute is used to select streams and indicates if a stream is HD or not. If the attribute for HDBranded is set to true and the stream is HD, the HD icon will show beside the quality dots. If the StreamQuality is set to HD, and the user display type is set to SD, the HD stream will not be selected.The roVideoScreen automatically provides trick mode for all supported content types. There are two type of trick modes supported; scene based selection and time-based selection. If BIF image files are provided for a title, scene-based trick modes will appear. (See the BIF File format Documentation for more information) The user will be presented with the images and progress bar needed for SEEK, FF, REW within a stream. The following image shows how trick modes are rendered with BIF files: \u003cbr class\u003d\"atl-forced-newline\"\u003e \n\u003cac:image ac:height\u003d\"364\" ac:width\u003d\"547\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddavdc8a50b63d70082736fbebee19c18eff.png\" /\u003e\n\u003c/ac:image\u003eThe FF/REW functionality provides three speeds; slow, medium and fast. At slower speeds, the system displays the current frame in the center of the screen and additional frames on the side for contextual information. At higher speeds, the side frames disappear and only the center image is displayed. The I-frames within the video do not need to precisely align with the time stamp of the image frames in the BIF file. When the user stops and selects a frame, the video playback begins at the first I-frame less than or equal to the time position of the selected frame.When BIF images are not available, the system will default to a time based trick play behavior. The user control is still the same, but only the progress bar is displayed and the user will not see individual scenes within the video. This mode is the default, so if images are not available for an individual title, the system will always provide this functionality by default.The system will only seek to locations on an I-Frame boundary. Window Media (WMA9 or VC-1) uses the simple index object to determine the I-frame locations and H.264 uses the MOOV atom to determine the correct offsets. If the BIF images are at a consistent time intervals which do not align to I-Frame boundaries, the system will use the nearest I-Frame less than or equal to the time of the BIF image. MP4 or Windows Media are the preferred formats.Important Notes on Video Playback\u003cli\u003eThe dimensions vary on a title-by-title basis depending on the source material and the target aspect ratio for the encode (e.g. 4:3 or 16:9).\u0026nbsp; Content is always encoded at full width and the height is adjusted.\u0026nbsp; For example, a 1.66 aspect ratio source is encoded as a 720x432 video and displayed as letterboxed for a 4:3 display.\u003c/li\u003e\n\u003cli\u003eThe frame rate used for encoding is dependent on the source material. Film content is generally 23.976 fps, while video content is generally at 29.97.\u003c/li\u003e\n\u003cli\u003eFor typical streaming video applications, we recommend a range of ~384Kbps to ~4.5Mbps. For USB playback, we recommend that you stay under 8.0 Mbps. This provides a good balance between quality and support for a wide number of users. In some cases lower and higher bitrates have been used, but this frequently results in poor quality or limits the % of the installed base that can view this encoding\u003c/li\u003e\n\u003cli\u003eIt is critical that the StreamURLs, StreamBitrates, StreamQualities and StreamStickyHttpRedirects arrays are all aligned with each other. For example, the first stream listed would be the 0\u003csup\u003eth\u003c/sup\u003e element of all of these arrays. You may have multiple streams in the arrays and the system will automatically pick the most appropriate stream based on the users available bandwidth and video settings.\u003c/li\u003e\n\u003cli\u003eThe StreamQualities array identifies streams as either SD or HD. If the user is configured for SD the system will not select HD streams for playback.\u003c/li\u003e\n\u003cli\u003eThe optional StreamStartTimeOffset is the offset into the stream which is considered to be the new origin of playback.\u003c/li\u003e\n\u003cli\u003eLive  declares the video as live and replaces the time remaining text in the progress bar with \"live\".\u003c/li\u003e\n\u003cli\u003eHLS Http Live Streaming support is included in the firmware (Introduced in firmware v2.6). We currently support version 3 of the Http Live Streaming protocol (Pantos  Draft submitted to IETF November 19, 2010 \u003ca href\u003d\"http://tools.ietf.org/html/draft-pantos-http-live-streaming-05\"\u003ehttp://tools.ietf.org/html/draft-pantos-http-live-streaming-05\u003c/a\u003e ). When using HLS, the StreamUrls and StreamQualities array should each have exactly one element.\u0026nbsp; If the HLS stream has only a single bitrate stream, the StreamBitrates array should contain one element specifying that bitrate.\u0026nbsp; If the stream contains more than one variant stream at multiple bitrates, the StreamBitrates array should contain one element with a value of zero. Please see the Video Encoding Guide for information about creating HLS .m3u8 files and segmented .ts files from your current h264 encoded video or distributing live video over HLS to the Roku box.\u003c/li\u003e\n\u003cli\u003eIn addition to the support for version 2 of the HLS Pantos draft spec, the Roku box supports .m3u8 files that are compressed via deflate or gzip.\u0026nbsp;\u003cbr\u003e\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; The HTTP response for a query that returns a gzip-compressed file must contain the header:\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; Content-Encoding: gzip\u003cbr\u003e\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u0026nbsp;The HTTP response for a query that returns a deflate-compressed file must contain the header:\u0026nbsp;\u0026nbsp; \u0026nbsp; \u0026nbsp; Content-Encoding: deflate\u003c/li\u003e\n\u003cli\u003e\"Trick Modes\" and seeking work a little differently with HLS streams. There are a couple of ways that seeking works with HLS and they are different than other streams.\u003cbr\u003e\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;One way of seeking uses the \"target duration\" specified in the .m3u8 file. The first segment in an m3u8 file is assigned a time offset:\u003cbr\u003e\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;T \u003d G * N\u003cbr\u003e\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;where G is the \"target duration\" value and N is the sequence number of the segment. Each subsequent segment is assigned a time offset equal to T (the time \u0026nbsp; \u0026nbsp;\u003cbr\u003eoffset of the first segment) plus the duration value of all earlier segments. The duration of a segment is determined by the EXTINF line before that segment.\u0026nbsp;\u003c/li\u003e\n\u003cli\u003eSmooth Streaming (\u003cstrong\u003esince v4.7\u003c/strong\u003e) and later by setting the StreamFormat to \"ism\" and setting the streamURL to the MANIFEST url.\u003cbr\u003e\n \u003cul\u003e\n  \u003cli\u003eThe player type (\u003cem\u003eContentMetaData.StreamFormat\u003c/em\u003e) is \"ism\"\u003c/li\u003e\n  \u003cli\u003eThe stream URL is the URL that points to the manifest\u003c/li\u003e\n  \u003cli\u003eOnly H.264 and/or AAC encoding formats are currently supported.\u003c/li\u003e\n  \u003cli\u003eOnly direct PlayReady licensing is supported. Indirect licensing is currently unsupported. That is, for decryption to work, the \u003cem\u003eProtectionHeader\u003c/em\u003e must be available in the manifest and the LA_URL should contain a valid URL to an accessible PlayReady license server.\u003c/li\u003e\n  \u003cli\u003eIf there are multiple audio tracks, a track will be chosen based on the \u003cem\u003eStreamIndex.Language\u003c/em\u003e attribute in the manifest. If the \u003cem\u003eStreamIndex.Language\u003c/em\u003e\u0026nbsp;attribute is not populated, the audio track will be chosen arbitrarily. To select a specific audio track before playback, set the ContentMetaData.TrackIDAudio field to the desired track\u0027s \u003cem\u003eStreamIndex.Name\u003c/em\u003e\u0026nbsp;attribute.\u003c/li\u003e\n  \u003cli\u003eIf there are multiple video tracks, a track will be chosen arbitrarily. To select a specific video track before playback, set the ContentMetaData.TrackIDVideo field to the desired track\u0027s\u0026nbsp;\u003cem\u003eStreamIndex.Name\u003c/em\u003e\u0026nbsp;attribute.\u003c/li\u003e\n \u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eStandard PlayReady SDK 2.0\u0026nbsp;Direct License Acquisition Over-the-Air\u0026nbsp;(\u003cstrong\u003esince v4.8\u003c/strong\u003e) works by reading the Rights Management Protection Header in the Smooth Streaming Manifest Url. \u0026nbsp;The Roku firmware retrieves the license from the PlayReady license server at the license acquisition url endpoint in the Protection Header.\u003c/li\u003e\u003cac:plain-text-body\u003e\n #EXT-X_TARGETDURATION:10 #EXT-X-MEDIA-SEQUENCE:37 #EXTINF:10 url1 #EXTINF:8 url2 #EXTINF:10 url3\n\u003c/ac:plain-text-body\u003eThe segment url1 has a time offset of 370, url2 is 380, and url3 is 388. Note that if no TARGETDURATION is specified, the default is 1, so the first segment in the file will have a nonzero time offset (equal to the target duration). The PlayStart content-meta data value allows direct seeking to an offset that is valid within the window of data in the current .m3u8 file.There is a second way to seek in an HLS stream. If the m3u8 file has #EXT-X-PROGRAM-DATE-TIME entries, you can seek to a particular date/time by passing a value equal to a modified Unix epoch value. The modified epoch is 1/1/2004 rather than the standard Unix epoch of 1/1/1970. A Unix time value can be converted to an HLS seek time by subtracting 1072915200 (the number of seconds between 1/1/1970 and 1/1/2004). Once again, setting the PlayStart content meta data value allows direct seeking to a specific time offset.For example, to seek to the segment marked with the date/time of 7/4/2010 11:30, set PlayStart to 205327800. An example shell expression showing this arithmetic is: \u003cbr\u003e % expr `date -d \"7/4/2010Z11:30:00.000\" +%s` - 1072915200\u003cbr\u003e 205327800In BrightScript, the same calculation might be:\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n dt \u003d CreateObject(\"roDateTime\") dt.fromISO8601String(\"7/4/2010T11:30:00.000\") itemContentMetaData.PlayStart \u003d dt. asSeconds() - 1072915200 \u0027205327800\n\u003c/ac:plain-text-body\u003e\u003cli\u003eIn firmware version 2.6, we\u0027ve introduced support for SRT files. Please see the content meta-data parameter SubtitleUrl for pointing to a matching SRT file for your video content.\u003c/li\u003e\n\u003cli\u003eIn firmware version 2.7, we\u0027ve introduced 1080p support. Please see the content meta-data parameter FullHD for specifying 1080p resolution. Playback at 1080p resolution will only occur when the user has set the display type to HDTV 1080p. Another content meta-data parameter, FrameRate, specifies the frames per second of the video. Valid values are 24 and 30. If the user\u0027s display type is set to 1080p and FullHD for the content is false or not set, HD playback will be at 720p resolution. If the user\u0027s display type is set to HDTV 720p and FullHD content is set to 1080p resolution, the box will downscale the content to 720p resolution.\u003c/li\u003eThis object is created with no parameters:CreateObject(\"roVideoScreen\")\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Â\u0026nbsp; \u0027********************************************************************** \u0027 This example function is passed an associative array representing a \u0027 piece of content (e.g. a TV episode) There are other attributes \u0027 (title, description, etc.) but this example focuses on showing \u0027 attributes required for initiating playback. It creates a video \u0027 screen, sets the content and starts playback by calling Show() \u0027********************************************************************** Function showVideoScreen(episode As Object) if type(episode) \u0026lt;\u0026gt; \"roAssociativeArray\" then print \"invalid data passed to showVideoScreen\" return -1 endif port \u003d CreateObject(\"roMessagePort\") screen \u003d CreateObject(\"roVideoScreen\") \u0027 Note: HDBranded controls whether the \"HD\" logo is displayed for a \u0027 title. This is separate from IsHD because its possible to \u0027 have an HD title where you don\u0027t want to show the HD logo \u0027 branding for the title. Set these two as appropriate for \u0027 your content episode.HDBranded \u003d false episode.IsHD \u003d false \u0027 Note: The preferred way to specify stream info in v2.6 is to use \u0027 the Stream roAssociativeArray content meta data parameter. episode.Stream \u003d { url:\"http://myserver.mydomain.com/mycontent.mp4\", bitrate:2000 quality:false contentid:\"mycontent-2000\" } episode.StreamFormat: \"mp4\" \u0027 now just tell the screen about the title to be played, set the \u0027 message port for where you will receive events and call show to \u0027 begin playback. You should see a buffering screen and then \u0027 playback will start immediately when we have enough data buffered. screen.SetContent(episode) screen.SetMessagePort(port) screen.Show() \u0027 Wait in a loop on the message port for events to be received. \u0027 We will just quit the loop and return to the calling function \u0027 when the users terminates playback, but there are other things \u0027 you could do here like monitor playback position and see events \u0027 from the streaming player. Look for status messages from the video \u0027 player for status and failure events that occur during playback while true msg \u003d wait(0, port) if type(msg) \u003d \"roVideoScreenEvent\" then print \"showVideoScreen | msg \u003d \"; msg.GetMessage() \" | index \u003d \"; msg.GetIndex() if msg.isScreenClosed() print \"Screen closed\" exit while else if msg.isStatusMessage() print \"status message: \"; msg.GetMessage() else if msg.isPlaybackPosition() print \"playback position: \"; msg.GetIndex() else if msg.isFullResult() print \"playback completed\" exit while else if msg.isPartialResult() print \"playback interrupted\" exit while else if msg.isRequestFailed() print \"request failed - error: \"; msg.GetIndex();\" - \"; msg.GetMessage() exit while end if end if end while End Function \n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roVideoScreen",
      "documentationVersion": 12
    },
    "roByteArray": {
      "shortDescription": "The byte array component is used to contain and manipulate an arbitrary array of bytes.",
      "interfaceNames": [
        "ifEnum",
        "ifArrayGet",
        "ifArraySet",
        "ifArray",
        "ifByteArray"
      ],
      "eventNames": [],
      "name": "roByteArray",
      "description": "This object contains functions to convert strings to or from a byte array, as well as to or from ascii hex or ascii base 64. Note that if you are converting a byte array to a string, and the byte array contains a zero, the string conversion will end at that point. roByteArray will autosize to become larger as needed. If you wish to turn off this behavior, then use the SetResize() function. If you read an uninitialized index, \"invalid\" is returned. roByteArray supports the interface, and so can be accessed with the array [] operator. The byte array is always accessed as unsigned bytes when using this interface. roByteArray also supports the ifEnum interface, and so can be used with a \"for each\" statementvbA few examplesba\u003dCreateObject(\"roByteArray\") ba.FromAsciiString(\"leasure.\") if ba.ToBase64String()\u003c\u003e\"bGVhc3VyZS4\u003d\" then stop ba\u003dCreateObject(\"roByteArray\") ba.fromhexstring(\"00FF1001\") if ba[0]\u003c\u003e0 or ba[1]\u003c\u003e255 or ba[2]\u003c\u003e16 or ba[3]\u003c\u003e1 then stop ba\u003dCreateObject(\"roByteArray\") for x\u003d0 to 4000 ba.push(x) end for ba.WriteFile(\"tmp:/ByteArrayTestFile\") ba2\u003dCreateObject(\"roByteArray\") ba2.ReadFile(\"tmp:/ByteArrayTestFile\") if ba.Count()\u003c\u003eba2.Count() then stop for x\u003d0 to 4000 if ba[x]\u003c\u003eba2[x] then stop end for ba2.ReadFile(\"tmp:/ByteArrayTestFile\", 10, 100) if ba2.count()\u003c\u003e100 then stop for x\u003d10 to 100 if ba2[x-10]\u003c\u003ex then stop end for",
      "descriptionHTML": "This object contains functions to convert strings to or from a byte array, as well as to or from ascii hex or ascii base 64. Note that if you are converting a byte array to a string, and the byte array contains a zero, the string conversion will end at that point. roByteArray will autosize to become larger as needed. If you wish to turn off this behavior, then use the SetResize() function. If you read an uninitialized index, \"invalid\" is returned. \u003cbr class\u003d\"atl-forced-newline\"\u003e roByteArray supports the \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"ifArray\" /\u003e\n\u003c/ac:link\u003e interface, and so can be accessed with the array [] operator. The byte array is always accessed as unsigned bytes when using this interface. roByteArray also supports the ifEnum interface, and so can be used with a \"for each\" statement\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n A few examples\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n ba\u003dCreateObject(\"roByteArray\") ba.FromAsciiString(\"leasure.\") if ba.ToBase64String()\u0026lt;\u0026gt;\"bGVhc3VyZS4\u003d\" then stop ba\u003dCreateObject(\"roByteArray\") ba.fromhexstring(\"00FF1001\") if ba[0]\u0026lt;\u0026gt;0 or ba[1]\u0026lt;\u0026gt;255 or ba[2]\u0026lt;\u0026gt;16 or ba[3]\u0026lt;\u0026gt;1 then stop ba\u003dCreateObject(\"roByteArray\") for x\u003d0 to 4000 ba.push(x) end for ba.WriteFile(\"tmp:/ByteArrayTestFile\") ba2\u003dCreateObject(\"roByteArray\") ba2.ReadFile(\"tmp:/ByteArrayTestFile\") if ba.Count()\u0026lt;\u0026gt;ba2.Count() then stop for x\u003d0 to 4000 if ba[x]\u0026lt;\u0026gt;ba2[x] then stop end for ba2.ReadFile(\"tmp:/ByteArrayTestFile\", 10, 100) if ba2.count()\u0026lt;\u0026gt;100 then stop for x\u003d10 to 100 if ba2[x-10]\u0026lt;\u0026gt;x then stop end for \n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roByteArray",
      "documentationVersion": 2
    },
    "roTextureRequest": {
      "shortDescription": "An roTextureRequest is used to make requests to the .",
      "interfaceNames": [
        "ifTextureRequest",
        "ifHttpAgent"
      ],
      "eventNames": [],
      "name": "roTextureRequest",
      "description": "An roTextureRequest object is created using the CreateObject() method and passing it a URI string.CreateObject(\"roTextureRequest\", \"pkg:/assets/comet.jpg\") bashExample: Requesting a URL from the roTextureManagerSub Main() mgr \u003d CreateObject(\"roTextureManager\") msgport \u003d CreateObject(\"roMessagePort\") mgr.SetMessagePort(msgport) request \u003d CreateObject(\"roTextureRequest\",\"http://192.168.1.10/ball.png\") mgr.RequestTexture(request) msg\u003dwait(0, msgport) if type(msg)\u003d\"roTextureRequestEvent\" then print \"request id\";msg.GetId() print \"request state:\";msg.GetState() print \"request URI:\";msg.GetURI() state \u003d msg.GetState() if state \u003d 3 then bitmap \u003d msg.GetBitmap() if type(bitmap)\u003c\u003e\"roBitmap\" then print \"Unable to create robitmap\" stop \u0027 stop exits to the debugger end if end if end if End Sub  bashExample: Requesting a scaled image from the roTextureManagerSub Main() mgr \u003d CreateObject(\"roTextureManager\") msgport \u003d CreateObject(\"roMessagePort\") mgr.SetMessagePort(msgport) request \u003d CreateObject(\"roTextureRequest\",\"pkg:/assets/ball.png\") request.SetSize(100, 100) request.SetScaleMode(1) mgr.RequestTexture(request) End SubbashExample: Making an HTTPS request from the roTextureManagerSub Main() mgr \u003d CreateObject(\"roTextureManager\") msgport \u003d CreateObject(\"roMessagePort\") mgr.SetMessagePort(msgport) request \u003d CreateObject(\"roTextureRequest\",\"https://192.168.1.10/ball.png\") request.SetCertificatesFile(\"common:/certs/ca-bundle.crt\") request.InitClientCertificates() mgr.RequestTexture(request) End Sub",
      "descriptionHTML": "An roTextureRequest object is created using the CreateObject() method and passing it a URI string.\u003cli\u003eCreateObject(\"roTextureRequest\", \"\u003ca href\u003d\"http://pkg/assets/comet.jpg\"\u003epkg:/assets/comet.jpg\u003c/a\u003e\")\u003c/li\u003e\u0026nbsp;\u003cac:parameter ac:name\u003d\"language\"\u003e\n bash\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example: Requesting a URL from the roTextureManager\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Sub Main() mgr \u003d CreateObject(\"roTextureManager\") msgport \u003d CreateObject(\"roMessagePort\") mgr.SetMessagePort(msgport) request \u003d CreateObject(\"roTextureRequest\",\"http://192.168.1.10/ball.png\") mgr.RequestTexture(request) msg\u003dwait(0, msgport) if type(msg)\u003d\"roTextureRequestEvent\" then print \"request id\";msg.GetId() print \"request state:\";msg.GetState() print \"request URI:\";msg.GetURI() state \u003d msg.GetState() if state \u003d 3 then bitmap \u003d msg.GetBitmap() if type(bitmap)\u0026lt;\u0026gt;\"roBitmap\" then print \"Unable to create robitmap\" stop \u0027 stop exits to the debugger end if end if end if End Sub\n\u003c/ac:plain-text-body\u003e\u0026nbsp;\u0026nbsp;\u003cac:parameter ac:name\u003d\"language\"\u003e\n bash\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example: Requesting a scaled image from the roTextureManager\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Sub Main() mgr \u003d CreateObject(\"roTextureManager\") msgport \u003d CreateObject(\"roMessagePort\") mgr.SetMessagePort(msgport) request \u003d CreateObject(\"roTextureRequest\",\"pkg:/assets/ball.png\") request.SetSize(100, 100) request.SetScaleMode(1) mgr.RequestTexture(request) End Sub\n\u003c/ac:plain-text-body\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n bash\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example: Making an HTTPS request from the roTextureManager\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Sub Main() mgr \u003d CreateObject(\"roTextureManager\") msgport \u003d CreateObject(\"roMessagePort\") mgr.SetMessagePort(msgport) request \u003d CreateObject(\"roTextureRequest\",\"https://192.168.1.10/ball.png\") request.SetCertificatesFile(\"common:/certs/ca-bundle.crt\") request.InitClientCertificates() mgr.RequestTexture(request) End Sub\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roTextureRequest",
      "documentationVersion": 4
    },
    "roAudioPlayer": {
      "shortDescription": "The Audio Player object provides the ability to setup the playing of a series of audio streams. The object accepts an array of content meta-data objects, describing the audio and providing url\u0027s for accessing each stream. The component understands the following streamformat values: \"mp3\", \"wma\", \"mp4\", \"hls\", \"es.aac-adts\", \"flac\"",
      "interfaceNames": [
        "ifSetMessagePort",
        "ifHttpAgent",
        "ifGetMessagePort",
        "ifAudioPlayer"
      ],
      "eventNames": [
        "roAudioPlayerEvent"
      ],
      "name": "roAudioPlayer",
      "description": "This object does not provide an interface to a screen. In order to get events both from the screen you are using and the Audio Player, you should use the same Message Port for both objects.  This object is created with no parameters:CreateObject(\"roAudioPlayer\")vbExampleSub Main() audioPlayer \u003d CreateObject(\"roAudioPlayer\") port \u003d CreateObject(\"roMessagePort\") audioPlayer.SetMessagePort(port) song \u003d CreateObject(\"roAssociativeArray\") song.url \u003d \"http://www.theflute.co.uk/media/BachCPE_SonataAmin_1.wma\" audioplayer.addcontent(song) audioplayer.setloop(false) audioPlayer.play() while true msg \u003d wait(0, port) if type(msg) \u003d \"roAudioPlayerEvent\" if msg.isStatusMessage() then print \"roAudioPlayerEvent: \"; msg.getmessage() if msg.getmessage() \u003d \"end of playlist\" return endif endif end while End Sub  ",
      "descriptionHTML": "This object does not provide an interface to a screen. In order to get events both from the screen you are using and the Audio Player, you should use the same Message Port for both objects.\u0026nbsp;\u003cbr class\u003d\"atl-forced-newline\"\u003eThis object is created with no parameters:\u003cli\u003eCreateObject(\"roAudioPlayer\")\u003c/li\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Sub Main() audioPlayer \u003d CreateObject(\"roAudioPlayer\") port \u003d CreateObject(\"roMessagePort\") audioPlayer.SetMessagePort(port) song \u003d CreateObject(\"roAssociativeArray\") song.url \u003d \"http://www.theflute.co.uk/media/BachCPE_SonataAmin_1.wma\" audioplayer.addcontent(song) audioplayer.setloop(false) audioPlayer.play() while true msg \u003d wait(0, port) if type(msg) \u003d \"roAudioPlayerEvent\" if msg.isStatusMessage() then print \"roAudioPlayerEvent: \"; msg.getmessage() if msg.getmessage() \u003d \"end of playlist\" return endif endif end while End Sub\n\u003c/ac:plain-text-body\u003e\u0026nbsp;\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roAudioPlayer",
      "documentationVersion": 3
    },
    "roRegion": {
      "shortDescription": "The roRegion component is used to represent a subsection of a bitmap.",
      "interfaceNames": [
        "ifRegion"
      ],
      "eventNames": [],
      "name": "roRegion",
      "description": "The region is specified with an x,y, width, and height as well as a time field for use with animated sprites and a wrap field which causes the region to wrap during scrolling. The roRegion is a common parameter used by the drawing functions of . Wrap and Time are used by . roRegion is also used to specify a pretranslation (x,y) for the draw, rotate, and scale operation. The pretranslation is normally used to specify the center of the region. The scaling operation is controlled by the scalemode specified in the region. This object is created with parameters to initialize the x,y coordinates, width, height. If time and wrap are desired, use the SetTime() and SetWrap().CreateObject(\"roRegion\", Object bitmap, Integer x, Integer y,Integer width, Integer height)  ",
      "descriptionHTML": "The region is specified with an x,y, width, and height as well as a time field for use with animated sprites and a wrap field which causes the region to wrap during scrolling. The roRegion is a common parameter used by the drawing functions of \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"roBitmap\" /\u003e\n\u003c/ac:link\u003e. Wrap and Time are used by \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"roCompositor\" /\u003e\n\u003c/ac:link\u003e. roRegion is also used to specify a pretranslation (x,y) for the draw, rotate, and scale operation. The pretranslation is normally used to specify the center of the region. The scaling operation is controlled by the scalemode specified in the region. \u003cbr class\u003d\"atl-forced-newline\"\u003e This object is created with parameters to initialize the x,y coordinates, width, height. If time and wrap are desired, use the SetTime() and SetWrap().CreateObject(\"roRegion\", Object bitmap, Integer x, Integer y,Integer width, Integer height)\u0026nbsp;\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roRegion",
      "documentationVersion": 1
    },
    "roCaptionRenderer": {
      "shortDescription": " ",
      "interfaceNames": [
        "ifCaptionRenderer"
      ],
      "eventNames": [
        "roCaptionRendererEvent"
      ],
      "name": "roCaptionRenderer",
      "description": "Prior to the 5.2 Roku firmware version, closed captions could only be rendered in roVideoScreen.  Now channels that use roVideoPlayer embedded in an roScreen or roImageCanvas can also take advantage of Roku\u0027s closed captioning support.  roCaptionRenderer supports two different modes, which is set using the SetMode() method.  Depending on the mode set, and the type of screen being used, the BrightScript channel needs to do different levels of work to render captions.  These different workflows are highlighted in the tables below:Mode 1roScreen roImageCanvas Call SetScreen() Call SetScreen() Call UpdateCaption()  Mode 2roScreen roImageCanvas All caption rendering is done by the channel\u0027s BrightScript code All caption rendering is done by the channel\u0027s BrightScript codeBrightScript channels do not create roCaptionRenderer instances directly using CreateObject().  Instead, when an roVideoPlayer is created, it contains an roCaptionRenderer.  BrightScript channels call ifVideoPlayer.GetCaptionRenderer() to get the caption renderer associated with their video player. vbSample CodeFunction Main() as void mode \u003d 1 fonts \u003d CreateObject(\"roFontRegistry\") fonts.Register(\"pkg:/fonts/vSHandprinted.otf\") font \u003d fonts.GetFont(\"vSHandprinted\", 28, 500, false) screen \u003d CreateObject(\"roScreen\", true) port \u003d CreateObject(\"roMessagePort\") screen.Clear(\u0026h00) screen.SwapBuffers() screen.SetMessagePort(port) timer \u003d CreateObject(\"roTimespan\") screenSize \u003d {} screenSize.width \u003d screen.GetWidth() screenSize.height \u003d screen.GetHeight() player \u003d CreateObject(\"roVideoPlayer\") player.SetContentList([ { Stream : { url :\"http://ecn.channel9.msdn.com/o9/content/smf/smoothcontent/elephantsdream/Elephants_Dream_1024-h264-st-aac.ism/manifest\" } StreamFormat : \"ism\" TrackIDAudio: \"audio_eng\" TrackIDSubtitle: \"ism/textstream_eng\" } ]) captions \u003d player.GetCaptionRenderer() if (mode \u003d 1) captions.SetScreen(screen) endif captions.SetMode(mode) captions.SetMessagePort(port) captions.ShowSubtitle(true) player.play() while true msg \u003d wait(250, port) if type(msg) \u003d \"roCaptionRendererEvent\" if msg.isCaptionText() print \"isCaptionText\" if msg.GetMessage() \u003c\u003e invalid and msg.GetMessage() \u003c\u003e \"\" DrawCaptionString(screen, screenSize, msg.GetMessage(), font) timer.Mark() else if timer.TotalSeconds() \u003e 2 ClearCaptionString(screen) endif else if msg.isCaptionUpdateRequest() print \"isCaptionUpdateRequest()\" UpdateCaptions(screen, captions) end if endif end while End Function Function UpdateCaptions(screen as object, captions as object) as Void screen.Clear(\u0026h00) captions.UpdateCaption() screen.SwapBuffers() End Function Function DrawCaptionString(screen as object, screenSize as object, caption as String, font as object) as Void screen.Clear(\u0026h00) textHeight \u003d font.GetOneLineHeight() textWidth \u003d font.GetOneLineWidth(caption, screenSize.width) x \u003d (screenSize.width - textWidth) / 2 y \u003d screenSize.height - textHeight screen.DrawText(caption, x, y, \u0026hd5d522ff, font) screen.SwapBuffers() End Function Function ClearCaptionString(screen as object) as void screen.Clear(\u0026h00) screen.SwapBuffers() End Function",
      "descriptionHTML": "Prior to the 5.2 Roku firmware version, closed captions could only be rendered in roVideoScreen.\u0026nbsp; Now channels that use roVideoPlayer embedded in an roScreen or roImageCanvas can also take advantage of Roku\u0027s closed captioning support.\u0026nbsp; roCaptionRenderer supports two different modes, which is set using the\u0026nbsp;\u003ca href\u003d\"http://sdkdocs.roku.com/display/sdkdoc/ifCaptionRenderer#ifCaptionRenderer-SetModemodeasIntegerasVoid\"\u003eSetMode()\u003c/a\u003e method.\u0026nbsp; Depending on the mode set, and the type of screen being used, the BrightScript channel needs to do different levels of work to render captions.\u0026nbsp; These different workflows are highlighted\u0026nbsp;in the tables below:Mode 1\u003ctbody\u003e\n \u003ctr\u003e\n  \u003cth\u003eroScreen\u003c/th\u003e\n  \u003cth\u003eroImageCanvas\u003c/th\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eCall \u003ca href\u003d\"http://sdkdocs.roku.com/display/sdkdoc/ifCaptionRenderer#ifCaptionRenderer-SetScreenscreenasObjectasVoid\"\u003eSetScreen()\u003c/a\u003e\u003c/td\u003e\n  \u003ctd\u003eCall \u003ca href\u003d\"http://sdkdocs.roku.com/display/sdkdoc/ifCaptionRenderer#ifCaptionRenderer-SetScreenscreenasObjectasVoid\"\u003eSetScreen()\u003c/a\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eCall \u003ca href\u003d\"http://sdkdocs.roku.com/display/sdkdoc/ifCaptionRenderer#ifCaptionRenderer-UpdateCaptionasVoid\"\u003eUpdateCaption()\u003c/a\u003e\u003c/td\u003e\n  \u003ctd\u003e\u0026nbsp;\u003c/td\u003e\n \u003c/tr\u003e\n\u003c/tbody\u003eMode 2\u003ctbody\u003e\n \u003ctr\u003e\n  \u003cth\u003eroScreen\u003c/th\u003e\n  \u003cth\u003eroImageCanvas\u003c/th\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003eAll caption rendering is done by the channel\u0027s BrightScript code\u003c/td\u003e\n  \u003ctd\u003eAll caption rendering is done by the channel\u0027s BrightScript code\u003c/td\u003e\n \u003c/tr\u003e\n\u003c/tbody\u003eBrightScript channels do not create roCaptionRenderer instances directly using CreateObject().\u0026nbsp; Instead, when an roVideoPlayer is created, it contains an roCaptionRenderer.\u0026nbsp; BrightScript channels call \u003ca href\u003d\"http://sdkdocs.roku.com/display/sdkdoc/ifVideoPlayer#ifVideoPlayer-GetCaptionRendererasObject\"\u003eifVideoPlayer.GetCaptionRenderer()\u003c/a\u003e to get the caption renderer associated with their video player.\u0026nbsp;\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Sample Code\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Function Main() as void mode \u003d 1 fonts \u003d CreateObject(\"roFontRegistry\") fonts.Register(\"pkg:/fonts/vSHandprinted.otf\") font \u003d fonts.GetFont(\"vSHandprinted\", 28, 500, false) screen \u003d CreateObject(\"roScreen\", true) port \u003d CreateObject(\"roMessagePort\") screen.Clear(\u0026amp;h00) screen.SwapBuffers() screen.SetMessagePort(port) timer \u003d CreateObject(\"roTimespan\") screenSize \u003d {} screenSize.width \u003d screen.GetWidth() screenSize.height \u003d screen.GetHeight() player \u003d CreateObject(\"roVideoPlayer\") player.SetContentList([ { Stream : { url :\"http://ecn.channel9.msdn.com/o9/content/smf/smoothcontent/elephantsdream/Elephants_Dream_1024-h264-st-aac.ism/manifest\" } StreamFormat : \"ism\" TrackIDAudio: \"audio_eng\" TrackIDSubtitle: \"ism/textstream_eng\" } ]) captions \u003d player.GetCaptionRenderer() if (mode \u003d 1) captions.SetScreen(screen) endif captions.SetMode(mode) captions.SetMessagePort(port) captions.ShowSubtitle(true) player.play() while true msg \u003d wait(250, port) if type(msg) \u003d \"roCaptionRendererEvent\" if msg.isCaptionText() print \"isCaptionText\" if msg.GetMessage() \u0026lt;\u0026gt; invalid and msg.GetMessage() \u0026lt;\u0026gt; \"\" DrawCaptionString(screen, screenSize, msg.GetMessage(), font) timer.Mark() else if timer.TotalSeconds() \u0026gt; 2 ClearCaptionString(screen) endif else if msg.isCaptionUpdateRequest() print \"isCaptionUpdateRequest()\" UpdateCaptions(screen, captions) end if endif end while End Function Function UpdateCaptions(screen as object, captions as object) as Void screen.Clear(\u0026amp;h00) captions.UpdateCaption() screen.SwapBuffers() End Function Function DrawCaptionString(screen as object, screenSize as object, caption as String, font as object) as Void screen.Clear(\u0026amp;h00) textHeight \u003d font.GetOneLineHeight() textWidth \u003d font.GetOneLineWidth(caption, screenSize.width) x \u003d (screenSize.width - textWidth) / 2 y \u003d screenSize.height - textHeight screen.DrawText(caption, x, y, \u0026amp;hd5d522ff, font) screen.SwapBuffers() End Function Function ClearCaptionString(screen as object) as void screen.Clear(\u0026amp;h00) screen.SwapBuffers() End Function\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roCaptionRenderer",
      "documentationVersion": 12
    },
    "roGridScreen": {
      "shortDescription": "The Grid Screen provides a graphical display of poster art from multiple content categories from within a single screen.",
      "interfaceNames": [
        "ifSetMessagePort",
        "ifGridScreen",
        "ifHttpAgent",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roGridScreenEvent"
      ],
      "name": "roGridScreen",
      "description": "Users can browse within a category list by scrolling horizonally and between category lists by scrolling vertically. There is an optional callout box in the lower right corner of the screen that can display details about the focused item without leaving the screen. Each item in the grid screen is represented by an image (aka poster), so any type of item that can be visually represented by an image can be displayed in the poster screen. It is used to show lists of data to users and common patterns include content categories, movies, podcasts, pictures, and search results. The initial release of roGridScreen only enabled the default list style, \"portrait\", using the following art sizes: Artwork sizes: SD\u003d110x150; HD\u003d210x270 It also required grid posters to be .jpg files.Later firmware versions added mixed aspect ratio grids, and the interface SetListPosterStyles() to set the aspect ratio of each row in the grid. If you want a mixed aspect ratio grid, you must call SetListPosterStyles() before you call SetContentList(), to avoid possible distortion of the graphic images in the grid.Since Firmware version 2.8:File types of .png and .gif files are now supported, though they are converted internally to .jpg by the roGridScreen so they have a performance penalty. In v2.8, there are now multiple grid styles that are specified in the SetGridStyle()method below. It\u0027s also worth going back and reviewing the appManager theme parameters in , as v2.8 adds some new grid parameters. The border around the focused poster screen can be customized with the GridScreenFocusBorder images in png format. PNG files can have a transparent color value that you will need to allow the focused poster image to show through the border image. The corresponding offsets should be negative offsets that would be up and to the left of the top left corner of the poster image. The width of the borders should be the absolute values of the offsets and the rest of the image should be transparent inside. The GridScreenDescriptionImage is also positioned relative to the top left corner of the focused image. It can be positioned up and to the left with negative x and y offsets, below and to the right with positive offsets, or in the other corners with mixed signed x and y offsets. It\u0027s recommended that you include a \"callout\" tip pointing to the focused image in the GridScreenDescriptionImage.Diagram: roGridScreenThis object is created with no parameters:CreateObject(\"roGridScreen\") vbExampleFunction Main() port \u003d CreateObject(\"roMessagePort\") grid \u003d CreateObject(\"roGridScreen\") grid.SetMessagePort(port) rowTitles \u003d CreateObject(\"roArray\", 10, true) for j \u003d 0 to 10 rowTitles.Push(\"[Row Title \" + j.toStr() + \" ] \") end for grid.SetupLists(rowTitles.Count()) grid.SetListNames(rowTitles) for j \u003d 0 to 10 list \u003d CreateObject(\"roArray\", 10, true) for i \u003d 0 to 10 o \u003d CreateObject(\"roAssociativeArray\") o.ContentType \u003d \"episode\" o.Title \u003d \"[Title\" + i.toStr() + \"]\" o.ShortDescriptionLine1 \u003d \"[ShortDescriptionLine1]\" o.ShortDescriptionLine2 \u003d \"[ShortDescriptionLine2]\" o.Description \u003d \"\" o.Description \u003d \"[Description] \" o.Rating \u003d \"NR\" o.StarRating \u003d \"75\" o.ReleaseDate \u003d \"[\u003cmm/dd/yyyy]\" o.Length \u003d 5400 o.Actors \u003d [] o.Actors.Push(\"[Actor1]\") o.Actors.Push(\"[Actor2]\") o.Actors.Push(\"[Actor3]\") o.Director \u003d \"[Director]\" list.Push(o) end for grid.SetContentList(j, list) end for grid.Show() while true msg \u003d wait(0, port) if type(msg) \u003d \"roGridScreenEvent\" then if msg.isScreenClosed() then return -1 elseif msg.isListItemFocused() print \"Focused msg: \";msg.GetMessage();\"row: \";msg.GetIndex(); print \" col: \";msg.GetData() elseif msg.isListItemSelected() print \"Selected msg: \";msg.GetMessage();\"row: \";msg.GetIndex(); print \" col: \";msg.GetData() endif endif end while End Function",
      "descriptionHTML": "Users can browse within a category list by scrolling horizonally and between category lists by scrolling vertically. There is an optional callout box in the lower right corner of the screen that can display details about the focused item without leaving the screen. Each item in the grid screen is represented by an image (aka poster), so any type of item that can be visually represented by an image can be displayed in the poster screen. It is used to show lists of data to users and common patterns include content categories, movies, podcasts, pictures, and search results. \u003cbr class\u003d\"atl-forced-newline\"\u003e The initial release of roGridScreen only enabled the default list style, \"portrait\", using the following art sizes:\u003cbr\u003e Artwork sizes: SD\u003d110x150; HD\u003d210x270 \u003cbr class\u003d\"atl-forced-newline\"\u003e It also required grid posters to be .jpg files.Later firmware versions added mixed aspect ratio grids, and the \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"ifGridScreen\" /\u003e\n\u003c/ac:link\u003e interface \n\u003cac:link ac:anchor\u003d\"SetListPosterStyles(stylesasObject)asVoid\"\u003e\n \u003cri:page ri:content-title\u003d\"ifGridScreen\" /\u003e\n \u003cac:link-body\u003e\n  \u003cspan style\u003d\"color: rgb(31,73,125);\"\u003eSetListPosterStyles()\u003c/span\u003e\n \u003c/ac:link-body\u003e\n\u003c/ac:link\u003e\u0026nbsp;\u003cspan style\u003d\"color: rgb(31,73,125);\"\u003eto set the aspect ratio of each row in the grid. If you want a mixed aspect ratio grid, you must call \u003cspan style\u003d\"color: rgb(31,73,125);\"\u003eSetListPosterStyles()\u003c/span\u003e before you call \n \u003cac:link ac:anchor\u003d\"SetContentList(rowIndexasInteger,contentListasObject)asVoid\"\u003e\n  \u003cri:page ri:content-title\u003d\"ifGridScreen\" /\u003e\n  \u003cac:plain-text-link-body\u003e\n   SetContentList()\n  \u003c/ac:plain-text-link-body\u003e\n \u003c/ac:link\u003e, to avoid possible distortion of the graphic images in the grid. \u003c/span\u003eSince Firmware version 2.8:\u003cbr class\u003d\"atl-forced-newline\"\u003e File types of .png and .gif files are now supported, though they are converted internally to .jpg by the roGridScreen so they have a performance penalty. \u003cbr class\u003d\"atl-forced-newline\"\u003e In v2.8, there are now multiple grid styles that are specified in the SetGridStyle()method below. It\u0027s also worth going back and reviewing the appManager theme parameters in \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"roAppManager\" /\u003e\n\u003c/ac:link\u003e, as v2.8 adds some new grid parameters. The border around the focused poster screen can be customized with the GridScreenFocusBorder images in png format. PNG files can have a transparent color value that you will need to allow the focused poster image to show through the border image. The corresponding offsets should be negative offsets that would be up and to the left of the top left corner of the poster image. The width of the borders should be the absolute values of the offsets and the rest of the image should be transparent inside. The GridScreenDescriptionImage is also positioned relative to the top left corner of the focused image. It can be positioned up and to the left with negative x and y offsets, below and to the right with positive offsets, or in the other corners with mixed signed x and y offsets. It\u0027s recommended that you include a \"callout\" tip pointing to the focused image in the GridScreenDescriptionImage.Diagram: roGridScreen\u003cbr class\u003d\"atl-forced-newline\"\u003e \u003cbr class\u003d\"atl-forced-newline\"\u003e \n\u003cac:image ac:height\u003d\"325\" ac:width\u003d\"575\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddav1ccc3006bb2813b125ea85af6deeaf85.png\" /\u003e\n\u003c/ac:image\u003e \u003cbr class\u003d\"atl-forced-newline\"\u003e \u003cbr class\u003d\"atl-forced-newline\"\u003e This object is created with no parameters:\u003cli\u003eCreateObject(\"roGridScreen\")\u003c/li\u003e\u0026nbsp;\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Function Main() port \u003d CreateObject(\"roMessagePort\") grid \u003d CreateObject(\"roGridScreen\") grid.SetMessagePort(port) rowTitles \u003d CreateObject(\"roArray\", 10, true) for j \u003d 0 to 10 rowTitles.Push(\"[Row Title \" + j.toStr() + \" ] \") end for grid.SetupLists(rowTitles.Count()) grid.SetListNames(rowTitles) for j \u003d 0 to 10 list \u003d CreateObject(\"roArray\", 10, true) for i \u003d 0 to 10 o \u003d CreateObject(\"roAssociativeArray\") o.ContentType \u003d \"episode\" o.Title \u003d \"[Title\" + i.toStr() + \"]\" o.ShortDescriptionLine1 \u003d \"[ShortDescriptionLine1]\" o.ShortDescriptionLine2 \u003d \"[ShortDescriptionLine2]\" o.Description \u003d \"\" o.Description \u003d \"[Description] \" o.Rating \u003d \"NR\" o.StarRating \u003d \"75\" o.ReleaseDate \u003d \"[\u0026lt;mm/dd/yyyy]\" o.Length \u003d 5400 o.Actors \u003d [] o.Actors.Push(\"[Actor1]\") o.Actors.Push(\"[Actor2]\") o.Actors.Push(\"[Actor3]\") o.Director \u003d \"[Director]\" list.Push(o) end for grid.SetContentList(j, list) end for grid.Show() while true msg \u003d wait(0, port) if type(msg) \u003d \"roGridScreenEvent\" then if msg.isScreenClosed() then return -1 elseif msg.isListItemFocused() print \"Focused msg: \";msg.GetMessage();\"row: \";msg.GetIndex(); print \" col: \";msg.GetData() elseif msg.isListItemSelected() print \"Selected msg: \";msg.GetMessage();\"row: \";msg.GetIndex(); print \" col: \";msg.GetData() endif endif end while End Function\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roGridScreen",
      "documentationVersion": 4
    },
    "roKeyboardScreen": {
      "shortDescription": "The Keyboard Screen is designed to allow the user to enter an alpha-numeric string for searching, username/password registration or other purposes.",
      "interfaceNames": [
        "ifKeyboardScreen",
        "ifSetMessagePort",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roKeyboardScreenEvent"
      ],
      "name": "roKeyboardScreen",
      "description": "This component is generally used as part of a sequence of screens and the results are displayed on the subsequent screen in the sequence. In the case of a search screen, results are displayed on the roPosterScreen and categories may be used to segregate TV and Movie results.Diagram: roKeyboardScreenvbExampleSub Main() screen \u003d CreateObject(\"roKeyboardScreen\") port \u003d CreateObject(\"roMessagePort\") screen.SetMessagePort(port) screen.SetTitle(\"Search Screen\") screen.SetText(\"default\") screen.SetDisplayText(\"enter text to search\") screen.SetMaxLength(8) screen.AddButton(1, \"finished\") screen.AddButton(2, \"back\") screen.Show() while true msg \u003d wait(0, screen.GetMessagePort()) print \"message received\" if type(msg) \u003d \"roKeyboardScreenEvent\" if msg.isScreenClosed() return else if msg.isButtonPressed() then print \"Evt:\"; msg.GetMessage ();\" idx:\"; msg.GetIndex() if msg.GetIndex() \u003d 1 searchText \u003d screen.GetText() print \"search text: \"; searchText return endif endif endif end while End SubImage: roKeyboardScreen example results",
      "descriptionHTML": "This component is generally used as part of a sequence of screens and the results are displayed on the subsequent screen in the sequence. In the case of a search screen, results are displayed on the roPosterScreen and categories may be used to segregate TV and Movie results.Diagram: roKeyboardScreen\u003cbr class\u003d\"atl-forced-newline\"\u003e\n\u003cac:image ac:height\u003d\"393\" ac:width\u003d\"575\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddave8836d15f1370885c4214cb8a60bc23f.png\" /\u003e\n\u003c/ac:image\u003e\u003cbr class\u003d\"atl-forced-newline\"\u003e\u003cbr class\u003d\"atl-forced-newline\"\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Sub Main() screen \u003d CreateObject(\"roKeyboardScreen\") port \u003d CreateObject(\"roMessagePort\") screen.SetMessagePort(port) screen.SetTitle(\"Search Screen\") screen.SetText(\"default\") screen.SetDisplayText(\"enter text to search\") screen.SetMaxLength(8) screen.AddButton(1, \"finished\") screen.AddButton(2, \"back\") screen.Show() while true msg \u003d wait(0, screen.GetMessagePort()) print \"message received\" if type(msg) \u003d \"roKeyboardScreenEvent\" if msg.isScreenClosed() return else if msg.isButtonPressed() then print \"Evt:\"; msg.GetMessage ();\" idx:\"; msg.GetIndex() if msg.GetIndex() \u003d 1 searchText \u003d screen.GetText() print \"search text: \"; searchText return endif endif endif end while End Sub\n\u003c/ac:plain-text-body\u003eImage: roKeyboardScreen example results\u003cbr class\u003d\"atl-forced-newline\"\u003e \n\u003cac:image ac:height\u003d\"383\" ac:width\u003d\"575\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddavf60895731d2a3656b27082f0468bc5d0.png\" /\u003e\n\u003c/ac:image\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roKeyboardScreen",
      "documentationVersion": 2
    },
    "roTextToSpeech": {
      "shortDescription": "The roTextToSpeech component provides text to speech capabilities to applications.",
      "interfaceNames": [
        "ifTextToSpeech",
        "ifSetMessagePort",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roTextToSpeechEvent"
      ],
      "name": "roTextToSpeech",
      "description": "The roTextToSpeech component provides text to speech capabilities to applications.An roTextToSpeech component object is created with no parameters:CreateObject(\"roTextToSpeech\") ",
      "descriptionHTML": "The roTextToSpeech component provides text to speech capabilities to applications.An roTextToSpeech component object is created with no parameters:\u003ccode\u003e\u003cspan\u003eCreateObject(\"roTextToSpeech\")\u003c/span\u003e\u003c/code\u003e\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roTextToSpeech",
      "documentationVersion": 2
    },
    "roInvalid": {
      "shortDescription": "Object equivalent for intrinsic type \u0027Invalid\u0027.",
      "interfaceNames": [
        "ifToStr"
      ],
      "eventNames": [],
      "name": "roInvalid",
      "description": " ",
      "descriptionHTML": "\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roInvalid",
      "documentationVersion": 2
    },
    "roParagraphScreen": {
      "shortDescription": "The Paragraph Screen provides a way to display text and selection choices to the user.",
      "interfaceNames": [
        "ifSetMessagePort",
        "ifParagraphScreen",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roParagraphScreenEvent"
      ],
      "name": "roParagraphScreen",
      "description": "This type of screen is frequently used for implementing wizard functionality to guide the user through a specific task. The caller may specify header text which is displayed at the top of the screen and one or more paragraphs of text on the screen. In addition, one or more buttons may be added to the screen to get user input or allow navigation. The screen is designed to automatically format the text, headings and buttons and create the photo-fit for them on screen. Some care must be taken to not provide too much text or clipping may occur. This object is created with no parameters:CreateObject(\"roParagraphScreen\")vbExampleFunction ShowParagraphScreen() As Void port \u003d CreateObject(\"roMessagePort\") screen \u003d CreateObject(\"roParagraphScreen\") screen.SetMessagePort(port) screen.SetTitle(\"[Screen Title]\") screen.AddHeaderText(\"[Header Text]\") screen.AddParagraph(\"[Paragraph text 1 - Text in the paragraph screen is justified to the right and left edges]\") screen.AddParagraph(\"[Paragraph text 2 - Multiple paragraphs may be added to the screen by simply making additional calls]\") screen.AddButton(1, \"[button text 1]\") screen.AddButton(2, \"[button text 2]\") screen.Show() while true msg \u003d wait(0, screen.GetMessagePort()) if type(msg) \u003d \" roParagraphScreenEvent\" exit while endif end while End FunctionImage: roParagraphScreen example results",
      "descriptionHTML": "This type of screen is frequently used for implementing wizard functionality to guide the user through a specific task. The caller may specify header text which is displayed at the top of the screen and one or more paragraphs of text on the screen. In addition, one or more buttons may be added to the screen to get user input or allow navigation. The screen is designed to automatically format the text, headings and buttons and create the photo-fit for them on screen. Some care must be taken to not provide too much text or clipping may occur. \u003cbr class\u003d\"atl-forced-newline\"\u003e \n\u003cac:image ac:height\u003d\"385\" ac:width\u003d\"561\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddav1923bddcf72f5d0fe1ff4aaa4f22ed42.png\" /\u003e\n\u003c/ac:image\u003e \u003cbr class\u003d\"atl-forced-newline\"\u003e This object is created with no parameters:\u003cli\u003eCreateObject(\"roParagraphScreen\")\u003c/li\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Function ShowParagraphScreen() As Void port \u003d CreateObject(\"roMessagePort\") screen \u003d CreateObject(\"roParagraphScreen\") screen.SetMessagePort(port) screen.SetTitle(\"[Screen Title]\") screen.AddHeaderText(\"[Header Text]\") screen.AddParagraph(\"[Paragraph text 1 - Text in the paragraph screen is justified to the right and left edges]\") screen.AddParagraph(\"[Paragraph text 2 - Multiple paragraphs may be added to the screen by simply making additional calls]\") screen.AddButton(1, \"[button text 1]\") screen.AddButton(2, \"[button text 2]\") screen.Show() while true msg \u003d wait(0, screen.GetMessagePort()) if type(msg) \u003d \" roParagraphScreenEvent\" exit while endif end while End Function\n\u003c/ac:plain-text-body\u003eImage: roParagraphScreen example results\u003cbr class\u003d\"atl-forced-newline\"\u003e \n\u003cac:image ac:height\u003d\"383\" ac:width\u003d\"575\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddav85a0073fbd0c2a57a5034ab928da7755.png\" /\u003e\n\u003c/ac:image\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roParagraphScreen",
      "documentationVersion": 2
    },
    "roDeviceInfo": {
      "shortDescription": "The Device Info provides an interface to obtain attributes about the device.",
      "interfaceNames": [
        "ifSetMessagePort",
        "ifDeviceInfo",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roDeviceInfoEvent"
      ],
      "name": "roDeviceInfo",
      "description": "These attributes are not changeable by the script, but may be queried to obtain values for the player. It is common for scripts to need access to the serial number and model info for negotiating with backend services. This object is created with no parameters:CreateObject(\"roDeviceInfo\")vbExampledi \u003d CreateObject(\"roDeviceInfo\") print di.GetModel() print di.GetVersion() print di.GetDeviceUniqueId()On a particular system this generates:N1000  999.99E99999X  20E825000036",
      "descriptionHTML": "These attributes are not changeable by the script, but may be queried to obtain values for the player. It is common for scripts to need access to the serial number and model info for negotiating with backend services. \u003cbr class\u003d\"atl-forced-newline\"\u003e This object is created with no parameters:\u003cli\u003eCreateObject(\"roDeviceInfo\")\u003cbr\u003e\u003cbr\u003e\u003c/li\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n di \u003d CreateObject(\"roDeviceInfo\") print di.GetModel() print di.GetVersion() print di.GetDeviceUniqueId()\n\u003c/ac:plain-text-body\u003eOn a particular system this generates:N1000\u003cbr\u003e 999.99E99999X\u003cbr\u003e 20E825000036",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roDeviceInfo",
      "documentationVersion": 3
    },
    "roFloat": {
      "shortDescription": "Object equivalent for intrinsic type \u0027Float\u0027.",
      "interfaceNames": [
        "ifFloat",
        "ifToStr"
      ],
      "eventNames": [],
      "name": "roFloat",
      "description": "This is useful in the following situations:If any object exposes the ifFloat interface, that object can be used in any expression that expects an intrinsic value.",
      "descriptionHTML": "This is useful in the following situations:\u003cli\u003eIf any object exposes the ifFloat interface, that object can be used in any expression that expects an intrinsic value.\u003c/li\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roFloat",
      "documentationVersion": 2
    },
    "roHMAC": {
      "shortDescription": "The HMAC component provides an interface to the OpenSSL HMAC functions.  These functions generate a Message Authentication Code (MAC) based on a key, in such a way that no one without the key could plausibly generate the MAC.  HMAC uses a digest (hash) algorithm to generate the MAC.",
      "interfaceNames": [
        "ifHMAC"
      ],
      "eventNames": [],
      "name": "roHMAC",
      "description": "For additional information on the OpenSSL HMAC functions, please see: http://www.openssl.org/docs/crypto/hmac.html http://www.openssl.org/docs/crypto/hmac.htmlSupported Digest Algorithms:The supported digest algorithms are the same as those supported by . vbExamplehmac \u003d CreateObject(\"roHMAC\") signature_key \u003d CreateObject(\"roByteArray\") signature_key.fromAsciiString(getKey()) If hmac.setup(\"sha1\", signature_key) \u003d 0 message \u003d CreateObject(\"roByteArray\") message.fromAsciiString(getMessage()) result \u003d hmac.process(message) print result.toBase64String() End If hmac \u003d CreateObject(\"roHMAC\") signature_key \u003d CreateObject(\"roByteArray\") signature_key.fromAsciiString(getKey()) If hmac.setup(\"sha1\", signature_key) \u003d 0 message1 \u003d CreateObject(\"roByteArray\") message1.fromAsciiString(getMessage1()) hmac.update(message1) message2 \u003d CreateObject(\"roByteArray\") message2.fromAsciiString(getMessage2()) hmac.update(message2) result \u003d hmac.final() print result.toBase64String() End If",
      "descriptionHTML": "\u003cac:rich-text-body\u003e\n \u003cp\u003eFor additional information on the OpenSSL HMAC functions, please see:\u003c/p\u003e\n \u003cp\u003e\u003cspan style\u003d\"color: rgb(42,93,176);\"\u003e\u003ca\u003ehttp://www.openssl.org/docs/crypto/hmac.html\u003c/a\u003e\u003c/span\u003e \u003ca href\u003d\"http://www.openssl.org/docs/crypto/hmac.html\"\u003ehttp://www.openssl.org/docs/crypto/hmac.html\u003c/a\u003e\u003c/p\u003e\n\u003c/ac:rich-text-body\u003eSupported Digest Algorithms:The supported digest algorithms are the same as those supported by \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"roEVPDigest\" /\u003e\n\u003c/ac:link\u003e.\u0026nbsp;\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n hmac \u003d CreateObject(\"roHMAC\") signature_key \u003d CreateObject(\"roByteArray\") signature_key.fromAsciiString(getKey()) If hmac.setup(\"sha1\", signature_key) \u003d 0 message \u003d CreateObject(\"roByteArray\") message.fromAsciiString(getMessage()) result \u003d hmac.process(message) print result.toBase64String() End If hmac \u003d CreateObject(\"roHMAC\") signature_key \u003d CreateObject(\"roByteArray\") signature_key.fromAsciiString(getKey()) If hmac.setup(\"sha1\", signature_key) \u003d 0 message1 \u003d CreateObject(\"roByteArray\") message1.fromAsciiString(getMessage1()) hmac.update(message1) message2 \u003d CreateObject(\"roByteArray\") message2.fromAsciiString(getMessage2()) hmac.update(message2) result \u003d hmac.final() print result.toBase64String() End If\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roHMAC",
      "documentationVersion": 2
    },
    "roVideoPlayer": {
      "shortDescription": "The roVideoPlayer component implements a video player with more programmatic control, but less user control than the roVideoScreen component.",
      "interfaceNames": [
        "ifSetMessagePort",
        "ifVideoPlayer",
        "ifHttpAgent",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roVideoPlayerEvent"
      ],
      "name": "roVideoPlayer",
      "description": "The roVideoPlayer can be used in conjunction with the roImageCanvas to do graphical overlays, windowed video, zoom, and programmatic control of playlists and trick play. When using with the roImageCanvas, you can put the roVideoPlayer is at a lower z-order layer than other imageCanvas layers and implement overlays on top of the playing video. Unlike the roVideoScreen component roVideoPlayer does not have automatic trick play modes and built in controls to support that trick play. Any trick play requires the developer to build his own controls using buttons on the roImageCanvas. Note that all the video playback notes under roVideoScreen apply to the roVideoPlayer. The customvideoplayer sample application is a good example of roVideoPlayer usage. This object is created with no parameters:CreateObject(\"roVideoPlayer\") ",
      "descriptionHTML": "The roVideoPlayer can be used in conjunction with the roImageCanvas to do graphical overlays, windowed video, zoom, and programmatic control of playlists and trick play. When using with the roImageCanvas, you can put the roVideoPlayer is at a lower z-order layer than other imageCanvas layers and implement overlays on top of the playing video. \u003cbr class\u003d\"atl-forced-newline\"\u003e Unlike the roVideoScreen component roVideoPlayer does not have automatic trick play modes and built in controls to support that trick play. Any trick play requires the developer to build his own controls using buttons on the roImageCanvas. \u003cbr class\u003d\"atl-forced-newline\"\u003e Note that all the video playback notes under roVideoScreen apply to the roVideoPlayer. \u003cbr class\u003d\"atl-forced-newline\"\u003e The customvideoplayer sample application is a good example of roVideoPlayer usage. \u003cbr class\u003d\"atl-forced-newline\"\u003e This object is created with no parameters:\u003cli\u003eCreateObject(\"roVideoPlayer\")\u003c/li\u003e\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roVideoPlayer",
      "documentationVersion": 1
    },
    "roPinEntryDialog": {
      "shortDescription": "The Pin Entry Dialog is designed to allow the user to enter a numeric PIN for purchasing content.",
      "interfaceNames": [
        "ifSetMessagePort",
        "ifPinEntryDialog",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roPinEntryDialogEvent"
      ],
      "name": "roPinEntryDialog",
      "description": "Users establish a PIN on the partner\u0027s website for purchasing transactions. The roPinEntryDialog allows the script to present the user with a pop-up, modal dialog for PIN entry and then the script can subsequently call the API\u0027s to conclude the purchase transaction. When the last digit is entered, focus jumps to the first button.Image: roPinEntryDialog sampleDiagram: roPinEntryDialog",
      "descriptionHTML": "Users establish a PIN on the partner\u0027s website for purchasing transactions. The roPinEntryDialog allows the script to present the user with a pop-up, modal dialog for PIN entry and then the script can subsequently call the API\u0027s to conclude the purchase transaction. When the last digit is entered, focus jumps to the first button.Image: roPinEntryDialog sample\u003cbr class\u003d\"atl-forced-newline\"\u003e \n\u003cac:image ac:height\u003d\"326\" ac:width\u003d\"575\"\u003e\n \u003cri:attachment ri:filename\u003d\"worddav775c6d36a6f753d5293afa8910cb453b.png\" /\u003e\n\u003c/ac:image\u003eDiagram: roPinEntryDialog\u003cbr class\u003d\"atl-forced-newline\"\u003e\u003cbr\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roPinEntryDialog",
      "documentationVersion": 1
    },
    "roUrlTransfer": {
      "shortDescription": "A roUrlTransfer object transfers data to or from remote servers specified by URLs. It can perform mutual authentication with a web server.",
      "interfaceNames": [
        "ifSetMessagePort",
        "ifUrlTransfer",
        "ifHttpAgent",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roUrlEvent"
      ],
      "name": "roUrlTransfer",
      "description": "This object is created with no parameters:CreateObject(\"roUrlTransfer\")If using HTTPS, you must specify a certificates file by calling SetCertificatesFile() with a .pem file that includes the certificate authority cert (like Verisign, Thawte, etc or your own with OpenSSL) that signed your web server certificate. This must be called before making a request. You can use the Roku standard cert bundle (which contains certificates for most common signing authorities) stored in common:/certs/ca-bundle.crt.Your web server can authenticate that the requested connection is from a Roku Streaming Player and that the request is from your application by taking the following actions:Add the Roku CA certificate to the web server\u0027s certificate authorities keychain. The Roku CA certificate is available in the SDK distribution package, in certs/cacert.pem Configure your web server to reject any connection that does not have a valid client certificate. Check the X-Roku-Reserved-Dev-Id header in the request. It should contain the Developer ID of your application. If it does not, another application on the Roku is attempting to access the server, so the request should be rejected.In order for your web server to perform the steps above to authenticate your Roku Streaming Player, your application needs to call the following functions before performing any https requests:vbExampleobject.SetCertificatesFile(\"common:/certs/ca-bundle.crt\") object.AddHeader(\"X-Roku-Reserved-Dev-Id\", \"\") object.InitClientCertificates()",
      "descriptionHTML": "This object is created with no parameters:\u003cli\u003eCreateObject(\"roUrlTransfer\")\u003c/li\u003eIf using HTTPS, you must specify a certificates file by calling SetCertificatesFile() with a .pem file\u0026nbsp;that includes the certificate authority cert (like Verisign, Thawte, etc or your own with OpenSSL) that signed your web server certificate. This must be called before making a request. You can use the Roku standard cert bundle (which contains certificates for most common signing authorities) stored in common:/certs/ca-bundle.crt.Your web server can authenticate that the requested connection is from a Roku Streaming Player and that the request is from your application by taking the following actions:\u003cli\u003eAdd the Roku CA certificate to the web server\u0027s certificate authorities keychain. The Roku CA certificate is available in the SDK distribution package, in certs/cacert.pem\u003c/li\u003e\n\u003cli\u003eConfigure your web server to reject any connection that does not have a valid client certificate.\u003c/li\u003e\n\u003cli\u003eCheck the X-Roku-Reserved-Dev-Id header in the request. It should contain the Developer ID of your application. If it does not, another application on the Roku is attempting to access the server, so the request should be rejected.\u003c/li\u003eIn order for your web server to perform the steps above to authenticate your Roku Streaming Player, your application needs to call the following functions before performing any https requests:\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n object.SetCertificatesFile(\"common:/certs/ca-bundle.crt\") object.AddHeader(\"X-Roku-Reserved-Dev-Id\", \"\") object.InitClientCertificates() \n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roUrlTransfer",
      "documentationVersion": 6
    },
    "roFont": {
      "shortDescription": "roFont represents a particular font, from a font-family (eg. Arial), with a particular pixel size (e.g 20), and a particular boldness or italicness.",
      "interfaceNames": [
        "ifFont"
      ],
      "eventNames": [],
      "name": "roFont",
      "description": "roFont is used in conjunction with roFontRegistry to create and manage fonts.  Font files are registered with roFontRegistry and then various methods in roFontRegistry can be used to create roFont objects.  Applications should not create roFonts with CreateObject() but should always use roFontRegistry to create them.  roFont objects in turn can be used with .DrawText to draw text on the screen or into bitmaps.Examplescreen \u003d CreateObject(\"roScreen\") white \u003d \u0026hFFFFFFFF blue \u003d \u0026h0000FFFF font_registry \u003d CreateObject(\"roFontRegistry\") font \u003d font_registry.GetDefaultFont() \u0027 Draw white text in a blue rectangle text \u003d \"Hello world\" w \u003d font.GetOneLineWidth(text, screen.GetWidth()) h \u003d font.GetOneLineHeight() x \u003d 200 y \u003d 100 border \u003d 8 screen.DrawRect(x, y, w + 2*border, h + 2*border, blue) screen.DrawText(text, x+border, y+border, white, font)",
      "descriptionHTML": "roFont is used in conjunction with \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"roFontRegistry\" /\u003e\n \u003cac:plain-text-link-body\u003e\n  roFontRegistry \n \u003c/ac:plain-text-link-body\u003e\n\u003c/ac:link\u003eto create and manage fonts.\u0026nbsp; Font files are registered with roFontRegistry and then various methods in roFontRegistry can be used to create roFont objects.\u0026nbsp; Applications should not create roFonts with CreateObject() but should always use roFontRegistry to create them.\u0026nbsp; roFont objects in turn can be used with \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"ifDraw2D\" /\u003e\n\u003c/ac:link\u003e.DrawText to draw text on the screen or into bitmaps.\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n screen \u003d CreateObject(\"roScreen\") white \u003d \u0026amp;hFFFFFFFF blue \u003d \u0026amp;h0000FFFF font_registry \u003d CreateObject(\"roFontRegistry\") font \u003d font_registry.GetDefaultFont() \u0027 Draw white text in a blue rectangle text \u003d \"Hello world\" w \u003d font.GetOneLineWidth(text, screen.GetWidth()) h \u003d font.GetOneLineHeight() x \u003d 200 y \u003d 100 border \u003d 8 screen.DrawRect(x, y, w + 2*border, h + 2*border, blue) screen.DrawText(text, x+border, y+border, white, font)\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roFont",
      "documentationVersion": 4
    },
    "roFontMetrics (deprecated)": {
      "shortDescription": "This class is deprecated.  Developers should use roFont methods (GetOneLineHeight and GetOneLineWidth).",
      "interfaceNames": [
        "ifFontMetrics"
      ],
      "eventNames": [],
      "name": "roFontMetrics (deprecated)",
      "description": "In order to use this object, you must first initialize the roFontMetrics object with a font name that had been previously registered with the roFontRegistry, then the total rendered size of strings in that font can be returned by roFontMetrics.Size(). This object is created with a string that represents the font to use in its size calculations:CreateObject(\"roFontMetrics\", String font)vbExample: simple use of roFontRegistry and roFontMetrics to render a string on the roImageCanvashelloString \u003d \"Hello ImageCanvas\" fontReg \u003d CreateObject(\"roFontRegistry\") fontReg.Register(\"pkg:/fonts/LCDMono.ttf\") font \u003d fontReg.Get(\"LCDMono\",36,50,false) \u0027 36pt, 50 is normal \u0027 weight, no italics fontMetrics \u003d CreateObject(\"roFontMetrics\", font) stringSize \u003d fontMetrics.size(helloString) canvasItem \u003d {Â  Text:helloString TextAttrs:{Color:\"#FFCCCCCC\", Font:font, HAlign:\"HCenter\", VAlign:\"VCenter\", Direction:\"LeftToRight\"} TargetRect:{x:390,y:357, w:stringSize.w,h:stringSize.h} } canvas \u003d CreateObject(\"roImageCanvas\") port \u003d CreateObject(\"roMessagePort\") canvas.SetMessagePort(m.port) \u0027Set opaque background canvas.SetLayer(0, {Color:\"#FF000000\", CompositionMode:\"Source\"}) canvas.SetRequireAllImagesToDraw(true) canvas.SetLayer(1, canvasItem) canvas.Show()   ",
      "descriptionHTML": "In order to use this object, you must first initialize the roFontMetrics object with a font name that had been previously registered with the roFontRegistry, then the total rendered size of strings in that font can be returned by roFontMetrics.Size(). \u003cbr class\u003d\"atl-forced-newline\"\u003e This object is created with a string that represents the font to use in its size calculations:\u003cli\u003eCreateObject(\"roFontMetrics\", String font)\u003c/li\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example: simple use of roFontRegistry and roFontMetrics to render a string on the roImageCanvas\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n helloString \u003d \"Hello ImageCanvas\" fontReg \u003d CreateObject(\"roFontRegistry\") fontReg.Register(\"pkg:/fonts/LCDMono.ttf\") font \u003d fontReg.Get(\"LCDMono\",36,50,false) \u0027 36pt, 50 is normal \u0027 weight, no italics fontMetrics \u003d CreateObject(\"roFontMetrics\", font) stringSize \u003d fontMetrics.size(helloString) canvasItem \u003d {Â\u0026nbsp; Text:helloString TextAttrs:{Color:\"#FFCCCCCC\", Font:font, HAlign:\"HCenter\", VAlign:\"VCenter\", Direction:\"LeftToRight\"} TargetRect:{x:390,y:357, w:stringSize.w,h:stringSize.h} } canvas \u003d CreateObject(\"roImageCanvas\") port \u003d CreateObject(\"roMessagePort\") canvas.SetMessagePort(m.port) \u0027Set opaque background canvas.SetLayer(0, {Color:\"#FF000000\", CompositionMode:\"Source\"}) canvas.SetRequireAllImagesToDraw(true) canvas.SetLayer(1, canvasItem) canvas.Show() \n\u003c/ac:plain-text-body\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/pages/viewpage.action?pageId\u003d1611376",
      "documentationVersion": 2
    },
    "roScreen": {
      "shortDescription": "The roScreen component provides a full screen drawing surface that can be stacked and that you can receive input events from.",
      "interfaceNames": [
        "ifSetMessagePort",
        "ifDraw2D",
        "ifScreen",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roUniversalControlEvent"
      ],
      "name": "roScreen",
      "description": "You will need at least one roScreen component in your 2D game application to draw on and get events from. The origin (0,0) is the top left corner of the screen. The pixels are always RGBA 32 bits. Multiple roScreen components stack, and like other screen components only the top screen is viewable and gets events. An roScreen that is not the top most screen can still be drawn to. Once an roScreen is created, the display stack enters \"Game Mode\", and other screen components cannot be used. Other screen components cannot be intermixed with roScreens as the roScreen display stack is maintained independently from the main screen component display stack. When the final roScreen component is closed, other screen components can be used again. When the roScreen constructor is called, an optional double buffer flag, and an optional resolution can be passed. If the screen is double buffered, two buffers are fully allocated when CreateObject() succeeds. If the screen is single buffered only one buffer is allocated and the \"front\" and \"back\" buffers in method descriptions below are the same buffer. When a screen is created with a different resolution than the output display, it is scaled automatically to the output display resolution. To maintain proper aspect ratio, and take care of the different pixel aspect ratio in HD vs SD; there is a fixed set of bitmap resolutions that are allowed to be created for screens: HD mode screensizes:1280x720PAR\u003d1:1 (default for HD) 854x480 PAR\u003d1:1 useful for higher performance HD games, also for 640x480 games 940x480 PAR\u003d1.1:1 used for displaying a RokuSD (720x480) gamesSD mode screensizes:720x480 PAR\u003d1.1:1 (default for SD) 640x480 PAR\u003d1:1 (used for 640x480 games) 854x626 PAR\u003d1:1 (used for 854x480 HD games)The screen dimensions correspond to the drawable area that applications see. . The dimensions were chosen so that applications do not need to compensate for screen aspect ratio or pixel aspect ratio. It\u0027s likely that when porting games from other platforms, the active game area may be smaller and correspond to more traditional dimensions. In this case, the application can supply letterbox or pillarbox artwork and use an to define the active area. The roRegion will translate and clip graphics to the proper area for the game. Similarly, roRegions are used to describe the left and right pillars for an SD game in HD mode, or the upper and lower letterbox regions for an HD game in SD mode. Games that require more performance should use smaller dimensions. Games should run in HD and SD mode. The screensizes HD 854x480 paired with SD 854x626 and HD 940x480 paired with SD 720x480 were designed for this purpose. The game creates a single active game roRegion to do all graphics operations in. roRegions for pillar or letter boxes are used to fill the rest of the screen area depending on if the app is in HD or SD mode. Please refer to the dfSetupDisplayRegions() function in v30/bslDefender.brs for help in setting up the drawable regions in screen scaling. There are some useful rules of thumb to be aware of to get the best performance when rendering your games:Alpha enabled regions are expensive to render.It is a requirement that the destination be alpha enabled in order for non-rectangular sprites to be properly rendered with transparency. However the sprite used for a background would typically have all pixels be fully nontransparent. Since alpha blending is expensive, a quick way to blit the background in this scenario is to first disable alpha on the screen, manually draw the background, and then enable alpha for the screen before drawing the rest of the sprites.Use smaller resolution images wherever possible. Scaling a large image down at run time is expensive with no benefit to the user.Rendering text with DrawText() is expensiveFortunately, many of these calls are redundant and can be eliminated. The static text for a particular level can be drawn on the background once and this newly created background can be used for refreshing the screen. This will eliminate almost all text redraws. A screen can be created with one of three constructors. If it is created with no parameters, the screen will be single buffered, and its output resolution will match the current display resolution (if the current resolution is specified in the manifest file ui_resolutions entry, otherwise the size will be 720p)CreateObject(\"roScreen\")If a single parameter is passed, it is a Boolean that indicates if the screen is double buffered or not. See SwapBuffers():CreateObject(\"roScreen\", true) \u0027 double buffered screenIf four parameters are passed, the last two specify the screen\u0027s resolution. The dimensions must be one of the screen sizes specified above.CreateObject(\"roScreen\", true, 720, 480) \u0027 db \u0026 SD resvbExample: display an imageScreen\u003dCreateObject(\"roScreen\") dfDrawImage(screen, \"myphoto.jpg\",0,0) Screen.Finish()Example: alpha blendingwhite\u003d\u0026hFFFFFFFF screen0\u003dCreateObject(\"roScreen\") screen0.SetAlphaEnable(true) screen0.Clear(white) screen0.DrawRect(100,100, screen0.GetWidth()-200, screen0.GetHeight()-200, \u0026h80) \u0027 \u0026h80 is black with a 50% alpha mix (RGBA) screen0.finish()",
      "descriptionHTML": "You will need at least one roScreen component in your 2D game application to draw on and get events from. The origin (0,0) is the top left corner of the screen. The pixels are always RGBA 32 bits. Multiple roScreen components stack, and like other screen components only the top screen is viewable and gets events. An roScreen that is not the top most screen can still be drawn to. Once an roScreen is created, the display stack enters \"Game Mode\", and other screen components cannot be used. Other screen components cannot be intermixed with roScreens as the roScreen display stack is maintained independently from the main screen component display stack. When the final roScreen component is closed, other screen components can be used again. \u003cbr class\u003d\"atl-forced-newline\"\u003e When the roScreen constructor is called, an optional double buffer flag, and an optional resolution can be passed. If the screen is double buffered, two buffers are fully allocated when CreateObject() succeeds. If the screen is single buffered only one buffer is allocated and the \"front\" and \"back\" buffers in method descriptions below are the same buffer. When a screen is created with a different resolution than the output display, it is scaled automatically to the output display resolution. \u003cbr\u003e To maintain proper aspect ratio, and take care of the different pixel aspect ratio in HD vs SD; there is a fixed set of bitmap resolutions that are allowed to be created for screens:\u003cbr\u003e HD mode screensizes:\u003cli\u003e1280x720PAR\u003d1:1 (default for HD)\u003c/li\u003e\n\u003cli\u003e854x480 PAR\u003d1:1 useful for higher performance HD games, also for 640x480 games\u003c/li\u003e\n\u003cli\u003e940x480 PAR\u003d1.1:1 used for displaying a RokuSD (720x480) games\u003c/li\u003eSD mode screensizes:\u003cli\u003e720x480 PAR\u003d1.1:1 (default for SD)\u003c/li\u003e\n\u003cli\u003e640x480 PAR\u003d1:1 (used for 640x480 games)\u003c/li\u003e\n\u003cli\u003e854x626 PAR\u003d1:1 (used for 854x480 HD games)\u003c/li\u003eThe screen dimensions correspond to the drawable area that applications see. . The dimensions were chosen so that applications do not need to compensate for screen aspect ratio or pixel aspect ratio. \u003cbr class\u003d\"atl-forced-newline\"\u003e It\u0027s likely that when porting games from other platforms, the active game area may be smaller and correspond to more traditional dimensions. In this case, the application can supply letterbox or pillarbox artwork and use an \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"roRegion\" /\u003e\n\u003c/ac:link\u003e to define the active area. The roRegion will translate and clip graphics to the proper area for the game. Similarly, roRegions are used to describe the left and right pillars for an SD game in HD mode, or the upper and lower letterbox regions for an HD game in SD mode. \u003cbr class\u003d\"atl-forced-newline\"\u003e Games that require more performance should use smaller dimensions. \u003cbr class\u003d\"atl-forced-newline\"\u003e Games should run in HD and SD mode. The screensizes HD 854x480 paired with SD 854x626 and HD 940x480 paired with SD 720x480 were designed for this purpose. The game creates a single active game roRegion to do all graphics operations in. roRegions for pillar or letter boxes are used to fill the rest of the screen area depending on if the app is in HD or SD mode. Please refer to the dfSetupDisplayRegions() function in\u0026nbsp;\n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"Component Architecture\" /\u003e\n \u003cac:plain-text-link-body\u003e\n  v30/bslDefender.brs\n \u003c/ac:plain-text-link-body\u003e\n\u003c/ac:link\u003e for help in setting up the drawable regions in screen scaling. \u003cbr class\u003d\"atl-forced-newline\"\u003e There are some useful rules of thumb to be aware of to get the best performance when rendering your games:\u003cli\u003eAlpha enabled regions are expensive to render.\u003c/li\u003e\u003cbr class\u003d\"atl-forced-newline\"\u003e It is a requirement that the destination be alpha enabled in order for non-rectangular sprites to be properly rendered with transparency. However the sprite used for a background would typically have all pixels be fully nontransparent. Since alpha blending is expensive, a quick way to blit the background in this scenario is to first disable alpha on the screen, manually draw the background, and then enable alpha for the screen before drawing the rest of the sprites.\u003cli\u003eUse smaller resolution images wherever possible. Scaling a large image down at run time is expensive with no benefit to the user.\u003c/li\u003e\u003cli\u003eRendering text with DrawText() is expensive\u003c/li\u003e\u003cbr class\u003d\"atl-forced-newline\"\u003e Fortunately, many of these calls are redundant and can be eliminated. The static text for a particular level can be drawn on the background once and this newly created background can be used for refreshing the screen. This will eliminate almost all text redraws. \u003cbr class\u003d\"atl-forced-newline\"\u003e \u003cbr class\u003d\"atl-forced-newline\"\u003e \u003cbr class\u003d\"atl-forced-newline\"\u003e A screen can be created with one of three constructors. \u003cbr class\u003d\"atl-forced-newline\"\u003e If it is created with no parameters, the screen will be single buffered, and its output resolution will match the current display resolution (if the current resolution is specified in the manifest file ui_resolutions entry, otherwise the size will be 720p)\u003cli\u003eCreateObject(\"roScreen\")\u003c/li\u003e\u003cbr class\u003d\"atl-forced-newline\"\u003e If a single parameter is passed, it is a Boolean that indicates if the screen is double buffered or not. See SwapBuffers():\u003cli\u003eCreateObject(\"roScreen\", true) \u0027 double buffered screen\u003c/li\u003e\u003cbr class\u003d\"atl-forced-newline\"\u003e If four parameters are passed, the last two specify the screen\u0027s resolution. The dimensions must be one of the screen sizes specified above.\u003cli\u003eCreateObject(\"roScreen\", true, 720, 480) \u0027 db \u0026amp; SD res\u003c/li\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example: display an image\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Screen\u003dCreateObject(\"roScreen\") dfDrawImage(screen, \"myphoto.jpg\",0,0) Screen.Finish() \n\u003c/ac:plain-text-body\u003e\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example: alpha blending\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n white\u003d\u0026amp;hFFFFFFFF screen0\u003dCreateObject(\"roScreen\") screen0.SetAlphaEnable(true) screen0.Clear(white) screen0.DrawRect(100,100, screen0.GetWidth()-200, screen0.GetHeight()-200, \u0026amp;h80) \u0027 \u0026amp;h80 is black with a 50% alpha mix (RGBA) screen0.finish()\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roScreen",
      "documentationVersion": 4
    },
    "roDateTime": {
      "shortDescription": "The roDateTime provides an interface to obtain the current date/time for the player and manipulate date/times.",
      "interfaceNames": [
        "ifDateTime"
      ],
      "eventNames": [],
      "name": "roDateTime",
      "description": "This component provides several options for obtaining attributes about the date/time. All times are GMT unless they are converted to the system timezone with a call to the method: toLocalTime(). This object is created with no parameters:CreateObject(\"roDateTime\")The date/time of the object is set to the current system time when the object is created.  The date/time represented by the object can be changed by calling Mark(), FromSeconds(), or FromISO8601String().Exampledate \u003d CreateObject(\"roDateTime\") print \"The date is now \"; date.AsDateString(\"long-date\")",
      "descriptionHTML": "This component provides several options for obtaining attributes about the date/time. All times are GMT unless they are converted to the system timezone with a call to the method: toLocalTime(). \u003cbr class\u003d\"atl-forced-newline\"\u003e This object is created with no parameters:\u003cli\u003eCreateObject(\"roDateTime\")\u003c/li\u003eThe date/time of the object is set to the current system time when the object is created.\u0026nbsp; The date/time represented by the object can be changed by calling Mark(), FromSeconds(), or FromISO8601String().\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n date \u003d CreateObject(\"roDateTime\") print \"The date is now \"; date.AsDateString(\"long-date\")\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roDateTime",
      "documentationVersion": 4
    },
    "roHdmiStatus": {
      "shortDescription": "The HDMI status component provides an interface to the current HDMI operational status.",
      "interfaceNames": [
        "ifSetMessagePort",
        "ifHdmiStatus"
      ],
      "eventNames": [],
      "name": "roHdmiStatus",
      "description": "This component allows you to query the status of the HDMI connection for the device through the ifHdmiStatus interface functions.This component is available in firmware version 7.0. ",
      "descriptionHTML": "This component allows you to query the status of the HDMI connection for the device through the ifHdmiStatus interface functions.\u003cem\u003eThis component is available in firmware version 7.0.\u003c/em\u003e\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roHdmiStatus",
      "documentationVersion": 4
    },
    "roImageMetadata": {
      "shortDescription": "The roImageMetadata component provides developers access to image file metadata included in many .jpg EXIF headers.",
      "interfaceNames": [
        "ifImageMetadata"
      ],
      "eventNames": [],
      "name": "roImageMetadata",
      "description": "roImageMetadata currently only works with local file Urls. This object is created without any arguments:CreateObject(\"roImageMetadata\") EXIF BackgroundEach EXIF tag represents one piece of metadata. Each tag is uniquely identified by a tag number and the IFD in which it was found. All the tags are grouped into a small set of IFDs (Image File Directory). The EXIF specification describes 5 IFDs:Number Name Notes 0 image Tags related to image structure and some additional basic information. 1 thumbnail Tags related to the thumbnail image structure 2 exif Tags related to non-image structure data. I know this is an odd name. Usually stuff like ApertureValue that a digital camera would write. 3 gps Tags related to GPS. 4 interoperability  The associative array returned by GetRawExif() function on the roImageMetadata component is organized as a tree where the first level consists of the IFDs, the second level is the tag name, and the third (leaf) level is tag associative array. Each tag associative array contains the following values:Name Type Notes Tag Integer The tag number. Value String This is a string representation of the data regardless of the underlying data type.Tag values can be one of several types (string, bytes, rational, enum, etc.) We are using a that converts most values to a string. In the future or time permitting, we may add more values to the tag aa to give access to raw bytes. The best way to illustrate how the EXIF data is accessed is through some concrete examples using the data in the reference section below. Assume that the associative array aa contains the results of the GetRawExif() function.To get the camera model: aa.image.model.value To get the gps latitude: aa.gps.GPSLatitude.valueReference For reference here are all the fields from an image taken from my camera (with the addition of GPS attributes I added using Picasa). The format is IFD#, Tag#[Tag Name], Data Format, Value. The Value is a string representation of data. 0, 272[ Model], ASCII,Canon PowerShot SD700 IS 0, 274[ Orientation], Short,top - left 0, 283[ YResolution], Rational,180.00 0, 296[ ResolutionUnit], Short,Inch 0, 305[ Software], ASCII,Picasa 3.0 0, 306[ DateTime], ASCII,2007:08:14 10:06:48 0, 531[ YCbCrPositioning], Short,centered 0, 282[ XResolution], Rational,72.00 1, 259[ Compression], Short,JPEG compression 1, 282[ XResolution], Rational,180.00 1, 283[ YResolution], Rational,180.00 1, 296[ ResolutionUnit], Short,Inch 2,33434[ ExposureTime], Rational,1/320 sec. 2,33437[ FNumber], Rational,f/2.8 2,36864[ ExifVersion], Undefined,Exif Version 2.2 2,36867[ DateTimeOriginal], ASCII,2007:08:14 10:06:48 2,36868[ DateTimeDigitized], ASCII,2007:08:14 10:06:48 2,37121[ ComponentsConfiguration], Undefined,Y Cb Cr - 2,37122[ CompressedBitsPerPixel], Rational,5.00 2,37377[ ShutterSpeedValue], SRational,8.31 EV (1/317 sec.) 2,37378[ ApertureValue], Rational,2.97 EV (f/2.8) 2,37380[ ExposureBiasValue], SRational,0.00 EV 2,37381[ MaxApertureValue], Rational,2.97 EV (f/2.8) 2,37383[ MeteringMode], Short,Pattern 2,37385[ Flash], Short,Flash did not fire, auto mode 2,37386[ FocalLength], Rational,5.8 mm 2,37500[ MakerNote], Undefined,1838 bytes undefined data 2,37510[ UserComment], Undefined, 2,40960[ FlashPixVersion], Undefined,FlashPix Version 1.0 2,40961[ ColorSpace], Short,sRGB 2,40962[ PixelXDimension], Short,2816 2,40963[ PixelYDimension], Short,2112 2,41486[ FocalPlaneXResolution], Rational,12515.56 2,41487[ FocalPlaneYResolution], Rational,12497.04 2,41488[ FocalPlaneResolutionUnit], Short,Inch 2,41495[ SensingMethod], Short,One-chip color area sensor 2,41728[ FileSource], Undefined,DSC 2,41985[ CustomRendered], Short,Normal process 2,41986[ ExposureMode], Short,Auto exposure 2,41987[ WhiteBalance], Short,Auto white balance 2,41988[ DigitalZoomRatio], Rational,1.00 2,41990[ SceneCaptureType], Short,Standard 2,42016[ ImageUniqueID], ASCII,ba6ad9a9d88ffd9576ea6155afa6c6ef 3, 0[ GPSVersionID], Byte,2.2.0.0 3, 1[ GPSLatitudeRef], ASCII,N 3, 2[ GPSLatitude], Rational,40.00, 12.00, 44.79 3, 3[ GPSLongitudeRef], ASCII,W 3, 4[ GPSLongitude], Rational,75.00, 37.00, 47.58 3, 5[ GPSAltitudeRef], Byte,Sea level 4, 1[ InteroperabilityIndex], ASCII,R98 4, 2[ InteroperabilityVersion], Undefined,0100 4, 4097[ RelatedImageWidth], Short,2816 4, 4098[ RelatedImageLength], Short,2112vbExampleREM printAA() is from generalUtils.brs in our sample apps REM and used to print an associative Array Sub SaveExifImage(filename As String) meta \u003d CreateObject(\"roImageMetadata\") meta.SetUrl(filename) print \"------------- GetRawExif() ----------------------\" allexif \u003d meta.GetRawExif() printAA(allexif) print \"------------- GetMetadata() ---------------------\" simple \u003d meta.GetMetadata() printAA(simple) print \"------------- GetRawExifTag() -------------------\" rawexiftag \u003d meta.GetRawExifTag(2,36868) printAA(rawexiftag) print \"------------- GetThumbnail() --------------------\" thumbnail \u003d meta.GetThumbnail() if (thumbnail \u003c\u003e invalid) then if (thumbnail.bytes \u003d invalid) then return end if imgtype \u003d thumbnail.type image_ext\u003d\"\" if (imgtype \u003d \"image/jpeg\" or imgtype \u003d \"jpg\") then image_ext \u003d \"jpg\" else if (imgtype \u003d \"image/png\" or imgtype \u003d \"png\") then image_ext \u003d \"png\" else image_ext \u003d \"jpg\" end if tmp_img \u003d \"tmp:/TmpExifImage\" + \".\" + image_ext if (tmp_img \u003c\u003e invalid) then DeleteFile(tmp_img) end if thumbnail.bytes.Writefile(tmp_img) end if End Sub",
      "descriptionHTML": "roImageMetadata currently only works with local file Urls. \u003cbr class\u003d\"atl-forced-newline\"\u003e This object is created without any arguments:\u003cli\u003eCreateObject(\"roImageMetadata\")\u003c/li\u003e\u0026nbsp;EXIF Background\u003cbr class\u003d\"atl-forced-newline\"\u003e Each EXIF tag represents one piece of metadata. Each tag is uniquely identified by a tag number and the IFD in which it was found. All the tags are grouped into a small set of IFDs (Image File Directory). The EXIF specification describes 5 IFDs:\u003ctbody\u003e\n \u003ctr\u003e\n  \u003ctd\u003e\u003cp\u003eNumber\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003eName\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003eNotes\u003c/p\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003e\u003cp\u003e0\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003eimage\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003eTags related to image structure and some additional basic information.\u003c/p\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003e\u003cp\u003e1\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003ethumbnail\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003eTags related to the thumbnail image structure\u003c/p\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003e\u003cp\u003e2\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003eexif\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003eTags related to non-image structure data. I know this is an odd name. Usually stuff like ApertureValue that a digital camera would write.\u003c/p\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003e\u003cp\u003e3\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003egps\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003eTags related to GPS.\u003c/p\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003e\u003cp\u003e4\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003einteroperability\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003e\u0026nbsp;\u003c/p\u003e\u003c/td\u003e\n \u003c/tr\u003e\n\u003c/tbody\u003e\u003cbr class\u003d\"atl-forced-newline\"\u003e The associative array returned by GetRawExif() function on the roImageMetadata component is organized as a tree where the first level consists of the IFDs, the second level is the tag name, and the third (leaf) level is tag associative array. \u003cbr class\u003d\"atl-forced-newline\"\u003e Each tag associative array contains the following values:\u003ctbody\u003e\n \u003ctr\u003e\n  \u003ctd\u003e\u003cp\u003eName\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003eType\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003eNotes\u003c/p\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003e\u003cp\u003eTag\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003eInteger\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003eThe tag number.\u003c/p\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n  \u003ctd\u003e\u003cp\u003eValue\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003eString\u003c/p\u003e\u003c/td\u003e\n  \u003ctd\u003e\u003cp\u003eThis is a string representation of the data regardless of the underlying data type.\u003c/p\u003e\u003c/td\u003e\n \u003c/tr\u003e\n\u003c/tbody\u003e\u003cbr class\u003d\"atl-forced-newline\"\u003e Tag values can be one of several types (string, bytes, rational, enum, etc.) We are using a that converts most values to a string. In the future or time permitting, we may add more values to the tag aa to give access to raw bytes. \u003cbr class\u003d\"atl-forced-newline\"\u003e The best way to illustrate how the EXIF data is accessed is through some concrete examples using the data in the reference section below. Assume that the associative array aa contains the results of the GetRawExif() function.\u003cli\u003eTo get the camera model: aa.image.model.value\u003c/li\u003e\n\u003cli\u003eTo get the gps latitude: aa.gps.GPSLatitude.value\u003c/li\u003e\u003cbr class\u003d\"atl-forced-newline\"\u003e \u003cstrong\u003eReference\u003c/strong\u003e\u003cbr\u003e For reference here are all the fields from an image taken from my camera (with the addition of GPS attributes I added using Picasa). \u003cbr class\u003d\"atl-forced-newline\"\u003e The format is IFD#, Tag#[Tag Name], Data Format, Value. The Value is a string representation of data. \u003cbr class\u003d\"atl-forced-newline\"\u003e 0, 272[ Model], ASCII,Canon PowerShot SD700 IS\u003cbr\u003e 0, 274[ Orientation], Short,top - left\u003cbr\u003e 0, 283[ YResolution], Rational,180.00\u003cbr\u003e 0, 296[ ResolutionUnit], Short,Inch\u003cbr\u003e 0, 305[ Software], ASCII,Picasa 3.0\u003cbr\u003e 0, 306[ DateTime], ASCII,2007:08:14 10:06:48\u003cbr\u003e 0, 531[ YCbCrPositioning], Short,centered\u003cbr\u003e 0, 282[ XResolution], Rational,72.00\u003cbr\u003e 1, 259[ Compression], Short,JPEG compression\u003cbr\u003e 1, 282[ XResolution], Rational,180.00\u003cbr\u003e 1, 283[ YResolution], Rational,180.00\u003cbr\u003e 1, 296[ ResolutionUnit], Short,Inch\u003cbr\u003e 2,33434[ ExposureTime], Rational,1/320 sec.\u003cbr\u003e 2,33437[ FNumber], Rational,f/2.8\u003cbr\u003e 2,36864[ ExifVersion], Undefined,Exif Version 2.2\u003cbr\u003e 2,36867[ DateTimeOriginal], ASCII,2007:08:14 10:06:48\u003cbr\u003e 2,36868[ DateTimeDigitized], ASCII,2007:08:14 10:06:48\u003cbr\u003e 2,37121[ ComponentsConfiguration], Undefined,Y Cb Cr -\u003cbr\u003e 2,37122[ CompressedBitsPerPixel], Rational,5.00\u003cbr\u003e 2,37377[ ShutterSpeedValue], SRational,8.31 EV (1/317 sec.)\u003cbr\u003e 2,37378[ ApertureValue], Rational,2.97 EV (f/2.8)\u003cbr\u003e 2,37380[ ExposureBiasValue], SRational,0.00 EV\u003cbr\u003e 2,37381[ MaxApertureValue], Rational,2.97 EV (f/2.8)\u003cbr\u003e 2,37383[ MeteringMode], Short,Pattern\u003cbr\u003e 2,37385[ Flash], Short,Flash did not fire, auto mode\u003cbr\u003e 2,37386[ FocalLength], Rational,5.8 mm\u003cbr\u003e 2,37500[ MakerNote], Undefined,1838 bytes undefined data\u003cbr\u003e 2,37510[ UserComment], Undefined,\u003cbr\u003e 2,40960[ FlashPixVersion], Undefined,FlashPix Version 1.0\u003cbr\u003e 2,40961[ ColorSpace], Short,sRGB\u003cbr\u003e 2,40962[ PixelXDimension], Short,2816\u003cbr\u003e 2,40963[ PixelYDimension], Short,2112\u003cbr\u003e 2,41486[ FocalPlaneXResolution], Rational,12515.56\u003cbr\u003e 2,41487[ FocalPlaneYResolution], Rational,12497.04\u003cbr\u003e 2,41488[ FocalPlaneResolutionUnit], Short,Inch\u003cbr\u003e 2,41495[ SensingMethod], Short,One-chip color area sensor\u003cbr\u003e 2,41728[ FileSource], Undefined,DSC\u003cbr\u003e 2,41985[ CustomRendered], Short,Normal process\u003cbr\u003e 2,41986[ ExposureMode], Short,Auto exposure\u003cbr\u003e 2,41987[ WhiteBalance], Short,Auto white balance\u003cbr\u003e 2,41988[ DigitalZoomRatio], Rational,1.00\u003cbr\u003e 2,41990[ SceneCaptureType], Short,Standard\u003cbr\u003e 2,42016[ ImageUniqueID], ASCII,ba6ad9a9d88ffd9576ea6155afa6c6ef\u003cbr\u003e 3, 0[ GPSVersionID], Byte,2.2.0.0\u003cbr\u003e 3, 1[ GPSLatitudeRef], ASCII,N\u003cbr\u003e 3, 2[ GPSLatitude], Rational,40.00, 12.00, 44.79\u003cbr\u003e 3, 3[ GPSLongitudeRef], ASCII,W\u003cbr\u003e 3, 4[ GPSLongitude], Rational,75.00, 37.00, 47.58\u003cbr\u003e 3, 5[ GPSAltitudeRef], Byte,Sea level\u003cbr\u003e 4, 1[ InteroperabilityIndex], ASCII,R98\u003cbr\u003e 4, 2[ InteroperabilityVersion], Undefined,0100\u003cbr\u003e 4, 4097[ RelatedImageWidth], Short,2816\u003cbr\u003e 4, 4098[ RelatedImageLength], Short,2112\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n REM printAA() is from generalUtils.brs in our sample apps REM and used to print an associative Array Sub SaveExifImage(filename As String) meta \u003d CreateObject(\"roImageMetadata\") meta.SetUrl(filename) print \"------------- GetRawExif() ----------------------\" allexif \u003d meta.GetRawExif() printAA(allexif) print \"------------- GetMetadata() ---------------------\" simple \u003d meta.GetMetadata() printAA(simple) print \"------------- GetRawExifTag() -------------------\" rawexiftag \u003d meta.GetRawExifTag(2,36868) printAA(rawexiftag) print \"------------- GetThumbnail() --------------------\" thumbnail \u003d meta.GetThumbnail() if (thumbnail \u0026lt;\u0026gt; invalid) then if (thumbnail.bytes \u003d invalid) then return end if imgtype \u003d thumbnail.type image_ext\u003d\"\" if (imgtype \u003d \"image/jpeg\" or imgtype \u003d \"jpg\") then image_ext \u003d \"jpg\" else if (imgtype \u003d \"image/png\" or imgtype \u003d \"png\") then image_ext \u003d \"png\" else image_ext \u003d \"jpg\" end if tmp_img \u003d \"tmp:/TmpExifImage\" + \".\" + image_ext if (tmp_img \u0026lt;\u0026gt; invalid) then DeleteFile(tmp_img) end if thumbnail.bytes.Writefile(tmp_img) end if End Sub\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roImageMetadata",
      "documentationVersion": 2
    },
    "roOneLineDialog": {
      "shortDescription": "The One Line Dialog is a special type of dialog optimized for single line text.",
      "interfaceNames": [
        "ifOneLineDialog",
        "ifSetMessagePort",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roOneLineDialogEvent"
      ],
      "name": "roOneLineDialog",
      "description": "Unlike the message dialog () which displays formatted multi-line messages, roOneLineDialog displays a single line of text centered for the user. This dialog is optimized for rendering of single-line text strings. It is generally used for displaying text to indicate that an operation is in progress. When the operation completes, the dialog is destroyed and the message dialog disappears. ",
      "descriptionHTML": "Unlike the message dialog (\n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"roMessageDialog\" /\u003e\n\u003c/ac:link\u003e) which displays formatted multi-line messages, roOneLineDialog displays a single line of text centered for the user.\u003cbr\u003eThis dialog is optimized for rendering of single-line text strings. \u003cbr\u003eIt is generally used for displaying text to indicate that an operation is in progress. \u003cbr\u003eWhen the operation completes, the dialog is destroyed and the message dialog disappears.\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roOneLineDialog",
      "documentationVersion": 2
    },
    "roTextureManager": {
      "shortDescription": "The Texture Manager provides a set of API\u0027s for managing an roBitmap cache.",
      "interfaceNames": [
        "ifSetMessagePort",
        "ifHttpAgent",
        "ifTextureManager",
        "ifGetMessagePort"
      ],
      "eventNames": [
        "roTextureRequestEvent"
      ],
      "name": "roTextureManager",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roTextureManager",
      "documentationVersion": 7
    },
    "roAssociativeArray": {
      "shortDescription": "An associative array (also known as a map, dictionary or hash table) allows objects to be associated with string keys.  Associative arrays are built in to the language.  They can be accessed implicitly by using the dot or bracket operators, or by calling functions from the  interface.  For example, the last three lines in this example are equivalent:",
      "interfaceNames": [
        "ifEnum",
        "ifAssociativeArray"
      ],
      "eventNames": [],
      "name": "roAssociativeArray",
      "description": "This object is created with no parameters:CreateObject(\"roAssociativeArray\")It can also be created implicitly by using an Associative Array literal.vbExample\u0027 Creation of associative arrays aa1 \u003d CreateObject(\"roAssociativeArray\") \u0027 ExplicitlyÂ  aa2 \u003d {} \u0027 Implicitly aa3 \u003d { Â  \u0027 With some initial values foo : 12, bar : 13 } \u0027 Assigning values aa1.AddReplace(\"Bright\", \"Script\") \u0027 With explicit function calls aa1.AddReplace(\"TMOL\", 42) aa1.boo \u003d 112 \u0027 With dot operator aa1[\"baz\"] \u003d \"abcdefg\" \u0027 With bracket operator Â  \u0027 Accessing values print aa1.Bright \u0027 With dot operator (will print \u0027Script\u0027) print aa1.Lookup(\"TMOL\") \u0027 With function call (will print 42) print aa1[\"boo\"] \u0027 With bracket operator (will print 112) Â  \u0027 Using ifEnum interface to walk through keys in an associative array for each key in aa1 print \" \" key \"\u003d\" aa1[key] end for Â  Â ",
      "descriptionHTML": "This object is created with no parameters:\u003cli\u003eCreateObject(\"roAssociativeArray\")\u003c/li\u003eIt can also be created implicitly by using an Associative Array literal.\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n \u0027 Creation of associative arrays aa1 \u003d CreateObject(\"roAssociativeArray\") \u0027 ExplicitlyÂ\u0026nbsp; aa2 \u003d {} \u0027 Implicitly aa3 \u003d { Â\u0026nbsp; \u0027 With some initial values foo : 12, bar : 13 } \u0027 Assigning values aa1.AddReplace(\"Bright\", \"Script\") \u0027 With explicit function calls aa1.AddReplace(\"TMOL\", 42) aa1.boo \u003d 112 \u0027 With dot operator aa1[\"baz\"] \u003d \"abcdefg\" \u0027 With bracket operator Â\u0026nbsp; \u0027 Accessing values print aa1.Bright \u0027 With dot operator (will print \u0027Script\u0027) print aa1.Lookup(\"TMOL\") \u0027 With function call (will print 42) print aa1[\"boo\"] \u0027 With bracket operator (will print 112) Â\u0026nbsp; \u0027 Using ifEnum interface to walk through keys in an associative array for each key in aa1 print \" \" key \"\u003d\" aa1[key] end for Â\u0026nbsp; Â\u0026nbsp;\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roAssociativeArray",
      "documentationVersion": 2
    },
    "roSprite": {
      "shortDescription": "The roSprite object cannot be created directly with a CreateObject() call. It must be associated with a managing roCompositor object. This association is implicitly created by creating an roSprite object with the roCompositor methods NewSprite() or NewAnimatedSprite().",
      "interfaceNames": [
        "ifSprite"
      ],
      "eventNames": [],
      "name": "roSprite",
      "description": "The roSprite object cannot be created directly with a CreateObject() call. It must be associated with a managing roCompositor object. This association is implicitly created by creating an roSprite object with the roCompositor methods NewSprite() or NewAnimatedSprite(). ",
      "descriptionHTML": "The roSprite object cannot be created directly with a CreateObject() call. It must be associated with a managing roCompositor object. This association is implicitly created by creating an roSprite object with the roCompositor methods NewSprite() or NewAnimatedSprite().\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roSprite",
      "documentationVersion": 1
    },
    "roDataGramSocket": {
      "shortDescription": "The roDataGramSocket component enables Brightscript apps to send and receive UDP packets. The interface is modeled on and works much like standard Berkeley sockets.",
      "interfaceNames": [
        "ifSocket",
        "ifSocketAsync",
        "ifSocketCastOption",
        "ifSocketStatus",
        "ifSocketOption"
      ],
      "eventNames": [
        "roSocketEvent"
      ],
      "name": "roDataGramSocket",
      "description": "This object is created without any arguments:CreateObject(\"roDataGramSocket\")vbExampleÂ \u0027 UDP 2-way peer-to-peer asynchronous comm on port 54321 \u0027 periodically sends out a message to a specific address and port \u0027 prints any message it receives Function UDPPeer() msgPort \u003d createobject(\"roMessagePort\") udp \u003d createobject(\"roDatagramSocket\") udp.setMessagePort(msgPort) \u0027notifications for udp come to msgPort addr \u003d createobject(\"roSocketAddress\") addr.setPort(54321) udp.setAddress(addr) \u0027 bind to all host addresses on port 54321 addr.SetHostName(\"10.1.1.1\") udp.setSendToAddress(addr) \u0027 peer IP and port udp.notifyReadable(true) timeout \u003d 1 * 10 * 1000 \u0027 ten seconds in milliseconds uniqueDev \u003d createobject(\"roDeviceInfo\").GetDeviceUniqueId() message \u003d \"Datagram from \" + uniqueDev udp.sendStr(message) continue \u003d udp.eOK() While continue event \u003d wait(timeout, msgPort) If type(event)\u003d\"roSocketEvent\" If event.getSocketID()\u003dudp.getID() If udp.isReadable() message \u003d udp.receiveStr(512) \u0027 max 512 characters print \"Received message: \u0027\"; message; \"\u0027\" End If End If Else If event\u003dinvalid print \"Timeout\" udp.sendStr(message) \u0027 periodic send End If End While udp.close() \u0027 would happen automatically as udp goes out of scope End Function",
      "descriptionHTML": "This object is created without any arguments:\u003cli\u003eCreateObject(\"roDataGramSocket\")\u003c/li\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n Â\u0026nbsp;\u0027 UDP 2-way peer-to-peer asynchronous comm on port 54321 \u0027 periodically sends out a message to a specific address and port \u0027 prints any message it receives Function UDPPeer() msgPort \u003d createobject(\"roMessagePort\") udp \u003d createobject(\"roDatagramSocket\") udp.setMessagePort(msgPort) \u0027notifications for udp come to msgPort addr \u003d createobject(\"roSocketAddress\") addr.setPort(54321) udp.setAddress(addr) \u0027 bind to all host addresses on port 54321 addr.SetHostName(\"10.1.1.1\") udp.setSendToAddress(addr) \u0027 peer IP and port udp.notifyReadable(true) timeout \u003d 1 * 10 * 1000 \u0027 ten seconds in milliseconds uniqueDev \u003d createobject(\"roDeviceInfo\").GetDeviceUniqueId() message \u003d \"Datagram from \" + uniqueDev udp.sendStr(message) continue \u003d udp.eOK() While continue event \u003d wait(timeout, msgPort) If type(event)\u003d\"roSocketEvent\" If event.getSocketID()\u003dudp.getID() If udp.isReadable() message \u003d udp.receiveStr(512) \u0027 max 512 characters print \"Received message: \u0027\"; message; \"\u0027\" End If End If Else If event\u003dinvalid print \"Timeout\" udp.sendStr(message) \u0027 periodic send End If End While udp.close() \u0027 would happen automatically as udp goes out of scope End Function \n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roDataGramSocket",
      "documentationVersion": 6
    },
    "roBitmap": {
      "shortDescription": "The roBitmap component contains image data and provides an interface (ifDraw2D) for drawing. Bitmaps can be used for a variety of purposes, such as for sprites, compositing, or as double buffers.",
      "interfaceNames": [
        "ifDraw2D"
      ],
      "eventNames": [],
      "name": "roBitmap",
      "description": "roBitmaps store four color channels: red, green, blue, and alpha, with 32-bits per pixel. They can be any arbitrary size up to 2048x2048. However, the maximum size bitmap uses 16MB of memory, so there are practical memory limitations which would compel smaller bitmap sizes.  Coordinates (x,y) for 2D bitmaps have an origin (0,0) at the top left. roBitmap is always offscreen. The top roScreen is the only ifDraw2D surface which is displayed. roBitmap represents something that can be drawn onto, as well as something that can be drawn.Drawing operations into a roBitmap (or other surface with ifDraw2D interface, such as an ) are clipped so the only the part that is within its bounds is rendered. X,Y coordinates that specify a location in a bitmap to render to (for example, as used by DrawObject() or DrawText() ) may be positive or negative. Negative implies that the left and top of the rendered object will be clipped.The same bitmap cannot be used as a source and a destination in a single DrawObject() call.There are limitations when using the onscreen bitmap as a source. For example, Alpha blending may not work.An empty roBitmap object can be created with CreateObject():CreateObject(\"roBitmap\", bitmapProps As Object)bitmapProps is an roAssociativeArray with Integers width, height, and Boolean AlphaEnable parameters. The contents of an empty RoBitmap are initialized to zero (transparent black).Example:CreateObject(\"roBitmap\", {width:10, height:10, AlphaEnable:false})An roBitmap can also load its image data from a file:CreateObject(\"roBitmap\", String filename) vbExample\u0027 \u0027 Draw three bitmaps as fast as we can \u0027 Screen\u003dCreateObject(\"roScreen\") bm1\u003dCreateObject(\"roBitmap\", \"myphoto1.jpg\") bm2\u003dCreateObject(\"roBitmap\", \"myphoto2.jpg\") bm3\u003dCreateObject(\"roBitmap\", \"myphoto3.jpg\") bmarray\u003d[bm1, bm2, bm3] While true For each bitmap in bmarray Screen.DrawObject(0,0, bitmap) Screen.Finish() End for End WhilevbExample: double buffering with roBitmapscreen1\u003dCreateObject(\"roScreen\") off\u003dcreateobject(\"roBitmap\", {width:1280, height:720, AlphaEnable: false}) off.Clear(white) dfDrawImage(off, \"myimage.png\",50,50) off.DrawRect(150,150, 200, 200, \u0026hFF) \u0027 black, alpha: all source screen1.drawObject(0,0,off) Screen1.Finish()  ",
      "descriptionHTML": "roBitmaps store four color channels: red, green, blue, and alpha, with 32-bits per pixel. They can be any arbitrary size up to 2048x2048. However, the maximum size bitmap uses 16MB of memory, so there are practical memory limitations which would compel smaller bitmap sizes. \u0026nbsp;Coordinates (x,y) for 2D bitmaps have an origin (0,0) at the top left.\u0026nbsp;roBitmap is always offscreen. The top roScreen is the only ifDraw2D surface which is displayed.\u0026nbsp;roBitmap represents something that can be drawn onto, as well as something that can be drawn.Drawing operations into a roBitmap (or other surface with ifDraw2D interface, such as an \n\u003cac:link\u003e\n \u003cri:page ri:content-title\u003d\"roScreen\" /\u003e\n\u003c/ac:link\u003e) are clipped so the only the part that is within its bounds is rendered. X,Y coordinates that specify a location in a bitmap to render to (for example, as used by DrawObject() or DrawText() ) may be positive or negative. Negative implies that the left and top of the rendered object will be clipped.The same bitmap cannot be used as a source and a destination in a single DrawObject() call.There are limitations when using the onscreen bitmap as a source. For example, Alpha blending may not work.An empty roBitmap object can be created with CreateObject():\u003cli\u003eCreateObject(\"roBitmap\", bitmapProps As Object)\u003c/li\u003ebitmapProps is an roAssociativeArray with Integers width, height, and Boolean AlphaEnable parameters. The contents of an empty RoBitmap are initialized to zero\u0026nbsp;(transparent black).Example:CreateObject(\"roBitmap\", {width:10, height:10, AlphaEnable:false})An roBitmap can also load its image data from a file:\u003cli\u003eCreateObject(\"roBitmap\", String filename)\u0026nbsp;\u003cbr\u003e\u003cbr\u003e\u003c/li\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n \u0027 \u0027 Draw three bitmaps as fast as we can \u0027 Screen\u003dCreateObject(\"roScreen\") bm1\u003dCreateObject(\"roBitmap\", \"myphoto1.jpg\") bm2\u003dCreateObject(\"roBitmap\", \"myphoto2.jpg\") bm3\u003dCreateObject(\"roBitmap\", \"myphoto3.jpg\") bmarray\u003d[bm1, bm2, bm3] While true For each bitmap in bmarray Screen.DrawObject(0,0, bitmap) Screen.Finish() End for End While \n\u003c/ac:plain-text-body\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example: double buffering with roBitmap\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n screen1\u003dCreateObject(\"roScreen\") off\u003dcreateobject(\"roBitmap\", {width:1280, height:720, AlphaEnable: false}) off.Clear(white) dfDrawImage(off, \"myimage.png\",50,50) off.DrawRect(150,150, 200, 200, \u0026amp;hFF) \u0027 black, alpha: all source screen1.drawObject(0,0,off) Screen1.Finish()\n\u003c/ac:plain-text-body\u003e\u0026nbsp;\u0026nbsp;",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roBitmap",
      "documentationVersion": 4
    },
    "roTuner": {
      "shortDescription": "The roTuner object provides an interface with the broadcast/cable tuner in a Roku TV.",
      "interfaceNames": [
        "ifTuner"
      ],
      "eventNames": [
        "roTunerEvent"
      ],
      "name": "roTuner",
      "description": "The roTuner object is created with no arguments:createObject(\"roTuner\")",
      "descriptionHTML": "The roTuner object is created with no arguments:\u003ccode\u003ecreateObject(\"roTuner\")\u003c/code\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roTuner",
      "documentationVersion": 7
    },
    "roEVPDigest": {
      "shortDescription": "The EVP Digest component provides an interface to the OpenSSL EVP library of message digest algorithms. The EVP library provides a high-level interface to cryptographic hash functions.",
      "interfaceNames": [
        "ifEVPDigest"
      ],
      "eventNames": [],
      "name": "roEVPDigest",
      "description": "roEVPDigest processes an arbitrary amount of data and generates a hash of the data, using a selected algorithm.For additional information on the OpenSSL library of message digest algorithms see: http://www.openssl.org/docs/apps/dgst.html List of Supported Digest Algorithms:md5 - MD5 message digest algorithm (default) sha1 - SHA-1 message digest algorithm sha224 - SHA-2, 224 bit variant sha256 - SHA-2, 256 bit variant sha384 - SHA-2, 384 bit variant sha512 - SHA-2, 512 bit variant vbExample: SHA1 Message Digest with roEVPDigestba \u003d CreateObject(\"roByteArray\") \u0027 ...populate bytearray... digest \u003d CreateObject(\"roEVPDigest\") digest.Setup(\"sha1\") result \u003d digest.Process(ba) print resultvbExample: MD5 Message Digest with roEVPDigestba1 \u003d CreateOjbect(\"roByteArray\") \u0027 ...populate ba1... ba2 \u003d CreateObject(\"roByteArray\") ba2.FromAsciiString(somestring) digest \u003d CreateObject(\"roEVPDigest\") digest.Setup(\"md5\") digest.Update(ba1) digest.Update(ba2) result \u003d digest.Final() print result",
      "descriptionHTML": "roEVPDigest processes an arbitrary amount of data and generates a hash of the data, using a selected algorithm.\u003cac:rich-text-body\u003e\n For additional information on the OpenSSL library of message digest algorithms see: \n \u003cbr class\u003d\"atl-forced-newline\"\u003e \n \u003ca href\u003d\"http://www.openssl.org/docs/apps/dgst.html\"\u003ehttp://www.openssl.org/docs/apps/dgst.html\u003c/a\u003e\n\u003c/ac:rich-text-body\u003e\u0026nbsp;List of Supported Digest Algorithms:\u003cli\u003emd5 - MD5 message digest algorithm (default)\u003c/li\u003e\n\u003cli\u003esha1 - SHA-1 message digest algorithm\u003c/li\u003e\n\u003cli\u003esha224 - SHA-2, 224 bit variant\u003c/li\u003e\n\u003cli\u003esha256 - SHA-2, 256 bit variant\u003c/li\u003e\n\u003cli\u003esha384 - SHA-2, 384 bit variant\u003c/li\u003e\n\u003cli\u003esha512 - SHA-2, 512 bit variant\u003c/li\u003e\u0026nbsp;\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example: SHA1 Message Digest with roEVPDigest\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n ba \u003d CreateObject(\"roByteArray\") \u0027 ...populate bytearray... digest \u003d CreateObject(\"roEVPDigest\") digest.Setup(\"sha1\") result \u003d digest.Process(ba) print result \n\u003c/ac:plain-text-body\u003e\u003cac:parameter ac:name\u003d\"language\"\u003e\n vb\n\u003c/ac:parameter\u003e\n\u003cac:parameter ac:name\u003d\"title\"\u003e\n Example: MD5 Message Digest with roEVPDigest\n\u003c/ac:parameter\u003e\n\u003cac:plain-text-body\u003e\n ba1 \u003d CreateOjbect(\"roByteArray\") \u0027 ...populate ba1... ba2 \u003d CreateObject(\"roByteArray\") ba2.FromAsciiString(somestring) digest \u003d CreateObject(\"roEVPDigest\") digest.Setup(\"md5\") digest.Update(ba1) digest.Update(ba2) result \u003d digest.Final() print result\n\u003c/ac:plain-text-body\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roEVPDigest",
      "documentationVersion": 3
    },
    "roString": {
      "shortDescription": "Object equivalent for intrinsic type \u0027String\u0027.",
      "interfaceNames": [
        "ifToStr",
        "ifStringOps",
        "ifString"
      ],
      "eventNames": [],
      "name": "roString",
      "description": "This is useful in the following situations:When an object is needed, instead of an intrinsic value. For example, \"roList\" maintains a list of objects. If an String is added to roList, it will be automatically wrapped in an roString by the language interpreter. When a function that expects a BrightScript Component as a parameter is passed a string, BrightScript automatically creates the equivalent BrightScript Component. If any object exposes the ifString interface, that object can be used in any expression that expects an intrinsic value.",
      "descriptionHTML": "This is useful in the following situations:\u003cli\u003eWhen an object is needed, instead of an intrinsic value. For example, \"roList\" maintains a list of objects. If an String is added to roList, it will be automatically wrapped in an roString by the language interpreter. When a function that expects a BrightScript Component as a parameter is passed a string, BrightScript automatically creates the equivalent BrightScript Component.\u003c/li\u003e\n\u003cli\u003eIf any object exposes the ifString interface, that object can be used in any expression that expects an intrinsic value.\u003c/li\u003e",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roString",
      "documentationVersion": 2
    }
  },
  "Interfaces": {
    "ifSpringboardScreen": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "allow",
              "type": "Boolean"
            }
          ],
          "name": "AllowNavRight",
          "description": "Enable or disable navigating RIGHT on the springboard screen.  The defautl is enabled.  When navigating is disabled, pressing RIGHT will merely play a deadend sound.  When navigating is enabled, pressing RIGHT will send an roSpringboardScreenEvent / isRemoteKeyPressed() event to the screen\u0027s message port."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "allow",
              "type": "Boolean"
            }
          ],
          "name": "AllowNavRewind",
          "description": "Enable or disable sending the rewind remote event to script. The defautl is disabled.  When navigating is disabled, pressing REWIND will merely play a deadend sound.  When navigating is enabled, pressing LEFT will send an roSpringboardScreenEvent / isRemoteKeyPressed() event to the screen\u0027s message port."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "buttonID",
              "type": "Integer"
            },
            {
              "name": "userRating",
              "type": "Integer"
            },
            {
              "name": "aggregateRating",
              "type": "Integer"
            }
          ],
          "name": "AddRatingButton",
          "description": "Adds a star rating button to the screen. The rating is specified as an integer between 1-100 which represents the rating percentage to be displayed.  A value of 1-20 corresponds to 1 star, 21-40 corresponds to 2 stars, etc. This button is displayed in the menu area of the screen and appears in the order added. The userRating specifies the value the user rated the title, while the aggregate Rating represents the total for all users. The userRating takes precedence and determines the color of the buttons if set. The aggregateRating may display half-stars. When pressed, the button returns the userRating in the event data field."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "allow",
              "type": "Boolean"
            }
          ],
          "name": "AllowUpdates",
          "description": "When adding multiple buttons to the springboard dynamically, sometimes it is desirable to defer screen updates temporarily to avoid flashing. Call AllowUpdates(false), add several buttons and then call AllowUpdates(true) to refresh the display."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "buttonID",
              "type": "Integer"
            },
            {
              "name": "thumbRating",
              "type": "Integer"
            },
            {
              "name": "tipText",
              "type": "Object"
            }
          ],
          "name": "AddThumbsUpDownButtonWithTips",
          "description": "Similar to addThumbsUpDownButton().  tipText is an array of strings (size 2) which lets the script override the default tip text [\"didn\u0027t like it\", \"liked it\"]."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "displayMode",
              "type": "String"
            }
          ],
          "name": "SetDisplayMode",
          "description": "Sets the mode for displaying slideshow images. This allows images to be either scaled to completely fill the screen (scale-to-fill) or scaled to fit inside the screen (scale-to-fit) while maintaining aspect ratio. Valid display modes are:"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "sdPosterURL",
              "type": "String"
            },
            {
              "name": "hdPosterURL",
              "type": "String"
            }
          ],
          "name": "PrefetchPoster",
          "description": "Allows the screen to pre-fetch the poster images before the screen is displayed as a display optimization technique. This is useful when doing left-right navigation between springboard screens. The pre-fetch is done, loading the image cache and then the screen is displayed."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "content",
              "type": "Object"
            }
          ],
          "name": "SetContent",
          "description": "Set the content to be displayed on the Springboard Screen. The content is passed by the caller as a object describing the attributes for the title.  Internally content meta-data is stored as an ."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "CountButtons",
          "description": "Returns the count of the number of buttons in the button menu on the Springboard."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "SetBreadcrumbEnabled",
          "description": "Show or hide the breadcrumb text in the title area."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "ClearButtons",
          "description": "Clears all of the buttons from the screen and resets the array of buttons back to default with no buttons set."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "style",
              "type": "String"
            }
          ],
          "name": "SetPosterStyle",
          "description": "Set the display style for the springboard screen. The default style is dependent on the content type of the poster, but this method enables the override of the screen type to one of the following:"
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "buttonID",
              "type": "Integer"
            },
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "AddButton",
          "description": "Adds a button to the screen identified by the title and ID provided. The buttons are displayed in a standard location on the screen and appear in the order added. The ID is defined by the developer and used to uniquely identify the button instance. When the button is pressed, the script will receive an event from the application containing the ID of the button pressed and allowing the script to perform the desired action for that case."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "allow",
              "type": "Boolean"
            }
          ],
          "name": "AllowNavLeft",
          "description": "Enable or disable navigating LEFT on the springboard screen. The defautl is enabled.  When navigating is disabled, pressing LEFT will merely play a deadend sound.  When navigating is enabled, pressing LEFT will send an roSpringboardScreenEvent / isRemoteKeyPressed() event to the screen\u0027s message port."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "displayMode",
              "type": "String"
            }
          ],
          "name": "SetAdDisplayMode",
          "description": "Sets the scale mode for displaying ad images. Valid display modes are:"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "UseStableFocus",
          "description": "When enable is true, keeps the highlighted button the same on subsequent calls to Show().  When enable is false, resets the focused button to the top button on subsequent calls to Show().  Default is false.  Generally, you will want to use the default value of false, because when navigating through springboards (using the left and right arrows) the user will want the top button to be highlighted.  Can be useful to set to true when you wish to update other dynamic text on the same screenboard and keep the highlighted button static."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "SetStaticRatingEnabled",
          "description": "Sets the display of the static rating stars on or off. Defaults to enabled. When you want to use the ratings button or disable ratings on screen, set this value to false to remove this control from the screen. The extra space available will be used to display additional actors."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "progress",
              "type": "Integer"
            },
            {
              "name": "max",
              "type": "Integer"
            }
          ],
          "name": "SetProgressIndicator",
          "description": "Sets the progress indicator to be progress/max complete.  max should be greater than zero, and progress should be greater than or equal to zero and less than or equal to max."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "allow",
              "type": "Boolean"
            }
          ],
          "name": "AllowNavFastForward",
          "description": "Enable or disable sending the fast forward remote event to script. The defautl is disabled.  When navigating is disabled, pressing FAST FORWARD will merely play a deadend sound.  When navigating is enabled, pressing LEFT will send an roSpringboardScreenEvent / isRemoteKeyPressed() event to the screen\u0027s message port."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "SetProgressIndicatorEnabled",
          "description": "Displays a progress indicator.  Note that this will only work if the content type is audio (i.e, contentType \u003d\u003d audio)."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "sdAdURL",
              "type": "String"
            },
            {
              "name": "hdAdURL",
              "type": "String"
            }
          ],
          "name": "SetAdURL",
          "description": "Set the URL of the banner Ad image to be displayed on the springboard screen. This is currently only valid for the \"video\" style of springboard screen. Banner Ad sizes are as follows:"
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "buttonID",
              "type": "Integer"
            },
            {
              "name": "thumbRating",
              "type": "Integer"
            }
          ],
          "name": "AddThumbsUpDownButton",
          "description": "Adds a button to the screen identified buttonID provided. This is just a special type of button that is displayed in the standard location on the screen and appears in the order added sequenced with other buttons. The ID is defined by the developer and used to uniquely identify the button instance. When the button is pressed, the script will receive an event from the application indicating containing the ID of the button pressed and allowing the script to perform the desired action for that case. The thumbRating takes the values of -1, 0, or 1 and corresponds to thumbs down, no rating, and thumbs up."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "selectable",
              "type": "Boolean"
            }
          ],
          "name": "SetAdSelectable",
          "description": "Sets the banner ad to be selectable or display only. By default the banner ad is not selectable. When enabled the user can navigate and move focus to the banner image. When selected, the screen will receive an roPosterScreenEvent and the msg will return true for isAdSelected()."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "SetTitle",
          "description": "Set the title for the screen to the specified string."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "style",
              "type": "String"
            }
          ],
          "name": "SetDescriptionStyle",
          "description": "Set the springboard style for the poster screen. Styles allow the poster screen to look differently for different types of content or different usage. The following is the list of valid screen styles:"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "location1",
              "type": "String"
            },
            {
              "name": "location2",
              "type": "String"
            }
          ],
          "name": "SetBreadcrumbText",
          "description": "Breadcrumbs allow the application to display a two-part navigational title which shows the current and the previous locations in the application hierarchy (e.g. TV  Friends). If both location values are set, the application will display the title in breadcrumb format. If only the first location is set, the application will display the specified text in the title area like the SetTitle API call."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Show",
          "description": "Display or refresh the screen after initial creation or state changes."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Close",
          "description": "Close the screen and delete the associated object. Useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
        }
      ],
      "name": "ifSpringboardScreen",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSpringboardScreen",
      "documentationVersion": 11
    },
    "ifKeyboardScreen": {
      "methods": [
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "SetText",
          "description": "Sets the default text displayed in the keyboard entry field. Text is selected by default, so that if the user begins to enter text, the default text is replaced. If the user presses the action button (e.g. Search), the default text is used as the entry."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "ClearButtons",
          "description": "Removes all buttons from the screen."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "maxLen",
              "type": "Integer"
            }
          ],
          "name": "SetMaxLength",
          "description": "Set the maximum length for text entry. The default is 20 characters."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "id",
              "type": "Integer"
            },
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "AddButton",
          "description": "Adds a button to the screen identified by the title and ID provided. The buttons are at the bottom of the screen and appear in the order added. When the button is pressed, the script will receive an event from the application indicating the ID if the button pressed."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "isSecure",
              "type": "Boolean"
            }
          ],
          "name": "SetSecureText",
          "description": "If isSecure is true the user entered text is obscured with bullet characters. If false, it is treated as plain text. The default is false."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Show",
          "description": "Display or refresh the screen after creation or state changes."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Close",
          "description": "Close the screen and delete the associated object. Useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "SetTitle",
          "description": "Set the title for the screen to the specified string."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "displayText",
              "type": "String"
            }
          ],
          "name": "SetDisplayText",
          "description": "Sets the descriptive text displayed to the user for prompting regarding the required entry."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetText",
          "description": "Returns the current value in the keyboard text entry field."
        }
      ],
      "name": "ifKeyboardScreen",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifKeyboardScreen",
      "documentationVersion": 5
    },
    "ifRegex": {
      "methods": [
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "str",
              "type": "String"
            },
            {
              "name": "replacement",
              "type": "String"
            }
          ],
          "name": "Replace",
          "description": "Replaces the first occurrence of a matching pattern in str with replacement and returns the result."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "str",
              "type": "String"
            }
          ],
          "name": "IsMatch",
          "description": "Returns true if str matches the matching pattern."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "str",
              "type": "String"
            }
          ],
          "name": "Split",
          "description": "Uses the matching pattern as a separator and splits the string on the separator boundaries."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "str",
              "type": "String"
            }
          ],
          "name": "Match",
          "description": "Returns an roArray of matched substrings from str."
        },
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "str",
              "type": "String"
            },
            {
              "name": "replacement",
              "type": "String"
            }
          ],
          "name": "ReplaceAll",
          "description": "Similar to Replace() but replaces all occurrences of the matching pattern, not just the first one."
        }
      ],
      "name": "ifRegex",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifRegex",
      "documentationVersion": 5
    },
    "ifDraw2D": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            },
            {
              "name": "x",
              "type": "Integer"
            },
            {
              "name": "y",
              "type": "Integer"
            },
            {
              "name": "rgba",
              "type": "Integer"
            },
            {
              "name": "font",
              "type": "Object"
            }
          ],
          "name": "DrawText",
          "description": "Draws the text at position (x,y) using the specified RGBA color and font object."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetWidth",
          "description": "Returns the width of the bitmap in pixels."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "GetAlphaEnable",
          "description": "Returns true if alpha blending is enabled."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "rgba",
              "type": "Integer"
            }
          ],
          "name": "Clear",
          "description": "Clear the bitmap, and fill with the specified RGBA color."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "x",
              "type": "Integer"
            },
            {
              "name": "y",
              "type": "Integer"
            },
            {
              "name": "size",
              "type": "Float"
            },
            {
              "name": "rgba",
              "type": "Integer"
            }
          ],
          "name": "DrawPoint",
          "description": "Draws a point at (x,y) with the given size and RGBA color."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "x",
              "type": "Integer"
            },
            {
              "name": "y",
              "type": "Integer"
            },
            {
              "name": "scaleX",
              "type": "Float"
            },
            {
              "name": "scaleY",
              "type": "Float"
            },
            {
              "name": "src",
              "type": "Object"
            }
          ],
          "name": "DrawScaledObject",
          "description": "Draw the source object, where src is an or an object, at position x,y, scaled in the x direction by scaleX and in the y direction by scaleY. "
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "x",
              "type": "Integer"
            },
            {
              "name": "y",
              "type": "Integer"
            },
            {
              "name": "width",
              "type": "Integer"
            },
            {
              "name": "height",
              "type": "Integer"
            }
          ],
          "name": "GetByteArray",
          "description": "Returns an roByteArray representing the RGBA pixel values for the rectangle described by the parameters."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "xStart",
              "type": "Integer"
            },
            {
              "name": "yStart",
              "type": "Integer"
            },
            {
              "name": "xEnd",
              "type": "Integer"
            },
            {
              "name": "yEnd",
              "type": "Integer"
            },
            {
              "name": "rgba",
              "type": "Integer"
            }
          ],
          "name": "DrawLine",
          "description": "Draw a line from (xStart, yStart) to (xEnd, yEnd) with RGBA color."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "x",
              "type": "Integer"
            },
            {
              "name": "y",
              "type": "Integer"
            },
            {
              "name": "theta",
              "type": "Float"
            },
            {
              "name": "src",
              "type": "Object"
            }
          ],
          "name": "DrawRotatedObject",
          "description": "Draw the source object, where src is an or an object,  at position x,y rotated by angle theta degrees."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "SetAlphaEnable",
          "description": "If enable is true, do alpha blending when this bitmap is the destination. The setting of the source bitmap\u0027s alpha enable is ignored."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "x",
              "type": "Integer"
            },
            {
              "name": "y",
              "type": "Integer"
            },
            {
              "name": "width",
              "type": "Integer"
            },
            {
              "name": "height",
              "type": "Integer"
            },
            {
              "name": "rgba",
              "type": "Integer"
            }
          ],
          "name": "DrawRect",
          "description": "Fill the specified rectangle from left (x), top (y) to right (x + width), bottom (y + height) with the RGBA color."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "x",
              "type": "Integer"
            },
            {
              "name": "y",
              "type": "Integer"
            },
            {
              "name": "src",
              "type": "Object"
            }
          ],
          "name": "DrawObject",
          "description": "Draw the source object, where src is an or an object, at position x,y."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetHeight",
          "description": "Returns the height of the bitmap in pixels."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Finish",
          "description": "Realize the bitmap by finishing all queued draw calls. Until Finish() is called, prior graphics operations may not be user visible."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "x",
              "type": "Integer"
            },
            {
              "name": "y",
              "type": "Integer"
            },
            {
              "name": "width",
              "type": "Integer"
            },
            {
              "name": "height",
              "type": "Integer"
            }
          ],
          "name": "GetPng",
          "description": "If successful, returns an roByteArray object containing PNG image data for the specified area of the bitmap."
        }
      ],
      "name": "ifDraw2D",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifDraw2D",
      "documentationVersion": 14
    },
    "ifScreen": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [],
          "name": "SwapBuffers",
          "description": "This function first operates the same as a call to .Finish(), completing all queued drawing operations on the back buffer (draw surface)."
        }
      ],
      "name": "ifScreen",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifScreen",
      "documentationVersion": 7
    },
    "ifImageCanvas": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [],
          "name": "PurgeCachedImages",
          "description": "This is a convenience method that will purge the internal cache of all images related to urls in the current content list. If the content list is empty, then this method will do nothing."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetCanvasRect",
          "description": "Returns an roAssociativeArray with names w for width and h for height."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "ClearButtons",
          "description": "Clears all of the buttons from the screen and resets the array of buttons back to default with no buttons set."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "updatesEnabled",
              "type": "Boolean"
            }
          ],
          "name": "AllowUpdates",
          "description": "Turn updates on or off. Surrounding changes to several layers with AllowUpdates(false) and AllowUpdates(true) calls makes complex display modification atomic. Gives the application protection against the image canvas trying to render a partial update."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "requireAllImages",
              "type": "Boolean"
            }
          ],
          "name": "SetRequireAllImagesToDraw",
          "description": "If true, wait till all images in the content-meta-data array are downloaded, decoded, and loaded into memory before drawing the screen."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "id",
              "type": "Integer"
            },
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "AddButton",
          "description": "Adds a button to the screen identified by the title and ID provided. The buttons are displayed in a standard location on the screen and appear in the order added. The ID is defined by the developer and used to uniquely identify the button instance. When the button is pressed, the script will receive an event from the application containing the ID of the button pressed and allowing the script to perform the desired action for that case."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "zOrder",
              "type": "Integer"
            },
            {
              "name": "contentMetaData",
              "type": "Object"
            }
          ],
          "name": "SetLayer",
          "description": "zOrder is a z-order specifier with higher z-orders closer to the viewer. Negative z-orders are \"behind the display\" and are thus invisible. Each call to SetLayer replaces the previous content metadata that previously existed at that z-order layer. The caller passes an ( objects) representing the information for each image to be displayed on the ."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Show",
          "description": "Display or refresh the screen after initial creation or state changes."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Close",
          "description": "Close the screen and delete the associated object. Useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "zOrder",
              "type": "Integer"
            }
          ],
          "name": "ClearLayer",
          "description": "Clear all content from a layer (see SetLayer for the layer definition)"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "zOrderA",
              "type": "Integer"
            },
            {
              "name": "zOrderB",
              "type": "Integer"
            }
          ],
          "name": "SwapLayers",
          "description": "Swap the content Meta-Data stored in zOrderA with the content Meta-Data stored in zOrderB."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Clear",
          "description": "Clear all content from all layers."
        }
      ],
      "name": "ifImageCanvas",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifImageCanvas",
      "documentationVersion": 7
    },
    "ifByteArray": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "path",
              "type": "String"
            }
          ],
          "name": "WriteFile",
          "description": "Writes the bytes contained in the Byte Array to the specified file."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "ToAsciiString",
          "description": "Returns the contents of the Byte Array as a string. The contents must be valid UTF-8 (or ASCII subset), or the result is undefined."
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "index",
              "type": "Integer"
            }
          ],
          "name": "GetSignedByte",
          "description": "Returns the signed byte at the specified zero-based index in the Byte Array. Use ifArrayGet.GetEntry() or the [ ] array operator to read an unsigned byte in the Byte Array."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "path",
              "type": "String"
            }
          ],
          "name": "ReadFile",
          "description": "Reads the specified file into the Byte Array."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "ToHexString",
          "description": "Returns a hexadecimal string representing the contents of the Byte Array, two digits per byte."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "path",
              "type": "String"
            }
          ],
          "name": "AppendFile",
          "description": "Appends the contents of the Byte Array to the specified file."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "s",
              "type": "String"
            }
          ],
          "name": "FromBase64String",
          "description": "Sets the contents of the Byte Array to the specified value.  The string must be a valid base-64 encoding."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsLittleEndianCPU",
          "description": "Returns true if the CPU architecture is little-endian."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "hexstring",
              "type": "String"
            }
          ],
          "name": "FromHexString",
          "description": "Sets the contents of the Byte Array to the specified value.  The string must be an even number of hexadecimal digits. The string must contain valid hexadecimal digits, or the result is undefined."
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "s",
              "type": "String"
            }
          ],
          "name": "FromAsciiString",
          "description": "Sets the contents of the Byte Array to the specified string using UTF-8 encoding. Any data currently in the Byte Array is discarded."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "min_size",
              "type": "Integer"
            },
            {
              "name": "auto_resize",
              "type": "Boolean"
            }
          ],
          "name": "SetResize",
          "description": "If the size of the Byte Array is less than min_size, expands the Byte Array to min_size.  Also sets the auto-resize attribute of the Byte Array to the specified value."
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "index",
              "type": "Integer"
            }
          ],
          "name": "GetSignedLong",
          "description": "Returns the signed long (four bytes) starting at the specified zero-based index in the Byte Array."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "ToBase64String",
          "description": "Returns a base-64 string representing the contents of the Byte Array."
        }
      ],
      "name": "ifByteArray",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifByteArray",
      "documentationVersion": 9
    },
    "ifTextureManager": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "req",
              "type": "Object"
            }
          ],
          "name": "CancelRequest",
          "description": "Cancels the request specified by req, which should be an previously passed to RequestTexture(). "
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "url",
              "type": "String"
            }
          ],
          "name": "UnloadBitmap",
          "description": "Removes a bitmap from the roTextureManager with the specified URL."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Cleanup",
          "description": "Removes all bitmaps from the roTextureManager."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "req",
              "type": "Object"
            }
          ],
          "name": "RequestTexture",
          "description": "req should be an .  Makes a request for an roBitmap with the attributes specified by the roTextureRequest.  The roTextureManager will pass an to the message port when completed."
        }
      ],
      "name": "ifTextureManager",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifTextureManager",
      "documentationVersion": 6
    },
    "ifTuner": {
      "methods": [
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetNetworkChanges",
          "description": "Returns an roArray of roAssociativeArray objects indicating that a change in the broadcast network has occurred, possibly requiring a rescan. A zero-length array indicates that there are no current network change events. Each roAssociativeArray includes the following keys."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "channel_id",
              "type": "String"
            }
          ],
          "name": "GetChannelInfo",
          "description": "Returns information about a specific channel given a channel descriptor returned from GetChannelList(). If the channel exists, the call returns a ChannelInfo object, otherwise it returns invalid."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetSignalStatus",
          "description": "Returns an roAssociativeArray containing an Integer that is an abstract signal quality measurement, as a percentage, about the current signal received by the tuner."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "dt",
              "type": "Object"
            }
          ],
          "name": "ToTunerTime",
          "description": "Converts the specified roDateTime from system time to tuner time. If the device has been able to synchronize the time since boot via an internet connection, then the system time and tuner time are likely to be very close."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetChannelList",
          "description": "Returns an roArray of channel descriptors, where each channel descriptor is a String. The contents of a channel descriptor string is to be considered opaque to applications. It can be passed to GetChannelInfo() to request detailed meta-data for the channel."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetScanInfo",
          "description": "Returns information about the most recent scan, if any, in the form of a roAssociativeArray."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetGuide",
          "description": "Returns an roProgramGuide object providing access to EPG information on all channels received by the tuner."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetTime",
          "description": "Returns a roDateTime holding the current date/time given by the tuner signal. For digital (DVB-T/ATSC) tuners, the time is retrieved from the appropriate date/time tables in the signalling information and extrapolated by the system clock. If the date/time has never been obtained from the tuner since boot, then this function returns the system date/time."
        }
      ],
      "name": "ifTuner",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifTuner",
      "documentationVersion": 4
    },
    "ifFontMetrics": {
      "methods": [
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "stringToDraw",
              "type": "String"
            }
          ],
          "name": "Size",
          "description": "Returns an with parameters w and h set to the height and width of the stringToDraw rendered in the font passed on the CreateObject() call."
        }
      ],
      "name": "ifFontMetrics",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifFontMetrics",
      "documentationVersion": 5
    },
    "ifPath": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "path",
              "type": "String"
            }
          ],
          "name": "Change",
          "description": "Modify or change the current path via the relative or absolute path passed as a string"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "Split",
          "description": "Returns an containing the following keys:"
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsValid",
          "description": "Returns true if the current path is valid; that is, if the path is correctly formed.  This does not check whether the file actually exists."
        }
      ],
      "name": "ifPath",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifPath",
      "documentationVersion": 6
    },
    "ifCompositor": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "oldRegion",
              "type": "Object"
            },
            {
              "name": "newRegion",
              "type": "Object"
            }
          ],
          "name": "ChangeMatchingRegions",
          "description": "Global search and replace of Sprite s."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "duration",
              "type": "Integer"
            }
          ],
          "name": "AnimationTick",
          "description": "Duration is the number of ms since the last call."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "DrawAll",
          "description": "Redraw all sprites even if not dirty."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Draw",
          "description": "Draw any dirty sprites (that is, whatever is new or has changed since the last Draw). No compositor or sprite operations will be reflected on the display until Draw() is called."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "destBitmap",
              "type": "Object"
            },
            {
              "name": "rgbaBackground",
              "type": "Integer"
            }
          ],
          "name": "SetDrawTo",
          "description": "Set the destBitmap ( or ) and the background color."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "x",
              "type": "Integer"
            },
            {
              "name": "y",
              "type": "Integer"
            },
            {
              "name": "regionArray",
              "type": "Object"
            },
            {
              "name": "z",
              "type": "Integer"
            }
          ],
          "name": "NewAnimatedSprite",
          "description": "Returns an object."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "x",
              "type": "Integer"
            },
            {
              "name": "y",
              "type": "Integer"
            },
            {
              "name": "region",
              "type": "Object"
            },
            {
              "name": "z",
              "type": "Integer"
            }
          ],
          "name": "NewSprite",
          "description": "Returns an object"
        }
      ],
      "name": "ifCompositor",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifCompositor",
      "documentationVersion": 5
    },
    "ifImageMetadata": {
      "methods": [
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "ifd",
              "type": "Integer"
            },
            {
              "name": "tag",
              "type": "Integer"
            }
          ],
          "name": "GetRawExifTag",
          "description": "Returns the raw data for one Exif tag. Returns invalid if that tag does not exist. This is useful for direct access to a raw EXIF tag if you know exactly what tag you want."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetThumbnail",
          "description": "Returns a thumbnail image if one is embedded in the image metadata. This will not generate a thumbnail if one doesn\u0027t already exist. Returns an AssociateArray with two entries: \"bytes\" and \"type\". \"bytes\" is an roByteArray with the image data. \"type\" specifies the type of image which is most likely \"image/jpeg\" but could be something else like \"image/png\"."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetMetadata",
          "description": "Returns an associative array with set of simple and common image metadata. This associative array includes:"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "url",
              "type": "String"
            }
          ],
          "name": "SetUrl",
          "description": "Set the URL to the image. Only file urls are supported."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetRawExif",
          "description": "Returns an associative array with all of the raw EXIF metadata. See the EXIF section below for more details."
        }
      ],
      "name": "ifImageMetadata",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifImageMetadata",
      "documentationVersion": 5
    },
    "ifRSA": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "digestAlgorithm",
              "type": "String"
            }
          ],
          "name": "SetDigestAlgorithm",
          "description": "Specify the digest algorithm to use for signing and verification.  This should be an openssl string.  Common digest algorithms are \"sha1\", \"ripemd160\", and \"md5\"."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "digest",
              "type": "Object"
            }
          ],
          "name": "Sign",
          "description": "digest should be a roByteArray to be signed."
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "digest",
              "type": "Object"
            },
            {
              "name": "signature",
              "type": "Object"
            }
          ],
          "name": "Verify",
          "description": "Verifies the given digest and signature.  Both digest and signature should be roByteArrays."
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "keyFileName",
              "type": "String"
            }
          ],
          "name": "SetPublicKey",
          "description": "Specify the public key to use for verification.  The file name should specify a path, either in the package or a temp path.  "
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "keyFileName",
              "type": "String"
            }
          ],
          "name": "SetPrivateKey",
          "description": "Specify the private key to use for signing.  The file name should specify a path, either in the package or a temp path."
        }
      ],
      "name": "ifRSA",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifRSA",
      "documentationVersion": 5
    },
    "ifOneLineDialog": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [],
          "name": "ShowBusyAnimation",
          "description": "Display a spinning busy animation to indicate work in progress. The animation will continue until the screen is closed."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Show",
          "description": "Display or refresh the screen after creation or state changes."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Close",
          "description": "Close the screen and delete the associated object. Useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "SetTitle",
          "description": "Set the title for the screen to the specified string. The title appears in the upper right hand corner of the screen in the overhang area."
        }
      ],
      "name": "ifOneLineDialog",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifOneLineDialog",
      "documentationVersion": 6
    },
    "ifTextToSpeech": {
      "methods": [
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "duration",
              "type": "Integer"
            }
          ],
          "name": "Silence"
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            }
          ],
          "name": "SetLanguage"
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetVolume"
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsEnabled"
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "volume",
              "type": "Integer"
            }
          ],
          "name": "SetVolume"
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetVoice"
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetLanguage"
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "Flush"
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            }
          ],
          "name": "SetVoice"
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "Say"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetAvailableLanguages"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetAvailableVoices"
        }
      ],
      "name": "ifTextToSpeech",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifTextToSpeech",
      "documentationVersion": 2
    },
    "ifBoolean": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "GetBoolean",
          "description": "SetBoolean(value As Boolean) As Void"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "value",
              "type": "Boolean"
            }
          ],
          "name": "SetBoolean",
          "description": " "
        }
      ],
      "name": "ifBoolean",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifBoolean",
      "documentationVersion": 4
    },
    "ifCaptionRenderer": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "port",
              "type": "Object"
            }
          ],
          "name": "SetMessagePort",
          "description": "Set the roMessagePort that should receive roCaptionRendererEvents from the roCaptionRenderer."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "mode",
              "type": "Integer"
            }
          ],
          "name": "SetMode",
          "description": "Sets the rendering mode for the roCaptionRenderer.  Possible values are:"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetSubtitleTracks",
          "description": "This function returns an roArray of roAssociativeArrays, one per closed caption track found in the stream.  This function can also be used to retrieve caption URLs for external (side loaded) caption files.  Each of these roAssociativeArrays contains track information similar to that specified in the SubtitleTracks content metadata structure.  Specifically:"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "track",
              "type": "String"
            }
          ],
          "name": "ChangeSubtitleTrack",
          "description": "When content playback starts, the subtitle track specified in the TrackIdSubtitle content metadata value is used to determine which set of captions to display.  The ChangeSubtitleTrack function is used to change the caption source after playback has begun.  One of the 608 channels or ttml text tracks can be selected with this function. The 608 channels are specified as \u0027eia608/\u003cn\u003e\u0027 where \u003cn\u003e is 1, 2, 3, or 4. The ttml text tracks are specified as \u0027ism/\u003ctrack_name\u003e\u0027."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "ShowSubtitle",
          "description": "This method tells the roCaptionRenderer whether to display captions or not.  This function behaves the same was as ifVideoScreen.ShowSubtitle()."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "UpdateCaption",
          "description": "For roCaptionRenderer instances with mode set to 1, this method tells the firmware to render the current caption.  If mode is 2, this function does nothing."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "screen",
              "type": "Object"
            }
          ],
          "name": "SetScreen",
          "description": "Set the roScreen or roImageCanvas instance associated with this caption renderer.  This function only needs to be called if the roCaptionRenderer mode is set to 1 (the default value.)  In this case, the Roku firmware is responsible for all of the closed caption text rendering, and thus must know what screen to draw on.  If the mode is set to 2, the BrightScript channel is responsible for all of the caption drawing, and thus the firmware does not need to be informed as to what screen is being rendered on."
        }
      ],
      "name": "ifCaptionRenderer",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifCaptionRenderer",
      "documentationVersion": 17
    },
    "ifParagraphScreen": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "location1",
              "type": "String"
            },
            {
              "name": "location2",
              "type": "String"
            }
          ],
          "name": "SetBreadcrumbText",
          "description": "Breadcrumbs allow the application to display two strings at the far left of the overhang.  Breadcrumbs are often used two indicate where in the navigation hierarchy the user is.  If both location values are set, the application will display the title in breadcrumb format. If only the first location is set, the application will display the specified text in the title area like the SetTitle API call."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "url",
              "type": "String"
            }
          ],
          "name": "AddGraphic",
          "description": "Adds a graphic image to the screen at the current cursor position and centers it. The current cursor position moves as headers, paragraphs, graphics and buttons are added to the screen."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "index",
              "type": "Integer"
            }
          ],
          "name": "SetDefaultMenuItem",
          "description": "Set the button which will be highlighted when the screen is initially displayed.  The index parameter is the zero-based position of the button in the list of buttons on the screen, NOT the button id passed to AddButton.  The default is the first button (index 0)."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "AddHeaderText",
          "description": "Add a string of bold, high visibility text to the screen as a header to introduce the subsequent paragraph(s)."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "id",
              "type": "Integer"
            },
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "AddButton",
          "description": "Adds a button to the screen identified by the title and ID provided. The buttons are displayed in a standard location on the screen and appear in the order added. The ID is defined by the developer and used to uniquely identify the button instance. When the button is pressed, the script will receive an event from the application containing the ID of the button pressed and allowing the script to perform the desired action for that case."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Show",
          "description": "Display or refresh the screen after creation or state changes."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Close",
          "description": "Close the screen and delete the associated object. Useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "SetTitle",
          "description": "Set the title for the screen to the specified string."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "AddParagraph",
          "description": "Adds a paragraph of text to the screen. Paragraphs are specified as a single string and they are ordered on the screen in the same order as they are added. Making multiple calls to AddParagraph() will continue to add additional paragraphs of text in order until the screen has been filled. The roParagraphScreen handles all text formatting and justification. Spacing is automatically inserted between paragraphs for readability."
        }
      ],
      "name": "ifParagraphScreen",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifParagraphScreen",
      "documentationVersion": 9
    },
    "ifFunction": {
      "methods": [
        {
          "returnType": "Function",
          "parameters": [],
          "name": "GetSub",
          "description": "SetSub(value As Function) As Void"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "value",
              "type": "Function"
            }
          ],
          "name": "SetSub",
          "description": " "
        }
      ],
      "name": "ifFunction",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifFunction",
      "documentationVersion": 5
    },
    "ifInput": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "port",
              "type": "Object"
            }
          ],
          "name": "SetMessagePort",
          "description": "Set the roMessagePort to be used to receive events. "
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetMessagePort",
          "description": "Returns the message port (if any) currently associated with the object."
        }
      ],
      "name": "ifInput",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifInput",
      "documentationVersion": 6
    },
    "ifSGNodeFocus": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isInFocusChain"
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "on",
              "type": "Boolean"
            }
          ],
          "name": "setFocus"
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "hasFocus"
        }
      ],
      "name": "ifSGNodeFocus",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSGNodeFocus",
      "documentationVersion": 12
    },
    "ifSearchHistory": {
      "methods": [
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetAsArray",
          "description": "Returns the current search history stack as an of Strings with all available search history elements."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "searchTerm",
              "type": "String"
            }
          ],
          "name": "Push",
          "description": "Push a new search term onto the search history stack."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Clear",
          "description": "Clear all elements from the search history. Note that this clears the search history for all applications and should be used carefully. The standard usage is to provide a \"clear history\" button on the search screen, so that it is up to the user when the history stack is cleared."
        }
      ],
      "name": "ifSearchHistory",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSearchHistory",
      "documentationVersion": 5
    },
    "ifAudioResource": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "volume",
              "type": "Integer"
            }
          ],
          "name": "Trigger",
          "description": "This method triggers the start of the audio resource sound playback.  The volume is a number between 0 and 100 (percentage of full volume).  50 should be used for normal volume."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Stop",
          "description": "Stops playing the audio resource.  If the resource is not currently playing, has no effect."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetMetaData",
          "description": "Returns an array containing the following meta data parameters about the audio resource.  All values are integers."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "MaxSimulStreams",
          "description": "Returns the maximum number of audio resources which can be played simultaneous.  Some Roku models support playing multiple resources and mix the output, others support playing only one stream at a time."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsPlaying",
          "description": "Returns true if this audio resource is currently playing"
        }
      ],
      "name": "ifAudioResource",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifAudioResource",
      "documentationVersion": 8
    },
    "ifProgramGuide": {
      "methods": [
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "Void",
              "type": "Dynamic"
            }
          ],
          "name": "GetVersion",
          "description": "Returns an integer which is incremented each time the underlying data in the guide changes."
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "channel",
              "type": "String"
            }
          ],
          "name": "GetNowNextPrograms",
          "description": "Returns invalid if the given channel is unknown, otherwise returns an roArray of length 2. Each entry in the array may be invalid if no data is found, or contains an roAssociativeArray containing details of a program. The first entry in the array gives details of the current program on the given channel. The second entry in the array gives details of the following (next) program on the given channel."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "startTime",
              "type": "roDateTime"
            },
            {
              "name": "channel",
              "type": "String"
            },
            {
              "name": "endTime",
              "type": "roDateTime"
            }
          ],
          "name": "GetPrograms",
          "description": "Returns invalid if the given channel is unknown, otherwise returns an roArray of programs falling within the given time range. Each entry in the array contains an roAssociativeArray containing details of a program with the same keys as above for GetNowNextPrograms()."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "id",
              "type": "Integer"
            }
          ],
          "name": "GetChannels",
          "description": "Returns an roArray of Strings. Each entry is the logical channel number of a channel on which the given program ID can be found."
        }
      ],
      "name": "ifProgramGuide",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifProgramGuide",
      "documentationVersion": 3
    },
    "ifChannelStore": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [],
          "name": "ClearOrder",
          "description": "Clears the current Order (shopping cart). After this call, the Order is empty."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "DoOrder",
          "description": "Displays the Roku Channel Store Product Purchase Screen populated with information from the current Order. The user can then either approve and complete the purchase, or cancel the purchase. If the user approves the order, this function returns true. Otherwise it returns false. In the case that  the user approves, the channel should wait for and respond to the roChannelStoreEvent.isRequestSucceeded event to get the details of the completed transaction."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "FakeServer",
          "description": "If enable is true, enables a test mode for the roChannelStore component."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "GetPurchases",
          "description": "Requests the list of purchases associated with the current user account."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "DoUpgrade",
          "description": "Displays the Roku Channel Store Product Purchase Screen populated with information about the \"In-Channel Upgrade\" available for the currently running channel. The user can then either approve and complete the purchase or cancel the purchase. If the purchase was completed successfully, the return value is the item code of the purchased upgrade; otherwise it is an empty string. If a code is returned, then the new channel has already been downloaded and installed on the unit, and the currently running channel will be automatically deleted when the user exits it."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "GetUpgrade",
          "description": "Requests information about the upgrade for the current channel. Each channel may have one \"In-Channel Upgrade\" channel associated with it."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetOrder",
          "description": "Retrieves the current Order. The returned object is an roList of roAssociativeArray items, where each item contains the following parameter names with specified value type:"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetUserData",
          "description": "The GetUserData() function provides a way to request user authorization to share the users account information with the calling channel. The primary use case of this method is to facilitate partner account creation/updating within channels that have a customer billing relationship with Roku. For example, a developer may have a Roku channel that offers a VOD subscription to users. This subscription may require an account with the content provider. The GetUserData() method could be called to read the users account information in order to prepopulate an account registration screen."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "properties",
              "type": "String"
            }
          ],
          "name": "GetPartialUserData",
          "description": "This function works like GetUserData(), but allows the caller to specify which user data elements to return. The specified values are also displayed in the user data dialog screen. To tell the function which properties to return, pass a string with a comma separated list of the attribute names. For example, to return only the email address and first name of the user\u0027s account, you would call GetPartialUserData(\"email, firstname\"). The full set of user account properties that can be queried with the function is:"
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "order",
              "type": "Object"
            }
          ],
          "name": "SetOrder",
          "description": "Sets the current Order (shopping cart) to the elements specified in the parameter, which must be an roList of roAssociativeArray items, where each item contains the following parameter names with specified value type:"
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "GetCatalog",
          "description": "Requests the list of In-Channel products which are linked to the running channel."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "GetStoreCatalog",
          "description": "Requests the list of globally available In-Channel products, which are available to all channels."
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "code",
              "type": "Object"
            },
            {
              "name": "qty",
              "type": "Integer"
            }
          ],
          "name": "DeltaOrder",
          "description": "Applies a change in quantity to one item in the current Order (shopping cart). If the item identified by code is not in the Order, it is added with the specified quantity. If the item already exists in the Order, qty is added to the quantity of this item in the Order. qty may be negative. The returned value is the quantity of the item remaining in the Order after applying the change. If this number is zero or negative, the item is deleted from the Order. "
        }
      ],
      "name": "ifChannelStore",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifChannelStore",
      "documentationVersion": 28
    },
    "ifSGNodeDict": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "nodeType",
              "type": "String"
            }
          ],
          "name": "isSubtype"
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "subtype"
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            }
          ],
          "name": "findNode"
        },
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "nodeType",
              "type": "String"
            }
          ],
          "name": "parentSubtype"
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "RoSGNode",
              "type": "Object"
            }
          ],
          "name": "isSameNode"
        }
      ],
      "name": "ifSGNodeDict",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSGNodeDict",
      "documentationVersion": 22
    },
    "ifGridScreen": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "rowIndex",
              "type": "Integer"
            },
            {
              "name": "name",
              "type": "String"
            }
          ],
          "name": "SetListName",
          "description": "Set the row title for the specified row.  Row indexes are zero-based."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "visible",
              "type": "Boolean"
            }
          ],
          "name": "SetDescriptionVisible",
          "description": "Set whether the description box is displayed for the focused item. When it is false, the description box is not displayed."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "visible",
              "type": "Boolean"
            }
          ],
          "name": "SetFocusRingVisible",
          "description": "Sets whether the focus ring should be displayed for the focused item."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "count",
              "type": "Integer"
            }
          ],
          "name": "SetupLists",
          "description": "Set the number of rows in the grid.  The number of rows must be set before calling other functions to populate grid data."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "rowIndex",
              "type": "Integer"
            },
            {
              "name": "itemIndex",
              "type": "Integer"
            }
          ],
          "name": "SetFocusedListItem",
          "description": "Set the focus to the specified row and item.  Row and item indexes are zero-based."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "visible",
              "type": "Boolean"
            }
          ],
          "name": "SetCounterVisible",
          "description": "Sets whether the item counter should be displayed.  The item counter shows the focused item number and count of items in the row."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "displayMode",
              "type": "String"
            }
          ],
          "name": "SetDisplayMode",
          "description": "Sets the mode for displaying images in the grid screen. This allows images to be either scaled to completely fill the poster frame (scale-to-fill) or scaled to fit inside the poster frame (scale-to-fit) while maintaining aspect ratio."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "sdPosterUrl",
              "type": "String"
            },
            {
              "name": "hdPosterUrl",
              "type": "String"
            }
          ],
          "name": "SetLoadingPoster",
          "description": "This function lets you specify the default images to show in the grid while the grid screen content is loading."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "ClearMessage",
          "description": "Clears the message from the previous ShowMessage call."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "Location1",
              "type": "String"
            },
            {
              "name": "Location2",
              "type": "String"
            }
          ],
          "name": "SetBreadcrumbText",
          "description": "If SetBreadcrumbEnabled() is true, display Location1 and Location2 in the right of the overhang."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enabled",
              "type": "Boolean"
            }
          ],
          "name": "SetBreadcrumbEnabled",
          "description": "If enabled is true, display the breadcrumb text specified with SetBreadcrumbText."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "rowIndex",
              "type": "Integer"
            },
            {
              "name": "itemIndex",
              "type": "Integer"
            }
          ],
          "name": "SetListOffset",
          "description": "The grid populates poster screens in a background thread."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "names",
              "type": "Object"
            }
          ],
          "name": "SetListNames",
          "description": "Set the list of row titles, where names must be an roArray of strings. The first name is displayed for the first row, the second name for the second row, etc."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "styles",
              "type": "Object"
            }
          ],
          "name": "SetListPosterStyles",
          "description": "Used in conjunction with the mixed-apect-ratio grid style, this function sets the images size and orientation for each row in the grid."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "rowIndex",
              "type": "Integer"
            },
            {
              "name": "contentList",
              "type": "Object"
            }
          ],
          "name": "SetContentList",
          "description": "Set the content list for the specified row.  Row indexes are zero-based."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Show",
          "description": "Display or refresh the screen after initial creation or state changes."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Close",
          "description": "Close the screen and delete the associated object."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "sdPosterUrl",
              "type": "String"
            },
            {
              "name": "hdPosterUrl",
              "type": "String"
            }
          ],
          "name": "SetErrorPoster",
          "description": "This function lets you specify the default images to show in the grid when the grid screen content fails to load."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "rowIndex",
              "type": "Integer"
            },
            {
              "name": "visible",
              "type": "Boolean"
            }
          ],
          "name": "SetListVisible",
          "description": "Sets the visibility of the specified row.  Row indexes are zero-based."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "message",
              "type": "String"
            }
          ],
          "name": "ShowMessage",
          "description": "Displays a semi-transparent popup message box to the user in the center of the screen over the poster screen. Generally used for error messages."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "behavior",
              "type": "String"
            }
          ],
          "name": "SetUpBehaviorAtTopRow",
          "description": "Behavior is a string that controls how the remote \"up\" key behaves when pressed with the top row selected."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "rowIndex",
              "type": "Integer"
            },
            {
              "name": "contentList",
              "type": "Object"
            },
            {
              "name": "offset",
              "type": "Integer"
            },
            {
              "name": "length",
              "type": "Integer"
            }
          ],
          "name": "SetContentListSubset",
          "description": "Set or update items in the content list for the specified row.  Row indexes are zero-based."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "style",
              "type": "String"
            }
          ],
          "name": "SetGridStyle",
          "description": "Sets the style or theme for displaying images in the grid screen. This allows different appearances of the overall grid for different sized images:"
        }
      ],
      "name": "ifGridScreen",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifGridScreen",
      "documentationVersion": 30
    },
    "ifSocketCastOption": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "GetBroadcast",
          "description": "Return true if broadcast messages are enabled to be sent or received."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "SetBroadcast",
          "description": "If enable is true, enable broadcast messages to be sent or received; otherwise do not send or receive broadcast messages."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "GetMulticastLoop",
          "description": "Return true if multicast messages are enabled for local loopback."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "ipAddress",
              "type": "Object"
            }
          ],
          "name": "DropGroup",
          "description": "Drop out of the multicast group specified by the passed in multicast ipAddress.  ipAddress must be an ."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "SetMulticastLoop",
          "description": "If enable is true, enable local loopback of multicast messages; otherwise do not send or receive broadcast messages."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetMulticastTTL",
          "description": "Return the TTL integer value for multicast messages."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "ttl",
              "type": "Integer"
            }
          ],
          "name": "SetMulticastTTL",
          "description": "Set the TTL integer value for multicast messages."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "ipAddress",
              "type": "Object"
            }
          ],
          "name": "JoinGroup",
          "description": "Join the multicast group specified by the passed in multicast ipAddress.  ipAddress must be an ."
        }
      ],
      "name": "ifSocketCastOption",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSocketCastOption",
      "documentationVersion": 7
    },
    "ifSocketConnection": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsListening",
          "description": "Returns true if listen has been successfully called on this socket"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "Accept",
          "description": "Returns an roStreamSocket if connection is pending, invalid otherwise."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Connect",
          "description": "Returns returns true connect is successful."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "backlog",
              "type": "Integer"
            }
          ],
          "name": "Listen",
          "description": "Returns true if listen can be done (generally if bound address is valid)"
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsConnected",
          "description": "Returns true if a connect or accept has successfully completed on this socket"
        }
      ],
      "name": "ifSocketConnection",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSocketConnection",
      "documentationVersion": 6
    },
    "ifUrlTransfer": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "EnableResume",
          "description": "Enable automatic resumption of AsyncGetToFile and GetToFile requests."
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "request",
              "type": "String"
            }
          ],
          "name": "PostFromString",
          "description": "Use the HTTP POST method to send the supplied string to the current URL.  The HTTP response code is returned.  Any response body is discarded."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "request",
              "type": "String"
            }
          ],
          "name": "AsyncPostFromString",
          "description": "Use the HTTP POST method to send the supplied string to the current URL. When the POST completes, an  will be sent to the message port associated with the object. If false is returned then the request could not be issued and no events will be delivered."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "EnablePeerVerification",
          "description": "Verify the certificate has a chain of trust up to a valid root certificate using. CURLOPT_SSL_VERIFYPEER."
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "filename",
              "type": "String"
            }
          ],
          "name": "GetToFile",
          "description": "Connect to the remote service as specified in the URL and write the response body to a file on the Roku device\u0027s filesystem."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "user",
              "type": "String"
            },
            {
              "name": "password",
              "type": "String"
            }
          ],
          "name": "SetUserAndPassword",
          "description": "Enables HTTP authentication using the specified user name and password. Note that HTTP basic authentication is deliberately disabled due to it being inherently insecure. HTTP digest authentication is supported."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "filename",
              "type": "String"
            }
          ],
          "name": "AsyncGetToFile",
          "description": "Like AsyncGetToString, this starts a transfer without waiting for it to complete. However, the response body will be written to a file on the device\u0027s filesystem instead of being returned in a String object. When the GET completes, an  will be sent to the message port associated with the object. If false is returned then the request could not be issued and no events will be delivered."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetRequest",
          "description": "Returns the current request method."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetToString",
          "description": "Connect to the remote service as specified in the URL and return the response body as a string. This function waits for the transfer to complete and it may block for a long time."
        },
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "url",
              "type": "String"
            }
          ],
          "name": "UrlEncode",
          "description": "Same as Escape.  This method is deprecated."
        },
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "Escape",
          "description": "URL encode the specified string per RFC 3986 and return the encoded string."
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "Head",
          "description": "Synchronously perform an HTTP HEAD request and return an object. In the event of catastrophic failure (e.g. an asynchronous operation is already active) then invalid is returned."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "filename",
              "type": "String"
            }
          ],
          "name": "AsyncPostFromFile",
          "description": "Use the HTTP POST method to send the contents of the specified file to the current URL. When the POST completes, an  will be sent to the message port associated with the object. If false is returned then the request could not be issued and no events will be delivered."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetFailureReason",
          "description": "If any of the roUrlTransfer functions indicate failure then this function may provide more information regarding the failure."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "AsyncCancel",
          "description": "Cancel any outstanding async requests on the roUrlTransfer object."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "url",
              "type": "String"
            }
          ],
          "name": "SetUrl",
          "description": "Sets the URL to use for the transfer request."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "EnableFreshConnection",
          "description": "Enable fresh connection using CURLOPT_FRESH_CONNECT."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "AsyncGetToString",
          "description": "Start a GET request to a server, but do not wait for the transfer to complete. When the GET completes, a  will be sent to the message port associated with the object. The event will contain a roString with the body of the response. If false is returned then the request could not be issued and no events will be delivered."
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "req",
              "type": "String"
            }
          ],
          "name": "SetRequest",
          "description": "Changes the request method from the normal GET, HEAD or POST to the value passed as a string.  This should be used with caution as it can generate invalid HTTP requests."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetUrl",
          "description": "Returns the current URL."
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "filename",
              "type": "String"
            }
          ],
          "name": "PostFromFile",
          "description": "Use the HTTP POST method to send the contents of the specified file to the current URL.  The HTTP response code is returned. Any response body is discarded."
        },
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "Unescape",
          "description": "Decode the specified string per RFC 3986 and return the unencoded string."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIdentity",
          "description": "Returns a unique number for this object that can be used to identify whether events originated from this object."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "EnableEncodings",
          "description": "Enable gzip encoding of transfers."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "retain",
              "type": "Boolean"
            }
          ],
          "name": "RetainBodyOnError",
          "description": "If retain is true, return the body of the response even if the HTTP status code indicates that an error occurred."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "bytes_per_second",
              "type": "Integer"
            },
            {
              "name": "period_in_seconds",
              "type": "Integer"
            }
          ],
          "name": "SetMinimumTransferRate",
          "description": "Terminate the transfer automatically if the rate drops below bytes_per_second when averaged over period_in_seconds.If the transfer is over the Internet you may not want to set period_in_seconds to a small number because network problems may cause temporary drops in performance. For large file transfers and a small bytes_per_second, averaging over fifteen minutes or even longer might be appropriate."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "EnableHostVerification",
          "description": "Verify that the certificate belongs to the host we\u0027re talking to using CURLOPT_SSL_VERIFYHOST."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "AsyncHead",
          "description": "Begin an HTTP HEAD request without waiting for it to complete. When the HEAD completes, an  will be sent to the message port associated with the object. If false is returned then the request could not be issued and no events will be delivered."
        }
      ],
      "name": "ifUrlTransfer",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifUrlTransfer",
      "documentationVersion": 7
    },
    "ifXMLElement": {
      "methods": [
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetAttributes",
          "description": "Returns an Associative Array representing the XML attributes of the element."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "attr",
              "type": "String"
            },
            {
              "name": "value",
              "type": "String"
            }
          ],
          "name": "AddAttribute",
          "description": "Adds an attribute value to the element. If an attribute of the same name already exists it is replaced.  Note that XML attribute order is not significant, i.e. not preserved."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "body",
              "type": "Object"
            }
          ],
          "name": "SetBody",
          "description": "Sets the element text from the specified string."
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "hdr",
              "type": "String"
            }
          ],
          "name": "GenXMLHdr",
          "description": "Serializes the element to XML document text.  The specified header is used to begin the output, for example as a custom XML declaration."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "xml",
              "type": "String"
            }
          ],
          "name": "Parse",
          "description": "Parse a string of XML.  Returns true if successful.  In that case, other methods below can then be used to extract information about the parsed element."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetChildElements",
          "description": "If there are child elements contained in this one, returns an representing those elements.  If there are no child elements, returns invalid.  Note that this function won\u0027t handle cases of mixed XML content, i.e., content with both child elements and text such as:"
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            }
          ],
          "name": "AddElement",
          "description": "Adds a new child element with the specified name and returns the new element."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            }
          ],
          "name": "GetNamedElements",
          "description": "Returns an representing all child elements of this element whose name is specified.  If only one element matches the name, an roXMLList containing one element is returned.  If no elements match, an empty roXMLList is returned."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            }
          ],
          "name": "SetName",
          "description": "Sets the name of the element."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "AddText",
          "description": "Adds text to the element."
        },
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "gen_header",
              "type": "Boolean"
            }
          ],
          "name": "GenXML",
          "description": "Serializes the element to XML document text.  If gen_header is true then the output begins with a standard XML declaration specifying UTF-8 encoding."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetBody",
          "description": "Returns the body of the element.  If the element contains child elements, GetBody() returns an representing those elements, like GetChildElements().  If there are no children but the element contains text, GetBody() returns an like GetText().  If the element is empty, GetBody() returns invalid."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "AddBodyElement",
          "description": "Adds an new unnamed / empty child element and returns it.  This should generally be followed by a call to child.SetName().  Alternatively AddElement() or AddElementWidthBody() can be used to combine this step with additional construction into one call."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Clear",
          "description": "Removes all attributes and children from the element, as well as setting the name to empty."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            }
          ],
          "name": "GetNamedElementsCi",
          "description": "Same as GetNamedElements except the name matching is case-insensitive."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "attr",
              "type": "String"
            }
          ],
          "name": "HasAttribute",
          "description": "Returns true if the element has the specified attribute."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            },
            {
              "name": "body",
              "type": "Object"
            }
          ],
          "name": "AddElementWithBody",
          "description": "Adds a new child element with the specified name and text from the specified body string, and returns the new element."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetChildNodes",
          "description": "If there are child elements contained in this one, returns an roList representing those elements.  If there are no child elements, returns invalid.  The difference between this function and GetChildElements() is that GetChildNodes() handles the case of mixed XML content, i.e., content with both child elements and text such as:"
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetName",
          "description": "Returns the name of the element."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetText",
          "description": "Returns any text contained in the element.  This returns immediate body text only, i.e. does not include text from child elements."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            }
          ],
          "name": "IsName",
          "description": "Returns true if the element has the specified name."
        }
      ],
      "name": "ifXMLElement",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifXMLElement",
      "documentationVersion": 12
    },
    "ifArraySet": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "index",
              "type": "Integer"
            },
            {
              "name": "tvalue",
              "type": "Dynamic"
            }
          ],
          "name": "SetEntry",
          "description": "Sets an entry at a given index to the passed value.  If index is beyond the bounds of the array, the array is expanded to accommodate it."
        }
      ],
      "name": "ifArraySet",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifArraySet",
      "documentationVersion": 5
    },
    "ifMessagePort": {
      "methods": [
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "timeout",
              "type": "Integer"
            }
          ],
          "name": "WaitMessage",
          "description": "Waits until an event object is available or timeout milliseconds have passed.  If an event is available, it is returned.  If the timeout expires, invalid is returned.   If timeout is zero, waits indefinitely for a message, with no timeout."
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "GetMessage",
          "description": "If an event object is available, it is returned.  Otherwise invalid is returned.  The method returns immediately in either case and does not wait."
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "PeekMessage",
          "description": "Similar to GetMessage() but the returned object (if not invalid) remains in the message queue.  A later call to WaitMessage(), GetMessage() or PeekMessage() will return the same message."
        }
      ],
      "name": "ifMessagePort",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifMessagePort",
      "documentationVersion": 7
    },
    "ifIntOps": {
      "methods": [
        {
          "returnType": "String",
          "parameters": [],
          "name": "ToStr",
          "description": "Returns the integer value formatted as a decimal string. "
        }
      ],
      "name": "ifIntOps",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifIntOps",
      "documentationVersion": 5
    },
    "ifTimespan": {
      "methods": [
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "TotalMilliseconds",
          "description": "Returns the total number of milliseconds from the \"Mark\" point to the current time."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "TotalSeconds",
          "description": "Returns the total number of seconds from the \"Mark\" point to the current time."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Mark",
          "description": "Sets the \"Mark\" point to the current time.  The Mark point is also automatically set to the current time when an roTimespan object is created."
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "date",
              "type": "String"
            }
          ],
          "name": "GetSecondsToISO8601Date",
          "description": "This function parses the ISO8601 date (e.g. 2008-11-29T14:54:02.171) and returns the number of seconds from now (not the \"Mark\" point) until the specified date/time. The date provided and the current time calculations are all done assuming UTC. The \"Z\" timezone part of the ISO8601 string is ignored."
        }
      ],
      "name": "ifTimespan",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifTimespan",
      "documentationVersion": 5
    },
    "ifFileSystem": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "path",
              "type": "String"
            }
          ],
          "name": "Delete",
          "description": "Deletes the file or directory specified by the path parameter.  If path is a directory, its contents are recursively removed."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "dirPath",
              "type": "String"
            },
            {
              "name": "regEx",
              "type": "String"
            }
          ],
          "name": "FindRecurse",
          "description": "Returns an of Strings representing the recursive directory listing of names in dirPath which match the regEx regular expression.  Each item in the list is the name of the file relative to dirPath."
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "String",
              "type": "Dynamic"
            }
          ],
          "name": "GetDirectoryListing",
          "description": "Returns an of Strings representing the directory listing of names in dirPath."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "path",
              "type": "String"
            }
          ],
          "name": "Stat",
          "description": "Returns an containing the following keys for the passed in path:"
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "path",
              "type": "String"
            }
          ],
          "name": "Exists",
          "description": "Returns true if the path exists."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "dirPath",
              "type": "String"
            },
            {
              "name": "regEx",
              "type": "String"
            }
          ],
          "name": "Find",
          "description": "Returns an of Strings representing the directory listing of names in dirPath which match the regEx regular expression.  The list is not recursive; it includes only files and directories that are directly in the directory dirPath.  Each item in the list is the name of the file relative to dirPath."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "fromPath",
              "type": "String"
            },
            {
              "name": "toPath",
              "type": "String"
            }
          ],
          "name": "CopyFile",
          "description": "Copies the file fromPath to toPath."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "path",
              "type": "String"
            }
          ],
          "name": "GetVolumeInfo",
          "description": "Returns an containing information about the volume specified in path."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "fromPath",
              "type": "String"
            },
            {
              "name": "toPath",
              "type": "String"
            }
          ],
          "name": "Rename",
          "description": "Renames or moves the file or directory fromPath to toPath."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetVolumeList",
          "description": "Returns an containing Strings representing the available volumes."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "path",
              "type": "String"
            },
            {
              "name": "pattern",
              "type": "String"
            }
          ],
          "name": "Match",
          "description": "Returns an of Strings representing the directory listing of names in dirPath which match the shell-like pattern.  The pattern may contain wildcards like * and ?.  This method is like Find() except that it uses shell-like pattern matching rather than regular expression matching."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "path",
              "type": "String"
            }
          ],
          "name": "CreateDirectory",
          "description": "Creates the directory specified by the path parameter. All directories in path except the last one must already exist; that is, only one directory can be created."
        }
      ],
      "name": "ifFileSystem",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifFileSystem",
      "documentationVersion": 6
    },
    "ifRegistrySection": {
      "methods": [
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "key",
              "type": "String"
            }
          ],
          "name": "Read",
          "description": "Reads and returns the value of the specified key"
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "key",
              "type": "String"
            },
            {
              "name": "value",
              "type": "String"
            }
          ],
          "name": "Write",
          "description": "Replaces the value of the specified key."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "key",
              "type": "String"
            }
          ],
          "name": "Delete",
          "description": "Deletes the specified key."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "key",
              "type": "String"
            }
          ],
          "name": "Exists",
          "description": "Returns true if the specified key exists."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetKeyList",
          "description": "Returns an roList containing one entry per registry key in this section.  Each entry is an roString containing the name of the key."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Flush",
          "description": "Flushes the contents of the registry out to persistent storage. Developers should explicitly Flush after performing a write or series of writes. Flush is transactional and all writes between calls to Flush are atomic."
        }
      ],
      "name": "ifRegistrySection",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifRegistrySection",
      "documentationVersion": 7
    },
    "ifList": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "tval",
              "type": "Dynamic"
            }
          ],
          "name": "AddTail",
          "description": "Add typed value to tail of list."
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "RemoveHead",
          "description": "Remove entry at head of list."
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "RemoveTail",
          "description": "Remove entry at tail of list."
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "GetTail",
          "description": "Get Object at tail of List and keep Object in list."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "Count",
          "description": "Return the number of elements in list."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "tval",
              "type": "Dynamic"
            }
          ],
          "name": "AddHead",
          "description": "Add typed value to head of list."
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "GetHead",
          "description": "Get entry at head of list and keep entry in list."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "ResetIndex",
          "description": "Reset current index or position in list to the head element."
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "RemoveIndex",
          "description": "Remove entry at current index or position from list and increment index or position in list."
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "GetIndex",
          "description": "Get entry at current index or position from list and increment index or position in list."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Clear",
          "description": "Remove all elements from list."
        }
      ],
      "name": "ifList",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifList",
      "documentationVersion": 4
    },
    "ifRegion": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "collisiontype",
              "type": "Integer"
            }
          ],
          "name": "SetCollisionType",
          "description": "Sets the type of region to be used for collision tests with this sprite."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetY",
          "description": "Returns the y coordinate of the region in its bitmap."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetCollisionType",
          "description": "Returns the collision type."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetX",
          "description": "Returns the x coordinate of the region in its bitmap."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "srcRegion",
              "type": "Object"
            }
          ],
          "name": "Set",
          "description": "Takes an roRegion object as input"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "x",
              "type": "Integer"
            },
            {
              "name": "y",
              "type": "Integer"
            }
          ],
          "name": "SetPretranslation",
          "description": "Set the pretranslation for DrawObject, DrawRotatedObject, and DrawScaledObject."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetWidth",
          "description": "Returns the width of the region."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "wrap",
              "type": "Boolean"
            }
          ],
          "name": "SetWrap",
          "description": "If wrap is true, any part of a region that extends beyond the bounds of its bitmap \"wraps\" to the other side of the bitmap and is rendered there. If wrap is false, the part of the region beyond the bounds of its bitmap is not rendered."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "time",
              "type": "Integer"
            }
          ],
          "name": "SetTime",
          "description": "Set the \"frame hold time\" in milliseconds.  This is the duration of each frame of any animated sprite which uses this region."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetBitmap",
          "description": "Returns the roBitmap object of the bitmap this region refers to. A region is always a section of a bitmap."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "x",
              "type": "Dynamic"
            },
            {
              "name": "y",
              "type": "Dynamic"
            },
            {
              "name": "w",
              "type": "Dynamic"
            },
            {
              "name": "h",
              "type": "Dynamic"
            }
          ],
          "name": "Offset",
          "description": "Adds the passed parameters x,y, w, and h to the values of those roRegion fields"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "mode",
              "type": "Integer"
            }
          ],
          "name": "SetScaleMode",
          "description": "Set the scaling mode used for DrawScaledObject"
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetScaleMode",
          "description": "Returns the scaling mode."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "Copy",
          "description": "Returns a newly created copy of the region as a new object."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "xOffset",
              "type": "Integer"
            },
            {
              "name": "yOffset",
              "type": "Integer"
            },
            {
              "name": "Radius",
              "type": "Integer"
            }
          ],
          "name": "SetCollisionCircle",
          "description": "Sets the collision circle used for type 2 collision tests. The center of the circle is the  (x,y) position of the sprite plus the specified offsets.   radius specifies the size of the circle."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetPretranslationY",
          "description": "Returns the pretranslation y value."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetPretranslationX",
          "description": "Returns the pretranslation x value."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "xOffset",
              "type": "Integer"
            },
            {
              "name": "yOffset",
              "type": "Integer"
            },
            {
              "name": "width",
              "type": "Integer"
            },
            {
              "name": "height",
              "type": "Integer"
            }
          ],
          "name": "SetCollisionRectangle",
          "description": "Sets the collision rectangle used for type 1 collision tests. The upper left corner of the rectangle is the (x,y) position of the sprite plus the specified offsets.  width and height specify the size of the rectangle."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetHeight",
          "description": "Returns the height of the region."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetTime",
          "description": "Returns the \"frame hold time\" in milliseconds."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "GetWrap",
          "description": "Returns true if the region will wrap."
        }
      ],
      "name": "ifRegion",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifRegion",
      "documentationVersion": 6
    },
    "ifFloat": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "value",
              "type": "Float"
            }
          ],
          "name": "SetFloat",
          "description": " "
        },
        {
          "returnType": "Float",
          "parameters": [],
          "name": "GetFloat",
          "description": "SetFloat(value As Float) As Void"
        }
      ],
      "name": "ifFloat",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifFloat",
      "documentationVersion": 4
    },
    "ifSystemLog": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "logType",
              "type": "String"
            }
          ],
          "name": "EnableType",
          "description": "Enables log message of type logType. When a log type is enabled, system log messages of that type are sent to the message port which was set using SetMessagePort(). All system log events are disabled by default and must be explicitly enabled by the application."
        }
      ],
      "name": "ifSystemLog",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSystemLog",
      "documentationVersion": 4
    },
    "ifAppInfo": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsDev",
          "description": "Returns true if the application is side-loaded, i.e. the channel ID is \"dev\"."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetDevID",
          "description": "Returns the app\u0027s developer ID, or the keyed developer ID, if the application is side-loaded."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetVersion",
          "description": "Returns the conglomerate version number from the manifest, e.g. \"1.2.3\", as formatted major_version + minor_version + build_version."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetID",
          "description": "Returns the app\u0027s channel ID, e.g. \"12345\" or \"dev\"."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetSubtitle",
          "description": "Returns the subtitle value from the manifest."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetTitle",
          "description": "Returns the title value from the manifest."
        },
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "key",
              "type": "String"
            }
          ],
          "name": "GetValue",
          "description": "Returns the named manifest value, or an empty string if the entry is does not exist."
        }
      ],
      "name": "ifAppInfo",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifAppInfo",
      "documentationVersion": 7
    },
    "ifListScreen": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "contentList",
              "type": "Object"
            }
          ],
          "name": "SetContent",
          "description": "Sets the list of content to be displayed on the screen.  The caller passes an roArray of roAssociativeArrays (Content Meta-Data objects) representing the information for each item to be displayed on screen.  See Content Meta-Data for details on the attributes for each element.  The screen is responsible for fetching the poster art from the URLs specified."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "index",
              "type": "Integer"
            },
            {
              "name": "item",
              "type": "Object"
            }
          ],
          "name": "SetItem",
          "description": "Updates the content of an item at the given index with the content given in the parameter.  The caller passes the index of the item and an roAssociativeArray (Content Meta-Data object) representing the information of the item."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "breadcrumb1",
              "type": "String"
            },
            {
              "name": "breadcrumb2",
              "type": "String"
            }
          ],
          "name": "SetBreadcrumbText",
          "description": "Set the breadcrumb values.  This can be used as an alternative to SetTitle() so that the breadcrumb text alignment is consistent with other screens."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "behavior",
              "type": "String"
            }
          ],
          "name": "SetupBehaviorAtTopRow",
          "description": "behavior is a string that controls how the remote \"up\" key behaves when pressed once the topmost list item is selected. Valid values:"
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Show",
          "description": "Display or refresh the screen after initial creation or state changes."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Close",
          "description": "Close the screen and delete the associated object. Useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "ClearContent",
          "description": "Clears all the content in the list and displays an empty screen. "
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "index",
              "type": "Integer"
            }
          ],
          "name": "SetFocusedListItem",
          "description": "Sets the focused list item to the given index. If the item is not visible, focus jumps to the item and item becomes visible."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "header",
              "type": "String"
            }
          ],
          "name": "SetHeader",
          "description": "Sets the header text of the screen.  The header is a one line text displayed on top of the screen below the overhang.  It can be used as an information text for the screen."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "SetTitle",
          "description": "Sets the title of the screen.  The title is displayed on the top right corner of the screen on the overhang."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "index",
              "type": "Integer"
            }
          ],
          "name": "RemoveContent",
          "description": "Removes a list item at the given index.  The screen refreshes immediately if the item is visible. "
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "item",
              "type": "Object"
            }
          ],
          "name": "AddContent",
          "description": "Adds an item to the end of the list to be displayed on screen.  The caller passes an roAssociativeArray (Content Meta-Data object) representing the information of the item. "
        }
      ],
      "name": "ifListScreen",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifListScreen",
      "documentationVersion": 6
    },
    "ifSlideShow": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "seconds",
              "type": "Integer"
            }
          ],
          "name": "SetPeriod",
          "description": "Defines the number of seconds that each slide is displayed."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Pause",
          "description": "Put the slide show into pause mode."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "loop",
              "type": "Boolean"
            }
          ],
          "name": "SetLoop",
          "description": "If loop is set to true, the slide show will loop through all the slides. "
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "id",
              "type": "Integer"
            },
            {
              "name": "rating",
              "type": "Integer"
            }
          ],
          "name": "AddRatingButton",
          "description": "Adds a star rating button to the screen. The rating is specified as a String that\u0027s value is an integer 1-100 which indicates the number of stars (1 to 5) to be displayed. Think of this as a percentage value \u003c20% \u003d 1 star, This button is displayed in a standard location on the screen and appear in the order added."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "percentage",
              "type": "Float"
            }
          ],
          "name": "SetUnderscan",
          "description": "Set the percentage to reduce the image size by to compensate for monitor overscan. E.g. 2.5 for 2.5%"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "displayMode",
              "type": "String"
            }
          ],
          "name": "SetDisplayMode",
          "description": "Sets the mode for displaying slideshow images. This allows images to be either scaled to completely fill the screen (scale-to-fill) or scaled to fit inside the screen (scale-to-fit) while maintaining aspect ratio. Valid display modes are:"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "color",
              "type": "String"
            }
          ],
          "name": "SetBorderColor",
          "description": "Set the border color used as background around slide to passed color string containing the HTML Hex color value.  "
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "CountButtons",
          "description": "Returns the count of all buttons added to the slide show screen"
        },
        {
          "returnType": "Float",
          "parameters": [],
          "name": "GetMaxUpscale",
          "description": "Get the maximum scale factor.]"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "item",
              "type": "Integer"
            },
            {
              "name": "isImmediate",
              "type": "Boolean"
            }
          ],
          "name": "SetNext",
          "description": "Tells the SlideShow object to queue a particular slide up as the next slide. item is the zero-based index of the item in the content list.  If isImmediate is true it forces an immediate update."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "ClearButtons",
          "description": "Clears all of the buttons from the screen and resets the array of buttons back to default with no buttons set."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "Integer",
              "type": "Dynamic"
            }
          ],
          "name": "SetTextOverlayHoldTime",
          "description": "Defines the number of milliseconds to display the text overlay for each slide. If set to zero, the overlay is off."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "id",
              "type": "Integer"
            },
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "AddButton",
          "description": "Adds a button to the screen identified by the title and ID provided. The buttons are displayed in a standard location on the screen and appear in the order added. The ID is defined by the developer and used to uniquely identify the button instance. When the button is pressed, the script will receive an event from the application containing the ID of the button pressed."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "contentList",
              "type": "Object"
            }
          ],
          "name": "SetContentList",
          "description": "Set the content to be played by the slide show. The caller passes an of s ( objects) representing the information for each title to be displayed on screen. "
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "maxUpscale",
              "type": "Float"
            }
          ],
          "name": "SetMaxUpscale",
          "description": "Set the maximum scale factor for scale-to-fill, zoom-to-fill, and photo-fit modes."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Show",
          "description": "Display or refresh the screen after creation or state changes."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Close",
          "description": "Close the screen and delete the associated object. Useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "ClearContent",
          "description": "Clear all content from the content list."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "contentItem",
              "type": "Object"
            }
          ],
          "name": "AddContent",
          "description": "Add a new  item to the content list for the slide show. New items are added to the end of the list."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "IsVisible",
              "type": "Boolean"
            }
          ],
          "name": "SetTextOverlayIsVisible",
          "description": "If IsVisible is true, display the overlay. If IsVisible is false do not display the overlay. Note that it is OR\u0027d with the overlay hold time. So even if IsVisible is false, during the slide\u0027s overlay hold time the overlay is displayed."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Resume",
          "description": "Put slide show into play mode starting from the pause point."
        }
      ],
      "name": "ifSlideShow",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSlideShow",
      "documentationVersion": 9
    },
    "ifLongInt": {
      "methods": [
        {
          "returnType": "LongInteger",
          "parameters": [],
          "name": "GetLongInt",
          "description": "SetLongInt(value As LongInteger) As Void"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "value",
              "type": "LongInteger"
            }
          ],
          "name": "SetLongInt",
          "description": " "
        }
      ],
      "name": "ifLongInt",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifLongInt",
      "documentationVersion": 3
    },
    "ifDouble": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "value",
              "type": "Double"
            }
          ],
          "name": "SetDouble",
          "description": " "
        },
        {
          "returnType": "Double",
          "parameters": [],
          "name": "GetDouble",
          "description": "SetDouble(value As Double) As Void"
        }
      ],
      "name": "ifDouble",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifDouble",
      "documentationVersion": 6
    },
    "ifSGNodeField": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            },
            {
              "name": "value",
              "type": "Object"
            }
          ],
          "name": "setField"
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "fieldName",
              "type": "String"
            },
            {
              "name": "functionName",
              "type": "String"
            }
          ],
          "name": "observeField"
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "queue_node",
              "type": "Boolean"
            }
          ],
          "name": "queueFields"
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "aa",
              "type": "Object"
            }
          ],
          "name": "addFields"
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            }
          ],
          "name": "getField"
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "field",
              "type": "String"
            },
            {
              "name": "type",
              "type": "String"
            },
            {
              "name": "alwayNotify",
              "type": "Boolean"
            }
          ],
          "name": "addField"
        },
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "field_name",
              "type": "String"
            }
          ],
          "name": "getFieldType"
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "aa",
              "type": "Object"
            }
          ],
          "name": "setFields"
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "field_names",
              "type": "Object"
            }
          ],
          "name": "removeFields"
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "field_name",
              "type": "String"
            }
          ],
          "name": "removeField"
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            }
          ],
          "name": "unobserveField"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "getFields"
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            }
          ],
          "name": "hasField"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "getFieldTypes"
        }
      ],
      "name": "ifSGNodeField",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSGNodeField",
      "documentationVersion": 37
    },
    "ifGetMessagePort": {
      "methods": [
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetMessagePort",
          "description": "Returns the message port (if any) currently associated with the object."
        }
      ],
      "name": "ifGetMessagePort",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifGetMessagePort",
      "documentationVersion": 8
    },
    "ifSocketAddress": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "port",
              "type": "Integer"
            }
          ],
          "name": "SetPort",
          "description": "Sets the port number.  The hostname is unchanged."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetAddress",
          "description": "Returns the IPV4 address in dotted quad form."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "address",
              "type": "String"
            }
          ],
          "name": "SetAddress",
          "description": "Sets the IPV4 address to the string. The string consists of a hostname, optionally followed by a colon and a decimal port number.  The hostname may be either dotted quad (such as \"192.168.1.120\") or a DNS name (such as \"roku.com\"). If a name is given, a DNS lookup is performed to convert it to dotted quad. Use IsAddressValid() to determine the result of the DNS lookup."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "hostname",
              "type": "String"
            }
          ],
          "name": "SetHostName",
          "description": "Sets the hostname.  The port number is unchanged."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetPort",
          "description": "Returns the port number."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsAddressValid",
          "description": "Returns true if the component contains a valid IP address."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetHostName",
          "description": "Returns the hostname."
        }
      ],
      "name": "ifSocketAddress",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSocketAddress",
      "documentationVersion": 4
    },
    "ifCodeRegistrationScreen": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            },
            {
              "name": "spacingFormat",
              "type": "String"
            }
          ],
          "name": "AddFocalText",
          "description": "Adds high visibility focal text to the screen to be placed above the registration code. This text is intended to provide the user important instructions on where to use the registration code. It is generally a few words of instruction followed by the URL for the registration site on the web. Multiple lines of text may be added and the spacing between each is controlled by specifying the spacing format as one of the following: spacing-dense, spacingnormal or spacing-sparse."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "AddHeaderText",
          "description": "Add a string of bold, high visibility text to the screen as a header to introduce the subsequent paragraph(s)."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "id",
              "type": "Integer"
            },
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "AddButton",
          "description": "Adds a button to the screen identified by the title and ID provided. The buttons are at the bottom of the screen and appear in the order added. When the button is pressed, the script will receive an event from the application indicating the ID of the button pressed."
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "String",
              "type": "Dynamic"
            },
            {
              "name": "String",
              "type": "Dynamic"
            }
          ],
          "name": "Void SetBreadcrumbText",
          "description": "Breadcrumbs allow the application to display a two-part navigational title which shows the current and the previous locations in the application hierarchy (e.g. TV  Friends). If both location values are set, the application will display the title in breadcrumb format. If only the first location is set, the application will display the specified text in the title area like the SetTitle API call."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Show",
          "description": "Display or refresh the screen after creation or state changes."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Close",
          "description": "Close the screen and delete the associated object. Useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "SetTitle",
          "description": "Set the title for the screen to the specified string."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "AddParagraph",
          "description": "Adds a paragraph of text to the screen. A paragraph is specified as a single string and are ordered on the screen in the same order as they are added. The roCodeRegistrationScreen handles all text formatting and justification. Spacing is automatically inserted between paragraphs for readability."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "regCode",
              "type": "String"
            }
          ],
          "name": "SetRegistrationCode",
          "description": "Set the registration code (e.g. XM3RT) or text (e.g. retrieving) to be displayed on the screen."
        }
      ],
      "name": "ifCodeRegistrationScreen",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifCodeRegistrationScreen",
      "documentationVersion": 5
    },
    "ifDateTime": {
      "methods": [
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "AsSeconds",
          "description": "Returns the date/time as the number of seconds from the Unix epoch (00:00:00 1/1/1970 GMT)."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "ToLocalTime",
          "description": "Offsets the date/time value from an assumed UTC date/time to a local date/time using the system time zone setting."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetTimeZoneOffset",
          "description": "Returns the offset in minutes from the system time zone to UTC."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetSeconds",
          "description": "Returns the date/time value\u0027s second within the minute as an Integer (0-59)."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetMonth",
          "description": "Returns the date/time value\u0027s month as an Integer (1\u003dJan, 12\u003dDec)."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "AsDateStringNoParam",
          "description": "Same as AsDateString(\"long-date\")."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Mark",
          "description": "Set the date/time value to the current UTC date and time."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "dateString",
              "type": "String"
            }
          ],
          "name": "FromISO8601String",
          "description": "Set the date/time using a string in the ISO 8601 format. For example \"YYYY-MM-DD HH:MM:SS\" e.g \"2009-01-01 01:00:00.000\" or \"2009-01-01T01:00:00.000\". Note that this function is unaware of the local time zone, so these time formats are effectively UTC even though the ISO 8601 spec says they should be in local time. The above formats are also the only formats recognized by this function, even though the ISO 8601 spec contains other valid formats."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetWeekday",
          "description": "Returns the day of the week as a String (e.g. \"Monday\")."
        },
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "format",
              "type": "String"
            }
          ],
          "name": "AsDateString",
          "description": "Returns the date/time as a formatted string in one of the following formats:"
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetMinutes",
          "description": "Returns the date/time value\u0027s minute within the hour as an Integer (0-59)."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetMilliseconds",
          "description": "Returns the date/time value\u0027s millisecond within the second as an Integer (0-999)."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetYear",
          "description": "Returns the date/time value\u0027s year as an Integer, e.g. 2015."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetLastDayOfMonth",
          "description": "Returns the date/time value\u0027s last day of the month as an Integer (28-31)."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "ToISOString",
          "description": "Return an ISO 8601 representation of the date/time value, e.g. \"2015-01-27T13:21:58Z\"."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "numSeconds",
              "type": "Integer"
            }
          ],
          "name": "FromSeconds",
          "description": "Set the date/time value using the number of seconds from the Unix epoch."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetDayOfMonth",
          "description": "Returns the date/time value\u0027s day of the month as an Integer (1-31)."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetHours",
          "description": "Returns the date/time value\u0027s hour within the day as an Integer (0-23)."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetDayOfWeek",
          "description": "Returns the date/time value\u0027s day of week as an Integer (Sunday\u003d0, Monday\u003d1, ..., Saturday\u003d6)."
        }
      ],
      "name": "ifDateTime",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifDateTime",
      "documentationVersion": 11
    },
    "ifSearchScreen": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "searchTerms",
              "type": "Object"
            }
          ],
          "name": "SetSearchTerms",
          "description": "Set the search terms list to the values contained in the array provided. The argument is an array of string values to be displayed."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "searchTerm",
              "type": "String"
            }
          ],
          "name": "AddSearchTerm",
          "description": "Add an individual value to the search term list."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "SetClearButtonEnabled",
          "description": "Show or hide the clear button on the keypad."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "SetSearchTermHeaderText",
          "description": "Set the text to be displayed for the header in the list area. This area could contain a list of search terms previously used as a search history or partial results in the case of a progressive disclosure search."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "SetSearchButtonText",
          "description": "Set the text label to be displayed on the search button. For example \"search\", \"find\", etc."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "SetEmptySearchTermsText",
          "description": "When there are no search terms, display the passed text param in the search terms box."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "ClearSearchTerms",
          "description": "Clear all values from the search terms list."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "location1",
              "type": "String"
            },
            {
              "name": "location2",
              "type": "String"
            }
          ],
          "name": "SetBreadcrumbText",
          "description": "Breadcrumbs allow the application to display a two-part navigational title which shows the current and the previous locations in the application hierarchy (e.g. TV  Friends). If both location values are set, the application will display the title in breadcrumb format. If only the first location is set, the application will display the specified text in the title area like the SetTitle API call."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "SetBreadcrumbEnabled",
          "description": "Show or hide the breadcrumb text in the title area."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "SetClearButtonText",
          "description": "Set the text label for the button at the bottom of the list area. Example text might be \"clear history\", \"clear results\" or similar."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Show",
          "description": "Display or refresh the screen after creation or state changes."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Close",
          "description": "Close the screen and delete the associated object. Useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "SetSearchText",
          "description": "Set the keyboard search string box to the passed text."
        }
      ],
      "name": "ifSearchScreen",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSearchScreen",
      "documentationVersion": 6
    },
    "ifVideoScreen": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "SetPreviewMode",
          "description": "Set preview mode on/off. In preview mode, trick play operations (fast forward and rewind) are disabled."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Pause",
          "description": "Programmatically pause the video."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "SetLoop",
          "description": "If enable is true, after playing to the end of the content, the player will immediately start playing again from the beginning. The default is false."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "Integer",
              "type": "Dynamic"
            }
          ],
          "name": "SetMacrovisionLevel",
          "description": "Deprecated stub function which does nothing. Roku no longer supports Macrovision and this function exists as a no-op so that legacy scripts do not break."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "keys[]",
              "type": "Dynamic"
            }
          ],
          "name": "SetTimedMetaDataForKeys",
          "description": "This method is called to specify the timedMetaData keys that the BrightScript application is interested in receiving from the timedMetaData event.  If the keys array is empty, all the timed metadata associated with the current stream is sent with the isTimedMetaData event.  If the keys array is invalid, then do not return any keys to the BrightScript application.  Any keys not specified with this method are deleted by the firmware and never returned to the BrightScript application."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "period",
              "type": "Integer"
            }
          ],
          "name": "SetPositionNotificationPeriod",
          "description": "Set interval to receive playback position events from the roVideoScreen. The notification period is specified in seconds. Notification events sent to the script specify the position in seconds relative to the beginning of the stream. If the value is zero, position notifications are never sent. The default value is zero."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "Integer",
              "type": "Dynamic"
            },
            {
              "name": "Integer",
              "type": "Dynamic"
            }
          ],
          "name": "SetMaxVideoDecodeResolution",
          "description": "Set the max resolution required by your video."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "EnableTrickPlay",
          "description": "Enables or disables trick play during playback."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "level",
              "type": "Integer"
            }
          ],
          "name": "SetCGMS",
          "description": "Set CGMS (Copy Guard Management System) on analog outputs to the desired level."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "content",
              "type": "Object"
            }
          ],
          "name": "SetContent",
          "description": "Set the content to be played in the . The content is passed by the caller as an describing the attributes for the title ().  You can call roVideoScreen.SetContent() while playing video, and it will use the new data (release date, length, and title) when showing the program info in the HUD (Heads Up Display)."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Show",
          "description": "Display or refresh the screen after creation or state changes."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Close",
          "description": "Close the screen and delete the associated object. Useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "rect",
              "type": "Object"
            }
          ],
          "name": "SetDestinationRect",
          "description": "Set the target display window for the video."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "PreBuffer",
          "description": "Available since firmware version 7.2"
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Resume",
          "description": "Programmatically resume the video."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Integer"
            }
          ],
          "name": "Seek",
          "description": "Set the play start offset to the specified milliseconds."
        }
      ],
      "name": "ifVideoScreen",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifVideoScreen",
      "documentationVersion": 17
    },
    "ifSocketAsync": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsWritable",
          "description": "Returns true if underlying select determines non-blocking write is possible."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsReadable",
          "description": "Returns true if underlying select determines non-blocking read is possible."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsException",
          "description": "Returns true if underlying select determines non-blocking read of OOB data is possible."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetID",
          "description": "Returns a unique identifier that can be compared to the value returned by roSocketEvent.getSocketID() to match the underlying socket that the event is for."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Dynamic"
            }
          ],
          "name": "NotifyReadable",
          "description": "Enable roSocketEvent events to be sent via the message port when the underlying socket becomes readable."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Dynamic"
            }
          ],
          "name": "NotifyWritable",
          "description": "Enable roSocketEvent events to be sent via the message port when the underlying socket becomes writable."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Dynamic"
            }
          ],
          "name": "NotifyException",
          "description": "Enable roSocketEvent events to be sent via the message port when the underlying socket gets an exception or OOB data."
        }
      ],
      "name": "ifSocketAsync",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSocketAsync",
      "documentationVersion": 5
    },
    "ifAssociativeArray": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "key",
              "type": "String"
            }
          ],
          "name": "Delete",
          "description": "Look for an entry in the array associated with the specified key. If there is such an value then it is deleted and true is returned. If not then false is returned."
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "key",
              "type": "String"
            }
          ],
          "name": "LookupCI",
          "description": "Same as \"Lookup\" except key comparison is always case insensitive, regardless of case mode."
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "aa",
              "type": "Object"
            }
          ],
          "name": "Append",
          "description": "Append an AssociativeArray to this one.  If any key in aa is already associated with a value in this AssociativeArray, the current value is discarded and is replaced with the value in aa."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "Keys",
          "description": "Returns an array containing the associative array keys in lexicographical order."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "key",
              "type": "String"
            },
            {
              "name": "value",
              "type": "Dynamic"
            }
          ],
          "name": "AddReplace",
          "description": "Add a new entry to the array associating the supplied value with the supplied key string. Only one value may be associated with a key.  If the key is already associated with a value, the existing value is discarded."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "key",
              "type": "String"
            }
          ],
          "name": "DoesExist",
          "description": "Look for an entry in the array associated with the specified key. If there is no associated object then false is returned. If there is such an object then true is returned."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "SetModeCaseSensitive",
          "description": "Associative Array lookups are case insensitive by default. This call makes all subsequent actions case sensitive."
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "key",
              "type": "String"
            }
          ],
          "name": "Lookup",
          "description": "Return the value in the array associated with the specified key. If there is no value associated with the key then type \"invalid\" is returned.  Key comparison is case-insensitive, unless SetModeCaseSensitive() has been called."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "Count",
          "description": "Returns the number of keys in the associative array."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Clear",
          "description": "Remove all key/values from the associative array."
        }
      ],
      "name": "ifAssociativeArray",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifAssociativeArray",
      "documentationVersion": 9
    },
    "ifEVPCipher": {
      "methods": [
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "bytes",
              "type": "Object"
            }
          ],
          "name": "Process",
          "description": "The parameter should be an .  The data in the array is encrypted or decrypted. Returns an containing the result."
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "encrypt",
              "type": "Boolean"
            },
            {
              "name": "format",
              "type": "String"
            },
            {
              "name": "key",
              "type": "String"
            },
            {
              "name": "iv",
              "type": "String"
            },
            {
              "name": "padding",
              "type": "Integer"
            }
          ],
          "name": "Setup",
          "description": "Setup and initialize a new cipher context. The Setup function takes the following parameters:"
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "bytes",
              "type": "Object"
            }
          ],
          "name": "Update",
          "description": "The parameter should be an .  The data in the array is encrypted or decrypted.  Returns an containing a subset of the result.  Some or all of the result may not be returned until the next call to Update()."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "Reinit",
          "description": "Reinitialize an existing cipher context.  This can be called to reuse an existing roEVPCipher object to encrypt new data.  Returns 0 on success or non-zero on failure."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "Final",
          "description": "Signals that all data has been submitted by previous calls to Update().  Returns the last remaining encrypted or decrypted bytes."
        }
      ],
      "name": "ifEVPCipher",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifEVPCipher",
      "documentationVersion": 5
    },
    "ifHdmiStatus": {
      "methods": [
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetHdcpVersion",
          "description": "Returns the version number of the currently established HDCP link. "
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsConnected",
          "description": "Returns true if the HDMI or MHL output is connected to an HDMI device."
        }
      ],
      "name": "ifHdmiStatus",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifHdmiStatus",
      "documentationVersion": 4
    },
    "ifLocalization": {
      "methods": [
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "dirName",
              "type": "String"
            },
            {
              "name": "fileName",
              "type": "String"
            }
          ],
          "name": "GetLocalizedAsset",
          "description": "Returns an appropriate asset path based on the user\u0027s currently selected language.  dirName is the name of a subdirectory in the directory pkg:/locale/XX_YY/ where XX_YY is the current language setting.  fileName is the name of the file.  Example usage:"
        },
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "count",
              "type": "Integer"
            },
            {
              "name": "zeroString",
              "type": "String"
            },
            {
              "name": "oneString",
              "type": "String"
            },
            {
              "name": "pluralString",
              "type": "String"
            }
          ],
          "name": "GetPluralString",
          "description": "If count is 0, this returns zeroString.  If count is 1, it returns oneString.  Otherwise, it replaces \"^n\" in pluralString with count and returns the result.  For example, you might call it as follows:  "
        }
      ],
      "name": "ifLocalization",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifLocalization",
      "documentationVersion": 8
    },
    "ifSocketStatus": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "eOK",
          "description": "Return true if errno is has no hard error, but there could be async conditions: EAGAIN, EALREADY, EINPROGRESS, EWOULDBLOCK"
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "eDestAddrReq",
          "description": "Return true if errno is EDESTADDRREQ."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "eInProgress",
          "description": "Return true if errno is EINPROGRESS."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "eAgain",
          "description": "Return true if errno is EAGAIN."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "eBadAddr",
          "description": "Return true if errno is EBADADDR."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "eSuccess",
          "description": "Return true if errno is 0 (no errors)."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "eInvalid",
          "description": "Return true if errno is EINVALID."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "eWouldBlock",
          "description": "Return true if errno is EWOULDBLOCK."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "eHostUnreach",
          "description": "Return true if errno is EHOSTUNREACH."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "eAlready",
          "description": "Return true if errno is EALREADY."
        }
      ],
      "name": "ifSocketStatus",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSocketStatus",
      "documentationVersion": 5
    },
    "ifTextScreen": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "location1",
              "type": "String"
            },
            {
              "name": "location2",
              "type": "String"
            }
          ],
          "name": "SetBreadcrumbText",
          "description": "Breadcrumbs allow the application to display a two-part navigational title which shows the current and the previous locations in the application hierarchy (e.g. TV  Friends). If both location values are set, the application will display the title in breadcrumb format. If only the first location is set, the application will display the specified text in the title area like the SetTitle API call."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "SetText",
          "description": "Set the main text of the screen.  The roTextScreen handles all text formatting and justification.  Multiple calls to SetText() are ignored."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "id",
              "type": "Integer"
            },
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "AddButton",
          "description": "Adds a button to the screen identified by the title and ID provided. The buttons are displayed in a standard location on the screen and appear in the order added. The ID is defined by the developer and used to uniquely identify the button instance. When the button is pressed, the script will receive an event from the application containing the ID of the button pressed and allowing the script to perform the desired action for that case."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Show",
          "description": "Display or refresh the screen after initial creation or state changes."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Close",
          "description": "Close the screen and delete the associated object. Useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "SetTitle",
          "description": "Set the title for the screen to the specified string.  This text appears in the overhang."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "AddText",
          "description": "Add text to the main text of the screen.  The text is appended to the end of any existing text."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "SetHeaderText",
          "description": "Add a string of bold, high visibility text to the screen as a header to appear above the main body of text.  Multiple calls to SetHeaderText() are ignored."
        }
      ],
      "name": "ifTextScreen",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifTextScreen",
      "documentationVersion": 8
    },
    "ifToStr": {
      "methods": [
        {
          "returnType": "String",
          "parameters": [],
          "name": "ToStr",
          "description": "Returns the value as a string."
        }
      ],
      "name": "ifToStr",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifToStr",
      "documentationVersion": 4
    },
    "ifSGNodeChildren": {
      "methods": [
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "child",
              "type": "roSGNode"
            }
          ],
          "name": "appendChild"
        },
        {
          "returnType": "roSGNode",
          "parameters": [],
          "name": "getParent"
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "removeChildren",
          "description": "Available since firmware version 7.2"
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "newChild",
              "type": "roSGNode"
            },
            {
              "name": "index",
              "type": "Integer"
            }
          ],
          "name": "replaceChild"
        },
        {
          "returnType": " Object",
          "parameters": [],
          "name": "getAll"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "getRoots"
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "appendChildren",
          "description": "Available since firmware version 7.2"
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "nodeType",
              "type": "String"
            }
          ],
          "name": "createChild"
        },
        {
          "returnType": "roSGNode",
          "parameters": [
            {
              "name": "index",
              "type": "Integer"
            }
          ],
          "name": "getChild"
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "child",
              "type": "roSGNode"
            }
          ],
          "name": "removeChild"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "getRootsMeta"
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "removeChildrenIndex",
          "description": "Available since firmware version 7.2"
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "child",
              "type": "roSGNode"
            },
            {
              "name": "index",
              "type": "Integer"
            }
          ],
          "name": "insertChild"
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "getChildCount"
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "getChildren",
          "description": "Available since firmware version 7.2"
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "index",
              "type": "Integer"
            }
          ],
          "name": "removeChildIndex"
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "newParent",
              "type": "roSGNode"
            },
            {
              "name": "adjustTransform",
              "type": "Boolean"
            }
          ],
          "name": "reparent"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "getAllMeta"
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "createChildren",
          "description": "Available since firmware version 7.2"
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "replaceChildren",
          "description": "Available since firmware version 7.2"
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "insertChildren",
          "description": "Available since firmware version 7.2"
        }
      ],
      "name": "ifSGNodeChildren",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSGNodeChildren",
      "documentationVersion": 28
    },
    "ifHttpAgent": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            },
            {
              "name": "value",
              "type": "String"
            }
          ],
          "name": "AddHeader",
          "description": "Add the specified HTTP header to the list of headers that will be sent in the HTTP request."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "path",
              "type": "String"
            }
          ],
          "name": "SetCertificatesFile",
          "description": "Set the certificates file used for SSL to the .pem file specified."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "nameValueMap",
              "type": "Object"
            }
          ],
          "name": "SetHeaders",
          "description": "nameValueMap should be an .  Each name/value in the AA is added as an HTTP header."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "ClearCookies",
          "description": "Removes all cookies from the cookie cache."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "EnableCookies",
          "description": "Causes any Set-Cookie headers returned from the request to be interpreted and the resulting cookies to be added to the cookie cache."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "depth",
              "type": "Integer"
            }
          ],
          "name": "SetCertificatesDepth",
          "description": "Set the maximum depth of the certificate chain that will be accepted."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "domain",
              "type": "String"
            },
            {
              "name": "path",
              "type": "String"
            }
          ],
          "name": "GetCookies",
          "description": "Returns any cookies from the cookie cache that match the specified domain and path. "
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "InitClientCertificates",
          "description": "Initialize the object to send the Roku client certificate."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "cookies",
              "type": "Object"
            }
          ],
          "name": "AddCookies",
          "description": "cookies should be an roArray of roAssociativeArrays. "
        }
      ],
      "name": "ifHttpAgent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifHttpAgent",
      "documentationVersion": 11
    },
    "ifSocketOption": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "size",
              "type": "Integer"
            }
          ],
          "name": "SetRcvBuf",
          "description": "Set the current receive buffer size."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "GetReuseAddr",
          "description": "Return true if an address that has been previously assigned can be immediately reassigned."
        },
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "reuse",
              "type": "Boolean"
            }
          ],
          "name": "SetReuseAddr",
          "description": "Set the whether an address that has been previously assigned can be immediately reassigned."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "GetOOBInline",
          "description": "Return true if Out Of Bounds data is read inline with regular data."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "timeout",
              "type": "Integer"
            }
          ],
          "name": "SetSendTimeout",
          "description": "Set the current send timeout, in seconds."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "ttl",
              "type": "Integer"
            }
          ],
          "name": "SetTTL",
          "description": "Set the integer TTL (Time To Live) value for all IP packets on the socket."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetSendBuf",
          "description": "Return the current send buffer size."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "inline",
              "type": "Boolean"
            }
          ],
          "name": "SetOOBInline",
          "description": "Set whether OOB data is received in regular read."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "size",
              "type": "Integer"
            }
          ],
          "name": "SetSendBuf",
          "description": "Set the current send buffer size."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetTTL",
          "description": "Return the integer TTL (Time To Live) value for all IP packets on the socket."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetSendTimeout",
          "description": "Return the current send timeout, in seconds."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetReceiveTimeout",
          "description": "Return the current receive timeout, in seconds."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "timeout",
              "type": "Integer"
            }
          ],
          "name": "SetReceiveTimeout",
          "description": "Set the current receive timeout, in seconds."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetRcvBuf",
          "description": "Return the current receive buffer size."
        }
      ],
      "name": "ifSocketOption",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSocketOption",
      "documentationVersion": 5
    },
    "ifAudioPlayer": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Play",
          "description": "Put the Audio Player into play mode starting at the current item in the Content List. This will stop any currently playing content."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Pause",
          "description": "Put Audio Player into pause mode.  It is an error to Pause if player is not in play mode."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "SetLoop",
          "description": "Enable/disable the automatic replaying of the Content List.  When enabled, after playing the last item in the content list, the player begins playing the first item.  When disabled, after playing the last item in the content list, the player stops."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "item",
              "type": "Integer"
            }
          ],
          "name": "SetNext",
          "description": "Set what the next item to be played within the Content List should be.  item is the zero-based index of the item in the content list.  This item will be played after the currently playing item finishes."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "keys[]",
              "type": "Dynamic"
            }
          ],
          "name": "SetTimedMetaDataForKeys",
          "description": "This method is called to specify the timedMetaData keys that the Brightscript channel is interested in receiving from the timedMetaData event.  If the keys array is empty, all the timed metadata associated with the current stream is sent with the isTimedMetaData event.  If the keys array is invalid, then do not return any keys to the Brightscript channel.  Any keys not specified with this method are deleted by the firmware and never returned to the Brightscript application."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Stop",
          "description": "Stop Audio Player from playing or pausing and cleanup."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "contentList",
              "type": "Object"
            }
          ],
          "name": "SetContentList",
          "description": "Set the content list to be played by the Audio Player. The caller passes an Array of AssociativeArrays (Content Meta-Data objects) representing the information for each stream to be played. See for details on the attributes for each element in the array."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "ClearContent",
          "description": "Clear the content list."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "contentItem",
              "type": "Object"
            }
          ],
          "name": "AddContent",
          "description": "Add a new ContentMetaData item to the content list for the Audio Player. The new item is added to the end of the content list."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Resume",
          "description": "Put Audio Player into play mode starting from the pause point.  It is an error to Resume if the player is not in pause mode."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "offsetMs",
              "type": "Integer"
            }
          ],
          "name": "Seek",
          "description": "Set the start point of playback for the current item to offsetMs milliseconds. If the item is currently playing, playback will be interrupted and will restart at the specified offset.  If the item is not currently playing, playback will begin at the specified offset when Play() is called."
        }
      ],
      "name": "ifAudioPlayer",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifAudioPlayer",
      "documentationVersion": 10
    },
    "ifRoSGScreen": {
      "methods": [
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "port",
              "type": "roMessagePort"
            }
          ],
          "name": "SetMessagePort"
        },
        {
          "returnType": "roMessagePort",
          "parameters": [],
          "name": "GetMessagePort"
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "getGlobalNode",
          "description": "Available since firmware version 7.1"
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "Show"
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "Close"
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "sceneType",
              "type": "String"
            }
          ],
          "name": "CreateScene"
        },
        {
          "returnType": "roSGNode",
          "parameters": [],
          "name": "GetScene"
        }
      ],
      "name": "ifRoSGScreen",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifRoSGScreen",
      "documentationVersion": 17
    },
    "ifEnum": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsEmpty",
          "description": "Returns true if the enumeration contains no elements."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsNext",
          "description": "Returns true if the current position is not past the end of the enumeration."
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "Next",
          "description": "Returns the value at the current position and increments the position.  If the last element of the enumeration is returned, sets the current position to indicate that it is now past the end.  If the current position is already past the end (that is, the last element has already been returned by a previous call to Next()), return invalid."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Reset",
          "description": "Resets the current position to the first element of the enumeration."
        }
      ],
      "name": "ifEnum",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifEnum",
      "documentationVersion": 6
    },
    "ifSetMessagePort": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "port",
              "type": "Object"
            }
          ],
          "name": "SetMessagePort",
          "description": "Set the roMessagePort to be used for all events from the screen."
        }
      ],
      "name": "ifSetMessagePort",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSetMessagePort",
      "documentationVersion": 10
    },
    "ifArrayGet": {
      "methods": [
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "index",
              "type": "Integer"
            }
          ],
          "name": "GetEntry",
          "description": "Returns an Array entry of a given index. Entries start at zero. If an entry is fetched that has not been set, \"invalid\" is returned."
        }
      ],
      "name": "ifArrayGet",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifArrayGet",
      "documentationVersion": 5
    },
    "ifPosterScreen": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "sdAdURL",
              "type": "String"
            },
            {
              "name": "hdAdURL",
              "type": "String"
            }
          ],
          "name": "SetAdURL",
          "description": "Set the URL of the banner ad image to be displayed on the poster screen. This is currently only valid for the \"arced-landscape\" and \"flat-category\" style of poster screens. Banner ad sizes are as follows:"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetContentList",
          "description": "Returns the of content meta-data passed via the SetContentList call."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "SetTitle",
          "description": "Set the title for the screen to the specified string."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "itemIndex",
              "type": "Integer"
            }
          ],
          "name": "SetFocusedListItem",
          "description": "Zero-based index of item in poster list to be selected. The selected item is displayed in the center of the screen and bordered to designate focus."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "isSelectable",
              "type": "Boolean"
            }
          ],
          "name": "SetAdSelectable",
          "description": "Sets the banner ad to be selectable or display only. By default the banner ad is not selectable. When enabled the user can navigate and move focus to the banner image. When selected, the screen will receive an roPosterScreenEvent and the msg will return true for isAdSelected()."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "sdPosterUrl",
              "type": "String"
            },
            {
              "name": "hdPosterUrl",
              "type": "String"
            }
          ],
          "name": "SetLoadingPoster",
          "description": "This function lets you specify the default images to show in the poster screen while the poster screen content is loading."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "ClearMessage",
          "description": "Clears the message from the previous ShowMessage call."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "displayMode",
              "type": "String"
            }
          ],
          "name": "SetListDisplayMode",
          "description": "Sets the mode for displaying images in the poster screen. This allows images to be either scaled to completely fill the poster frame (scale-to-fill) or scaled to fit inside the poster frame (scale-to-fit) while maintaining aspect ratio. Valid display modes are:"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "location1",
              "type": "String"
            },
            {
              "name": "location2",
              "type": "String"
            }
          ],
          "name": "SetBreadcrumbText",
          "description": "Breadcrumbs allow the application to display a two-part navigational title which shows the current and the previous locations in the application hierarchy (e.g. TV  Friends). If both location values are set, the application will display the title in breadcrumb format. If only the first location is set, the application will display the specified text in the title area like the SetTitle API call."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "SetBreadcrumbEnabled",
          "description": "Show or hide the breadcrumb text in the title area."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "names",
              "type": "Object"
            }
          ],
          "name": "SetListNames",
          "description": "Sets the list of categories to be displayed in the filter banner at the top of the poster screen. The caller passes the list as an array of Strings. Each String represents a new category to be displayed at the top. The display order is the same as the order of the categories in the array passed by the caller."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "itemIndex",
              "type": "Integer"
            }
          ],
          "name": "SetFocusedList",
          "description": "Zero-based index of item in filter banner to be given focus. The selected item is displayed in the center of the filter banner and highlighted to designate focus."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "contentList",
              "type": "Object"
            }
          ],
          "name": "SetContentList",
          "description": "Set the list of content to be displayed by the screen. The caller passes an of s ( objects) representing the information for each title to be displayed on screen.  The screen is responsible for fetching the poster art from the URL\u0027s specified and all user navigation within the list."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "displayMode",
              "type": "String"
            }
          ],
          "name": "SetAdDisplayMode",
          "description": "Sets the scale mode for displaying ad images on the poster screen. The ad display is only available on \"arced-landscape\" and \"flat-category\" list styles. Valid display modes are:"
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Show",
          "description": "Display or refresh the screen after initial creation or state changes."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Close",
          "description": "Close the screen and delete the associated object. Useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "style",
              "type": "String"
            }
          ],
          "name": "SetListStyle",
          "description": "Set the display style for the poster screen. Styles allow the poster screen to look differently for different types of content or different usage. The following is the list of valid screen styles:"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "SetFocusToFilterBanner",
          "description": "When enable is true, set focus to filter banner."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "message",
              "type": "String"
            }
          ],
          "name": "ShowMessage",
          "description": "Displays a semi-transparent popup message box to the user in the center of the screen over the poster screen. Generally used for error messages."
        }
      ],
      "name": "ifPosterScreen",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifPosterScreen",
      "documentationVersion": 10
    },
    "ifFontRegistry": {
      "methods": [
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "size",
              "type": "Integer"
            },
            {
              "name": "bold",
              "type": "Boolean"
            },
            {
              "name": "italic",
              "type": "Boolean"
            }
          ],
          "name": "GetDefaultFont",
          "description": "Returns an roFont object representing the system font.  The system font is always available, even if Register() has not been called.  Size, bold and italic are interpreted as in GetFont()."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetDefaultFontSize",
          "description": "Returns the default font size."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "path",
              "type": "String"
            }
          ],
          "name": "Register",
          "description": "Register a font file (.ttf or .otf format).  Each font file defines one or more font families (usually one)."
        },
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "family",
              "type": "String"
            },
            {
              "name": "size",
              "type": "Integer"
            },
            {
              "name": "bold",
              "type": "Boolean"
            },
            {
              "name": "italic",
              "type": "Boolean"
            }
          ],
          "name": "Get",
          "description": "Returns a valid font string that can be used as the value of the Font content meta-data parameter recognized by the ."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetFamilies",
          "description": "Returns an  of strings that represent the names of the font families which have been registered via Register().  Each name can be passed as the first parameter to GetFont()."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "family",
              "type": "String"
            },
            {
              "name": "size",
              "type": "Integer"
            },
            {
              "name": "bold",
              "type": "Boolean"
            },
            {
              "name": "italic",
              "type": "Boolean"
            }
          ],
          "name": "GetFont",
          "description": "Returns an roFont object representing a font from the specified family, selected from the fonts previously registered via Register().  size is the requested font size, in pixels, not points.  bold and italic specify font variants which may be (but are not always) supported by the font file."
        }
      ],
      "name": "ifFontRegistry",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifFontRegistry",
      "documentationVersion": 8
    },
    "ifSprite": {
      "methods": [
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetY",
          "description": "Returns the y coordinate of the sprite."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetX",
          "description": "Returns the x coordinate of the sprite."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetZ",
          "description": "Returns the z value of the sprite."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "CheckMultipleCollisions",
          "description": "Like CheckCollision but returns an array of all colliding sprites. If there are no collisions return invalid."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Remove",
          "description": "Remove the sprite from the managing roComposite object and delete the sprite."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "data",
              "type": "Dynamic"
            }
          ],
          "name": "SetData",
          "description": "Associate user defined data with the sprite. The data can be any type including intrinsic types or objects."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetMemberFlags",
          "description": "Returns the value of member flags variable."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "x",
              "type": "Integer"
            },
            {
              "name": "y",
              "type": "Integer"
            },
            {
              "name": "width",
              "type": "Integer"
            },
            {
              "name": "height",
              "type": "Integer"
            }
          ],
          "name": "OffsetRegion",
          "description": "Calls Region.Offset() on this Sprite\u0027s region. Adjusts the part of an \u0027s bitmap that is being displayed as the sprite. Wrap is taken into consideration."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "region",
              "type": "Object"
            }
          ],
          "name": "SetRegion",
          "description": "Set the region of the sprite to the passed in region roRegion object. If one already is set, it is replaced."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "SetDrawableFlag",
          "description": "Sets whether this sprite is drawable or just used for collision tests. An undrawable sprite can be used to define a region in the background that needs collision testing. It can also be used as an auxiliary collision region for a more complex sprite defined in another sprite. The default value of true is set when a sprite is created. The default value is true."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "x",
              "type": "Integer"
            },
            {
              "name": "y",
              "type": "Integer"
            }
          ],
          "name": "MoveTo",
          "description": "Move the sprite to coordinate x,y."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "GetDrawableFlag",
          "description": "Returns the value of the Drawable Flag."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "flags",
              "type": "Integer"
            }
          ],
          "name": "SetMemberFlags",
          "description": "Sets flags to define the sprite membership.These flags are used with CollidableFlags to define what sprites are allowed to collide. The default value is 1."
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "GetData",
          "description": "Returns any user data associated with the sprite previously set via SetData()."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetCollidableFlags",
          "description": "Returns the value of collidable flags variable."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "xOffset",
              "type": "Integer"
            },
            {
              "name": "yOffset",
              "type": "Integer"
            }
          ],
          "name": "MoveOffset",
          "description": "Move the sprite to the current position plus the xOffset and yOffset."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "flags",
              "type": "Integer"
            }
          ],
          "name": "SetCollidableFlags",
          "description": "Sets bits to determine what sprites will be checked for collisions. The sprites that are checked must have the corresponding bits sets in their MemberFlags. The default value is 1."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetRegion",
          "description": "Returns an roRegion object that specifies the region of a bitmap that is the sprite\u0027s display graphic."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "z",
              "type": "Integer"
            }
          ],
          "name": "SetZ",
          "description": "Sets the z value of the sprite. The z value defines the order in which sprites are drawn.  Sprites with higher z values are drawn after (in front of) sprites with lower z values. The default z value is 0."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "CheckCollision",
          "description": "Returns the first that this sprite collides with. The collision area is the entire sprite\u0027s bounding box, and the sprites must actually be overlapped to detect a collision. That is, if a fast moving sprite moves \"through\" another sprite without actually overlapping when this call is made, no collision is detected."
        }
      ],
      "name": "ifSprite",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSprite",
      "documentationVersion": 6
    },
    "ifSourceIdentity": {
      "methods": [
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetSourceIdentity",
          "description": "Return the id currently associated with this source (event generating) or event object."
        }
      ],
      "name": "ifSourceIdentity",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSourceIdentity",
      "documentationVersion": 8
    },
    "ifVideoPlayer": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Pause",
          "description": "Put roVideoPlayer into pause mode."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "loop",
              "type": "Boolean"
            }
          ],
          "name": "SetLoop",
          "description": "Enable/Disable the automatic replaying of the content list."
        },
        {
          "returnType": "object",
          "parameters": [],
          "name": "GetAudioTracks",
          "description": "Function returns an array of audio tracks contained in the current stream.  Each element of the array represents a single audio track which contains the following attributes:"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "keys[]",
              "type": "Dynamic"
            }
          ],
          "name": "SetTimedMetaDataForKeys",
          "description": "This method is called to specify the timedMetaData keys that the Brightscript channel is interested in receiving from the timedMetaData event.  If the keys array is empty, all the timed metadata associated with the current stream is sent with the isTimedMetaData event.  If the keys array is invalid, then do not return any keys to the Brightscript channel.  Any keys not specified with this method are deleted by the firmware and never returned to the Brightscript application."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "level",
              "type": "Integer"
            }
          ],
          "name": "SetMacrovisionLevel",
          "description": "Deprecated stub function does nothing. Roku no longer supports Macrovision and this function exists as a no-op so that legacy scripts do not break."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Stop",
          "description": "Stop roVideoPlayer from playing or pausing and cleanup."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "period",
              "type": "Integer"
            }
          ],
          "name": "SetPositionNotificationPeriod",
          "description": "Set interval to receive playback position events from the roVideoPlayer. The notification period is specified in seconds. Notification events sent to the script specify the position in seconds relative to the beginning of the stream. If the value is zero, position notifications are never sent. The default value is zero."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "width",
              "type": "Integer"
            },
            {
              "name": "height",
              "type": "Integer"
            }
          ],
          "name": "SetMaxVideoDecodeResolution",
          "description": "Set the max resolution required by your video."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetPlaybackDuration",
          "description": "Returns the duration of the video, in seconds.  This information may not be available until after the video starts playing.  A value of zero is returned if the duration is unknown."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "level",
              "type": "Integer"
            }
          ],
          "name": "SetCGMS",
          "description": "Set CGMS (Copy Guard Management System) on analog outputs to the desired level."
        },
        {
          "returnType": "void",
          "parameters": [
            {
              "name": "trackID",
              "type": "Integer"
            }
          ],
          "name": "ChangeAudioTrack",
          "description": "This function is called to change the currently playing audio track.  For content with multiple audio tracks, the current track can be selected programmatically using this function.  The function is passed a track ID value, as found in the Track attribute of the audio track records returned by GetAudioTracks()."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetCaptionRenderer",
          "description": "This method returns the roCaptionRenderer instance associated with this roVideoPlayer.  Channels that render their own captions need to call this method to get the caption renderer for their video player in order to do capture rendering. See roCaptionRenderer for details."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Play",
          "description": "Put the roVideoPlayer into play mode starting at the beginning of the content list."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "item",
              "type": "Integer"
            }
          ],
          "name": "SetNext",
          "description": "Set what the next item to be played within the Content List should be."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "contentList",
              "type": "Object"
            }
          ],
          "name": "SetContentList",
          "description": "Set the content to be played by the roVideoPlayer. The caller passes an  of s ( objects) representing the information for each stream to be played."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "ClearContent",
          "description": "Clear all content from the roVideoPlayer."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "rect",
              "type": "Object"
            }
          ],
          "name": "SetDestinationRect",
          "description": "Set the target display window for the video."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "PreBuffer",
          "description": "Available since firmware version 7.2"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "contentItem",
              "type": "Object"
            }
          ],
          "name": "AddContent",
          "description": "Add a new item to the content list for the roVideoPlayer. New items are added to the end of the list."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Resume",
          "description": "Put roVideoPlayer into play mode starting from the pause point."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "offsetMs",
              "type": "Integer"
            }
          ],
          "name": "Seek",
          "description": "Set the start point of playback for the current video to offsetMs milliseconds."
        }
      ],
      "name": "ifVideoPlayer",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifVideoPlayer",
      "documentationVersion": 19
    },
    "ifAppManager": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "signedIn",
              "type": "Boolean"
            }
          ],
          "name": "SetUserSignedIn",
          "description": "Available since firmware version 7.1"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "attributeName",
              "type": "String"
            },
            {
              "name": "attributeValue",
              "type": "String"
            }
          ],
          "name": "SetThemeAttribute",
          "description": "Set an individual theme attribute for the application. The attributeName is the name of one of the settable theme attributes and the value is the desired setting. This value will override the default value for that attribute or modify the value provided by a previous SetTheme or SetThemeAttribute call to the new value provided. If the attributeName is not valid, no action is performed."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetScreensaverTimeout",
          "description": "Returns the user\u0027s screensaver wait time setting in number of minutes, or zero if the screensaver is disabled."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "attributeName",
              "type": "String"
            }
          ],
          "name": "ClearThemeAttribute",
          "description": "Clears a previously set attribute and reverts to its default value."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "UpdateLastKeyPressTime",
          "description": "UpdateLastKeyPressTime can be called to simulate user activity.    This resets the idle timer that is used to count down to screensaver activation, so if a screensaver is not already displayed it will reset the timer and defer the activation.  This should only be used when the user has specifically initiated a playback mode in your app, in which case you can call UpdateLastKeyPressTime periodically, such as when advancing the slideshow image."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "attributeArray",
              "type": "Object"
            }
          ],
          "name": "SetTheme",
          "description": "Set a group of theme attributes for the application. The attributeArray is an of attribute/value pairs. The program may create the roAssociativeArray at runtime or read it from an XML file using the object. Existing values for attributes will be overwritten by the values provided. Any values set by a previous SetTheme or SetThemeAttribute call, but not included in the array currently provided by with the subsequent call will remain unchanged.  See  the list of valid attributes."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetUptime",
          "description": "Returns an object which is \"marked\" when the user clicked on the application button on the home screen. Calling TotalMilliseconds() on the returned roTimespan object returns the total number of milliseconds since the application started."
        }
      ],
      "name": "ifAppManager",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifAppManager",
      "documentationVersion": 13
    },
    "ifXMLList": {
      "methods": [
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetAttributes",
          "description": "If the list contains exactly one item, GetAttributes() returns the attributes of that item.  Otherwise it returns invalid."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            }
          ],
          "name": "GetNamedElementsCi",
          "description": "Similar to GetNamedElements(), but uses case-insensitive matching."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "Simplify",
          "description": "If the list contains exactly one item, Simplify() returns that item.  Otherwise, it returns itself"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetChildElements",
          "description": "If the list contains exactly one item, GetChildElements() returns the child elements of that item.  Otherwise it returns invalid."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            }
          ],
          "name": "GetNamedElements",
          "description": "Returns a new XMLList that contains all roXMLElements that matched the passed in name. This is the same as using the dot operator on an roXMLList. "
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetText",
          "description": "If the list contains exactly one item, GetText() returns the text of that item.  Otherwise it returns an empty string."
        }
      ],
      "name": "ifXMLList",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifXMLList",
      "documentationVersion": 5
    },
    "ifString": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "value",
              "type": "String"
            }
          ],
          "name": "SetString",
          "description": " "
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetString",
          "description": "SetString(value As String) As Void"
        }
      ],
      "name": "ifString",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifString",
      "documentationVersion": 4
    },
    "ifRegistry": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "section",
              "type": "String"
            }
          ],
          "name": "Delete",
          "description": "Deletes the specified section and returns an indication of success."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetSectionList",
          "description": "Returns an roList with one entry for each registry section.  Each element in the list is an roString containing the name of the section.  The section itself can be accessed by creating an  object using that name."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Flush",
          "description": "Flushes the registry out to persistent storage."
        }
      ],
      "name": "ifRegistry",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifRegistry",
      "documentationVersion": 6
    },
    "ifMessageDialog": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "EnableOverlay",
          "description": "With overlay enabled, the background screen is no longer dimmed."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "AddStaticText",
          "description": "Appends a static paragraph with the specified text. "
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "id",
              "type": "Integer"
            },
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "AddLeftButton",
          "description": "This function is similar to AddButton(), except that the button that gets added is left instead of right justified in the dialog box. "
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "SetText",
          "description": "Appends a paragraph with the specified text. "
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "id",
              "type": "Integer"
            },
            {
              "name": "userRating",
              "type": "Integer"
            },
            {
              "name": "aggregateRating",
              "type": "Integer"
            },
            {
              "name": "tip",
              "type": "String"
            }
          ],
          "name": "AddRatingButton",
          "description": "Adds a star rating button to the dialog. The rating is specified as an integer 1-100 which indicates the number of stars (1 to 5) to be displayed, or 0 if unrated. Think of this as a percentage value \u003c20% \u003d 1 star. This button is displayed in the menu area of the screen and appears in the order added. The userRating specifies the value the user rated the title, while the aggregate Rating represents the total for all users. The userRating takes precedence and determines the color of the buttons if set. The aggregateRating may display half-stars. The button returns the userRating in the event data field."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "topLeft",
              "type": "Boolean"
            }
          ],
          "name": "SetMenuTopLeft",
          "description": "If true, set the format of the buttons to left and top justified. Otherwise default to bottom right justified. Note that if you call AddRatingButton(), you must make the buttons top left justified."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "SetTitle",
          "description": "Set the title for the dialog to the specified string. The title appears in the top center of the dialog in bold text."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "AddButtonSeparator",
          "description": "Adds horizontal line separating buttons into sections on the dialog."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "id",
              "type": "Integer"
            },
            {
              "name": "userRating",
              "type": "Integer"
            },
            {
              "name": "aggregateRating",
              "type": "Integer"
            },
            {
              "name": "tip",
              "type": "String"
            }
          ],
          "name": "AddLeftRatingButton",
          "description": "This function adds a rating button similar to the rating buttons that can be inserted in roSpringboard screens.  The button is left justified in the dialog."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "id",
              "type": "Integer"
            },
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "UpdateButton",
          "description": "If a button with the specified id exists, sets the button title to the new title."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enableBackButton",
              "type": "Boolean"
            }
          ],
          "name": "EnableBackButton",
          "description": "Must set enableBackButton to true in order to send the isScreenClosed() event when the remote control\u0027s back button is pressed."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "ShowBusyAnimation",
          "description": "Display a spinning busy animation to indicate work in progress. The animation will continue until the screen is closed."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            }
          ],
          "name": "UpdateText",
          "description": "This function replaces the last paragraph with the specified text, or appends a paragraph if there is not a prior paragraph."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "id",
              "type": "Integer"
            },
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "AddButton",
          "description": "Adds a button to the screen identified by the title and ID provided."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "Show",
          "description": "Display or refresh the screen after creation or state changes."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Close",
          "description": "Close the screen and delete the associated object. Useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "item",
              "type": "Integer"
            }
          ],
          "name": "SetFocusedMenuItem",
          "description": "Set a button id to highlight. Default is the first button from the top. Return true if successful."
        }
      ],
      "name": "ifMessageDialog",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifMessageDialog",
      "documentationVersion": 19
    },
    "ifInt": {
      "methods": [
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetInt",
          "description": "SetInt(value As Integer) As Void"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "value",
              "type": "Integer"
            }
          ],
          "name": "SetInt",
          "description": " "
        }
      ],
      "name": "ifInt",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifInt",
      "documentationVersion": 4
    },
    "ifFont": {
      "methods": [
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetAscent",
          "description": "Returns the font ascent in pixels."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetMaxAdvance",
          "description": "Returns the font maximum advance width in pixels."
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "text",
              "type": "String"
            },
            {
              "name": "MaxWidth",
              "type": "Integer"
            }
          ],
          "name": "GetOneLineWidth",
          "description": "Returns the width in pixels for this particular string, when rendered with this font. Each glyph and the needed spacing between glyphs is measured. The returned number of pixels will be no larger than MaxWidth. MaxWidth is generally the amount of pixels available for rendering on this line."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetOneLineHeight",
          "description": "Returns the number of pixels from one line to the next when drawing with this font."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetDescent",
          "description": "Returns the font descent in pixels."
        }
      ],
      "name": "ifFont",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifFont",
      "documentationVersion": 7
    },
    "ifHMAC": {
      "methods": [
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "message",
              "type": "Object"
            }
          ],
          "name": "Process",
          "description": "The parameter should be an roByteArray.  The data in the array is digested and an MAC is generated.  Returns an containing the MAC."
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "digestType",
              "type": "String"
            },
            {
              "name": "key",
              "type": "Object"
            }
          ],
          "name": "Setup",
          "description": "Initialize new HMAC context.  The digestType parameter selects one of the supported digest algorithms, as documented in .  The key parameter must be an roByteArray containing the key for the MAC.  Returns 0 on success, -1 on failure."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "partialMesssage",
              "type": "Object"
            }
          ],
          "name": "Update",
          "description": "Add more data to be digested.  The parameter should be an roByteArray.  The data in the array is added to the current digest."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "Reinit",
          "description": "Re-initialize an existing HMAC context.  This can be called to reuse an existing roHMAC object to authenticate new data.  Returns 0 on success or non-zero on failure"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "Final",
          "description": "Return an containing the final MAC."
        }
      ],
      "name": "ifHMAC",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifHMAC",
      "documentationVersion": 5
    },
    "ifArraySort": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Reverse",
          "description": "Reverses the order of elements in an array."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "fieldName",
              "type": "String"
            },
            {
              "name": "flags",
              "type": "Dynamic"
            }
          ],
          "name": "SortBy",
          "description": "Performs a stable sort of an array of associative arrays by value of a common field."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "flags",
              "type": "Dynamic"
            }
          ],
          "name": "Sort",
          "description": "Performs a stable sort."
        }
      ],
      "name": "ifArraySort",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifArraySort",
      "documentationVersion": 6
    },
    "ifPinEntryDialog": {
      "methods": [
        {
          "returnType": "String",
          "parameters": [],
          "name": "Pin",
          "description": "Returns a string containing the PIN entered by the user."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "enableBackButton",
              "type": "Boolean"
            }
          ],
          "name": "EnableBackButton",
          "description": "You must call EnableBackButton with the parameter set to true in order to receive the isScreenClosed() event when the back button is entered."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "numFields",
              "type": "Integer"
            }
          ],
          "name": "SetNumPinEntryFields",
          "description": "Sets the maximum number of digits to be entered and displayed for the PIN."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "id",
              "type": "Integer"
            },
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "AddButton",
          "description": "Adds a button to the screen identified by the provided id.  The title is displayed on the button. The buttons are at the bottom of the screen and appear in the order added. When a button is pressed, the script will receive an  from the application indicating the ID of the button pressed."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Show",
          "description": "Display or refresh the screen after creation or state changes."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Close",
          "description": "Close the screen and delete the associated object. Useful for avoiding screen flicker when the display order of your screens does not resemble a stack."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "title",
              "type": "String"
            }
          ],
          "name": "SetTitle",
          "description": "Set the title for the screen to the specified string."
        }
      ],
      "name": "ifPinEntryDialog",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifPinEntryDialog",
      "documentationVersion": 5
    },
    "ifSocketConnectionOption": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "time",
              "type": "Integer"
            }
          ],
          "name": "SetLinger",
          "description": "Set the max time in seconds that the socket close() blocks to allow send data to be flushed in synchronous mode."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "SetNoDelay",
          "description": "Enable the No Delay property on the socket."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "GetKeepAlive",
          "description": "Return true if keep alive is set."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetLinger",
          "description": "Return the max time in seconds that the socket close() blocks to allow send data to be flushed in synchronous mode."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "GetNoDelay",
          "description": "Return true if no delay is on."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "SetKeepAlive",
          "description": "Enable keep alive if enable is true, otherwise disable it."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "time",
              "type": "Integer"
            }
          ],
          "name": "SetMaxSeg",
          "description": "Set the max TCP segment size."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetMaxSeg",
          "description": "Return the max TCP segment size."
        }
      ],
      "name": "ifSocketConnectionOption",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSocketConnectionOption",
      "documentationVersion": 5
    },
    "ifAudioMetadata": {
      "methods": [
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetTags",
          "description": "Returns an associative array that contains a simple set of tags that are common to most audio formats. This associative array contains:"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetAudioProperties",
          "description": "Returns an associative array with a simple set of audio properties. These are values which may involve reading a larger portion of the file and thus may take longer to retrieve than the tags. The associative array contains:"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetCoverArt",
          "description": "Returns the cover art if available. Returns an associative array with two entries: \"bytes\" and \"type\". \"bytes\" is an roByteArray containing the image data. \"type\" specifies the mime-type of the image which is almost always either \"image/jpeg\" or \"image/png\".  Looks for the picture designated as the cover art if there is more than one picture in the file. If there is no FrontCover picture then the first picture is used."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "url",
              "type": "String"
            }
          ],
          "name": "SetUrl",
          "description": "Sets the URL to the audio file. Only file URLs are initially supported."
        }
      ],
      "name": "ifAudioMetadata",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifAudioMetadata",
      "documentationVersion": 5
    },
    "ifSocket": {
      "methods": [
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "Status",
          "description": "Returns the errno of the last operation attempted or zero if the last operation was a success."
        },
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "length",
              "type": "Integer"
            }
          ],
          "name": "ReceiveStr",
          "description": "Reads up to length bytes from the socket and stores the result in a string."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "sockAddr",
              "type": "Object"
            }
          ],
          "name": "SetSendToAddress",
          "description": "Set remote address for next message to be sent"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetAddress",
          "description": "Returns the roSocketAddress object bound to this socket."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetSendToAddress",
          "description": "Returns roSocketAddress for remote address of next message to be sent"
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "data",
              "type": "Object"
            },
            {
              "name": "startIndex",
              "type": "Integer"
            },
            {
              "name": "length",
              "type": "Integer"
            }
          ],
          "name": "Send",
          "description": "Sends up to length bytes of data to the socket.  The data parameter is a containing the data to be sent, starting at the byte indexed by startIndex."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetCountSendBuf",
          "description": "Returns the number of bytes in the send buffer"
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "data",
              "type": "String"
            }
          ],
          "name": "SendStr",
          "description": "Sends the whole string to the socket if possible."
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "data",
              "type": "Object"
            },
            {
              "name": "startIndex",
              "type": "Integer"
            },
            {
              "name": "length",
              "type": "Integer"
            }
          ],
          "name": "Receive",
          "description": "Reads up to length bytes from the socket.  The data parameter is a into which data is stored, beginning at the byte indexed by startIndex."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Close",
          "description": "Performs an orderly close of socket."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "sockAddr",
              "type": "Object"
            }
          ],
          "name": "SetAddress",
          "description": "sockAddr is an roSocketAddress."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetReceivedFromAddress",
          "description": "Returns roSocketAddress for remote address of last message received via receive()"
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetCountRcvBuf",
          "description": "Returns the number of bytes in the receive buffer"
        }
      ],
      "name": "ifSocket",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSocket",
      "documentationVersion": 8
    },
    "ifSocketConnectionStatus": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "eIsConn",
          "description": "Return true if errno is EISCONN."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "eConnRefused",
          "description": "Return true if errno is ECONNREFUSED."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "eNotConn",
          "description": "Return true if errno is ENOTCONN."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "eConnReset",
          "description": "Return true if errno is ECONNRESET."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "eConnAborted",
          "description": "Return true if errno is ECONNABORTED."
        }
      ],
      "name": "ifSocketConnectionStatus",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSocketConnectionStatus",
      "documentationVersion": 5
    },
    "ifSGNodeBoundingRect": {
      "methods": [
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "itemnumber",
              "type": "String"
            }
          ],
          "name": "ancestorSubBoundingRect"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "sceneBoundingRect"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "boundingRect"
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "itemnumber",
              "type": "String"
            }
          ],
          "name": "localSubBoundingRect"
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "itemnumber",
              "type": "String"
            }
          ],
          "name": "subBoundingRect"
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "ancestornode",
              "type": "Object"
            }
          ],
          "name": "ancestorBoundingRect"
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "itemnumber",
              "type": "String"
            }
          ],
          "name": "sceneSubBoundingRect"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "localBoundingRect"
        }
      ],
      "name": "ifSGNodeBoundingRect",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSGNodeBoundingRect",
      "documentationVersion": 18
    },
    "ifTextureRequest": {
      "methods": [
        {
          "returnType": "Dynamic",
          "parameters": [
            {
              "name": "mode",
              "type": "Integer"
            }
          ],
          "name": "SetScaleMode",
          "description": "Set the scaling mode to be used.  The default is zero."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetId",
          "description": "Returns a unique id for the request."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetState",
          "description": "Returns the state of the request."
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "async",
              "type": "Boolean"
            }
          ],
          "name": "SetAsync",
          "description": "Sets the request to be either asynchronous (true) or synchronous (false).  The default is asynchronous."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "width",
              "type": "Integer"
            },
            {
              "name": "height",
              "type": "Integer"
            }
          ],
          "name": "SetSize",
          "description": "Set the desired size of the roBitmap.  The default is to return a bitmap in its native size."
        }
      ],
      "name": "ifTextureRequest",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifTextureRequest",
      "documentationVersion": 5
    },
    "ifDeviceInfo": {
      "methods": [
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetVideoMode",
          "description": "Returns a string representing the video playback resolution. The possible strings are:"
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "feature",
              "type": "String"
            }
          ],
          "name": "HasFeature",
          "description": "Returns true if the current device/firmware supports the passed in feature string."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetDisplaySize",
          "description": "Returns an with keys \"w\" and \"h\" that contain the values for the screen width and height respectively, either 720 and 480, or 1280 and 720. Example: { w:1280, h:720 }"
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetCurrentLocale",
          "description": "Returns a string representing the current locale based on the user\u0027s language setting.  The string is an ISO 639-1 (2-letter) language code followed by an underscore and a ISO 3166-1 (2-letter) country code.  Current possible values are:"
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetCaptionsMode",
          "description": "This function returns the current global setting for the Mode property. In other words, this function is used to determine whether global captions are turned on or off, or are in instant replay mode. The possible return values are those listed for the Mode property:"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetAudioDecodeInfo",
          "description": "Returns an  with the EDID (EIA.2FCEA-861) audio decoder information for the device connected to the HDMI port (or the device itself for a Roku TV) . Each audio decoder supported by the device is listed, with up to four numbers describing the decoder from the EDID SAD (Short Audio Descriptor). Each value is of the form \u003cnumber of channels\u003e:\u003cSAD1\u003e:\u003cSAD2\u003e:\u003cPassThru\u003e.  For example, the name \"DD+\" may have the value \"8:6:0:1\" where there are 8 independent audio tracks (7.1 audio), 6 is the SAD1 byte, 0 is the SAD2 byte, and 1 is the binary value that indicates this is a pass-through audio device (not a Roku TV).  The SAD1 and SAD2 bytes are interpreted differently for different codecs and more information about their values can be found here: http://en.wikipedia.org/wiki/Extended_display_identification_data#CEA_EDID_Timing_Extension_Version_3_data_format"
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetDeviceUniqueId",
          "description": "Returns the serial number of the unit running the script.  This is a 12 character alphanumeric string.  Note that this value should never be used as an account identifier on a server. See for more details."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetSupportedGraphicsResolutions",
          "description": "Return the list of supported graphics resolutions as a list of roAssociative arrays. Each array has the following keys: "
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetDisplayType",
          "description": "Returns the text corresponding to the button selection in the Player Info Settings/Display Type page. Either \"HDTV\", \"4:3 standard\", or \"16:9 anamorphic\""
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetConnectionInfo",
          "description": "Returns an Associative Array with these entries:"
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetRandomUUID",
          "description": "Returns a randomly generated unique identifier. The string returned is a Universally Unique Identifier (UUID) version 4 as specified in IETF-RFC 4122 with 36 characters (32 alphanumeric characters and four hyphens). The characters are grouped in the form 8-4-4-4-12, for example \"123e4567-e89b-12d3-a456-426655440000\".  Each time this function is called, a different identifier is returned."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetIPAddrs",
          "description": "Returns .  Each key in the AA is the name of a network interface and the value is the IP-address of the interface.  Normally there will be only one interface in the AA."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "video_format",
              "type": "Object"
            }
          ],
          "name": "CanDecodeVideo",
          "description": "Checks if the Roku Player can decode and play a video format specified as an associative array, and returns an associative array that includes a Boolean value indicating if the video format can be played, and the closest video format supported by the Roku Player."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "audio_format",
              "type": "Object"
            }
          ],
          "name": "CanDecodeAudio",
          "description": "Checks if the Roku Player can decode and play an audio format specified as an associative array, and returns an associative array that includes a Boolean value indicating if the audio format can be played, and the closest audio format supported by the Roku Player. The general format of the associative arrays for CanDecodeAudio() is similar to the parameter and return associative arrays used in CanDecodeVideo()."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetVersion",
          "description": "Returns the version number of the Roku Streaming Player firmware running on the device. This is a 13 character string; for example \"034.08E01185A\".  The third through sixth characters are the major/minor version number (\"4.08\") and the ninth through twelfth are the build number (\"1185\")."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetTimeZone",
          "description": "Returns a string representing the user\u0027s current system time zone setting.  Current possible values are:"
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetDisplayAspectRatio",
          "description": "Returns \"4x3\" or \"16x9\""
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetAudioOutputChannel",
          "description": "Returns a string representing the selected audio output (\"Stereo\" or \"5.1 surround\")."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetCountryCode",
          "description": "Returns an ISO 3166-1 (2-letter) country code representing the \"country\" (really a Roku channel store region) associated with the user\u0027s Roku account. Current possible values are:"
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetConnectionType",
          "description": "If the unit is connected via WiFi, returns the string \"WiFiConnection\". If the unit is connected via a wired connection, returns \"WiredConnection\". If the unit is not connected, returns an empty string."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetFriendlyName",
          "description": "Returns a string describing the device that may be used for network device selection.  The string may be a user-assigned device name or a description of the device such as model name and/or serial number.  The string is subject to change and should not be used as a persistent key or ID."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetPublisherId",
          "description": "Returns a unique identifier of the unit running the script. The string returned is a Universally Unique Identifier (UUID) as specified in IETF-RFC 4122 with 36 characters (32 alphanumeric characters and four hyphens). The characters are grouped in the form 8-4-4-4-12, for example \"123e4567-e89b-12d3-a456-426655440000\". This identifier is different across channels so each channel will get a different identifier when calling this function. This id is persistent and cannot be reset; It is therefore the recommended alternative to identifier returned by GetDeviceUniqueId(). Note that this identifier should not be used for channel authentication with a content provider service. This should instead be done using the devid in HTTP request headers as described in AddHeader(). The publisher ID should also not be used as a token for associating a Roku device to a content provider account."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsHDMIConnected",
          "description": "Returns true if an HDMI connection to a TV has been detected."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsAdIdTrackingDisabled",
          "description": "Returns True if the user has disabled Ad Id tracking by selecting \"Limit ad tracking\" from the Roku Settings menu.  If Ad Id tracking is disabled, the identifier returned by GetAdvertisingId() should not be used for Ad targeting."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetDisplayMode",
          "description": "Returns the configured graphics layer resolution: \"480i\" or \"480p\" (if the ui_resolutions manifest entry includes sd as a supported resolution, otherwise \"720p\" is returned), \"720p\", or \"1080p\" (if the ui_resolutions manifest file entry includes fhd as a supported resolution, otherwise \"720p\" is returned)."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetExternalIp",
          "description": "Returns the external IP address of the Roku player.  This is the address seen by the Internet and all other computers outside your local network."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "enable",
              "type": "Boolean"
            }
          ],
          "name": "EnableLinkStatusEvent",
          "description": "Enables or disables sending an roDeviceInfoEvent when the network connection status changes.  The default is disabled."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetSoundEffectsVolume",
          "description": "Returns the user interface sounds effects volume as a percentage. A return value of 0 indicates that UI sound effects are muted, and a value of 100 indicates that they are set to the maximum volume level."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetVideoDecodeInfo",
          "description": "Returns an  with the EDID (EIA.2FCEA-861) information describing the video display."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetDrmInfo",
          "description": "Returns an associative array with the supported DRM system and features. For example, a device that supports PlayReady inside a trusted environment with secure stop returns:"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetDisplayProperties",
          "description": "Returns an with the following key/value pairs:"
        },
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "option",
              "type": "String"
            }
          ],
          "name": "GetCaptionsOption",
          "description": "This function returns the current value of the specified global setting property. The value returned is one of the possible values for the specified property. The option argument passed to the GetCaptionsOption() function can be one of the following:"
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetAdvertisingId",
          "description": "Returns a unique identifier of the unit running the script.  The string returned is a Universally Unique Identifier (UUID) as specified in IETF-RFC 4122 with 36 characters (32 alphanumeric characters and four hyphens). The characters are grouped in the form 8-4-4-4-12, for example \"123e4567-e89b-12d3-a456-426655440000\". This identifier is persistent but can be reset by the user from the device\u0027s Settings menu  or by performing a factory reset on the device. If the user has disabled Ad ID tracking from the settings menu, then this identifier should not be used for targeted advertising. IsAdIdTrackingDisabled() should be called to check if the user has disabled Ad ID tracking."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetUIResolution",
          "description": "Returns an associative array describing the current UI resolution. The associative array contains the following key-value pairs:"
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "GetLinkStatus",
          "description": "Returns true if the player seems to have an active network connection."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "TimeSinceLastKeypress",
          "description": "Returns the number of seconds since the last remote keypress was received."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetModelDisplayName",
          "description": "Returns the model display name for the Roku Streaming Player device running the script (for example, \"Roku 2 XD\")."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetModelDetails",
          "description": "Returns an associative array containing more information about the device model.  The following keys are defined:"
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetModel",
          "description": "Returns the model name for the Roku Streaming Player device running the script.  This is a five character alphanumeric string; for example \"3050X\". Please see Roku Models and Features of the Developer Guide for a list of the current and classic models."
        }
      ],
      "name": "ifDeviceInfo",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifDeviceInfo",
      "documentationVersion": 76
    },
    "ifSGNodeHttpAgentAccess": {
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "HTTP_agent",
              "type": "Object"
            }
          ],
          "name": "setHttpAgent"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "getHttpAgent"
        }
      ],
      "name": "ifSGNodeHttpAgentAccess",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifSGNodeHttpAgentAccess",
      "documentationVersion": 1
    },
    "ifArray": {
      "methods": [
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "Pop",
          "description": "Returns the last (highest index) array entry and removes it from the array.  If the array is empty, returns invalid and does not change the array."
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "Shift",
          "description": "Removes the index zero entry from the array and shifts every other entry down one to fill the hole.  Returns the removed entry.  This is like a Pop from the start of the array instead of the end."
        },
        {
          "returnType": "Boolean",
          "parameters": [
            {
              "name": "index",
              "type": "Integer"
            }
          ],
          "name": "Delete",
          "description": "Deletes the indicated array entry, and shifts down all entries above to fill the hole. The array length is decreased by one.  If the entry was successfully deleted, returns true.  If index is out of range, returns false and does not change the array."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "array",
              "type": "Object"
            }
          ],
          "name": "Append",
          "description": "Appends each entry of one roArray to another. If the passed Array contains \"holes\" (entries that were never set to a value), they are not appended."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "tvalue",
              "type": "Dynamic"
            }
          ],
          "name": "Unshift",
          "description": "Adds a new index zero to the array and shifts every other entry up one to accommodate. This is like a Push to the start of the array instead of the end."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "Count",
          "description": "Returns the length of the array; that is, one more than the index of highest entry."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "tvalue",
              "type": "Dynamic"
            }
          ],
          "name": "Push",
          "description": "Adds tvalue as the new highest index entry in the array (adds to the end of the array)."
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "Peek",
          "description": "Returns the last (highest index) array entry without removing it.  If the array is empty, returns invalid."
        },
        {
          "returnType": "Void",
          "parameters": [],
          "name": "Clear",
          "description": "Deletes every entry in the array."
        }
      ],
      "name": "ifArray",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifArray",
      "documentationVersion": 6
    },
    "ifEVPDigest": {
      "methods": [
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "bytes",
              "type": "Object"
            }
          ],
          "name": "Process",
          "description": "The parameter should be an roByteArray.  The data in the array is digested and the digest is returned as a hex string."
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "digestType",
              "type": "String"
            }
          ],
          "name": "Setup",
          "description": "Initialize a new message digest context.  digestType identifies one of the supported digest algorithms from openssl, listed at"
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "bytes",
              "type": "Object"
            }
          ],
          "name": "Update",
          "description": "Add more data to be digested.  The parameter should be an roByteArray.  The data in the array is added to the current digest."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "Reinit",
          "description": "Re-initialize an existing message digest context.  This can be called to reuse an existing roEVPDigest object to digest new data.  Returns 0 on success or non-zero on failure."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "Final",
          "description": "Returns the digest of data passed in by previous calls to Update() as a hex string."
        }
      ],
      "name": "ifEVPDigest",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifEVPDigest",
      "documentationVersion": 5
    },
    "ifStringOps": {
      "methods": [
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "s",
              "type": "String"
            },
            {
              "name": "len",
              "type": "Integer"
            }
          ],
          "name": "SetString",
          "description": "Sets the string to the first len characters of s.  Note that there is a similar function in the ifString interface, ifString.SetString(), which does not take a length parameter."
        },
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "from",
              "type": "String"
            },
            {
              "name": "to",
              "type": "String"
            }
          ],
          "name": "Replace",
          "description": "Returns a copy of the string with all instances of fromStr replaced with toStr.  If fromStr is empty the return value is the same as the source string."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetEntityEncode",
          "description": "Returns the string with certain characters replaced with the corresponding HTML entity encoding sequence:"
        },
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "len",
              "type": "Integer"
            }
          ],
          "name": "Left",
          "description": "Returns a string consisting of the first len characters of the string."
        },
        {
          "returnType": "Float",
          "parameters": [],
          "name": "ToFloat",
          "description": "Returns the value of the string interpreted as a floating point number."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "Trim",
          "description": "Returns the string with any leading and trailing whitespace characters removed."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "ToInt",
          "description": "Returns the value of the string interpreted as a decimal number."
        },
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "len",
              "type": "Integer"
            }
          ],
          "name": "Right",
          "description": "Returns a string consisting of the last len characters of the string."
        },
        {
          "returnType": "String",
          "parameters": [
            {
              "name": "start_index",
              "type": "Integer"
            }
          ],
          "name": "Mid",
          "description": "Returns a string consisting of the last characters of the string, starting at the zero-based start_index."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "Len",
          "description": "Returns the number of characters in the string."
        },
        {
          "returnType": "Integer",
          "parameters": [
            {
              "name": "substring",
              "type": "String"
            }
          ],
          "name": "Instr",
          "description": "Returns the zero-based index of the first occurrence of substring in the string. If the substring does not occur in the string, returns -1."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "delim",
              "type": "String"
            }
          ],
          "name": "Tokenize",
          "description": "Splits the string into separate substrings separated by a single delimiter character.  The delim parameter specifies a set of characters which are treated as delimiters.  A sequence of two or more contiguous delimiters in the string is treated as a single delimiter.  Returns an roList containing each of the substrings.  The delimiters are not returned."
        },
        {
          "returnType": "Object",
          "parameters": [
            {
              "name": "separator",
              "type": "String"
            }
          ],
          "name": "Split",
          "description": "Splits the input string using the separator string as a delimiter, and returns an array of the split token strings (not including the delimiter(s)). An empty separator string indicates to split the string by character."
        },
        {
          "returnType": "Void",
          "parameters": [
            {
              "name": "s",
              "type": "String"
            },
            {
              "name": "len",
              "type": "Integer"
            }
          ],
          "name": "AppendString",
          "description": "Appends the first len characters of s to the end of the string."
        }
      ],
      "name": "ifStringOps",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/ifStringOps",
      "documentationVersion": 14
    }
  },
  "Events": {
    "roTextureRequestEvent": {
      "shortDescription": "The sends the roTextureRequestEvent after completing a request.",
      "methods": [
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetBitmap",
          "description": "Returns an roBitmap from the request if the state is ready."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetId",
          "description": "Returns the unique id of the request."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetState",
          "description": "Returns the state of the request.  See .GetState() for the list of states."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetURI",
          "description": "Returns the URI of the request."
        }
      ],
      "name": "roTextureRequestEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roTextureRequestEvent",
      "documentationVersion": 2
    },
    "roSGNodeEvent": {
      "shortDescription": "An roSGNode object sends roSGNodeEvent messages to a specified port when changes occur in nodes, to allow a Scene Graph application to respond to events in the application using the following methods.",
      "methods": [
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "getField",
          "description": "Retrieves the name of the field that changed."
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "getRoSGNode",
          "description": "Retrieves a pointer to the node. This can be used for nodes without an ID."
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "getNode",
          "description": "Retrieves the ID of the node that changed."
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "getData",
          "description": "Retrieves the new field value at the time of the change."
        }
      ],
      "name": "roSGNodeEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roSGNodeEvent",
      "documentationVersion": 4
    },
    "roSlideShowEvent": {
      "shortDescription": "The roSlideShow sends the roSlideShowEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isPaused",
          "description": "The slide show was paused."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isResumed",
          "description": "The slide show has resumed."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isScreenClosed",
          "description": "The screen was closed and is no longer displayed to the user."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isRequestFailed",
          "description": "An image in the slide show could not be decoded."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isPlaybackPosition",
          "description": "A new image has been displayed in the slide show."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isButtonPressed",
          "description": "A button on the screen was selected."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isRemoteKeyPressed",
          "description": "A remote key was pressed."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isRequestSucceeded",
          "description": "An image has been successfully displayed."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "Returns the ID of the button which was selected (the first parameter to AddButton)."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isRequestInterrupted",
          "description": "The slide show was interrupted."
        }
      ],
      "name": "roSlideShowEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roSlideShowEvent",
      "documentationVersion": 2
    },
    "roSystemLogEvent": {
      "shortDescription": "roSystemLogEvents are sent when enabled via .   roSystemLogEvent has the following method:",
      "methods": [
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetInfo",
          "description": "Returns an AssociativeArray containing information describing the event."
        }
      ],
      "name": "roSystemLogEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roSystemLogEvent",
      "documentationVersion": 1
    },
    "roOneLineDialogEvent": {
      "shortDescription": "Sends the roOneLineDialogEvent with the following predicates that indicate its valid event types: ",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isScreenClosed",
          "description": "The screen was closed and is no longer displayed to the user."
        }
      ],
      "name": "roOneLineDialogEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roOneLineDialogEvent",
      "documentationVersion": 2
    },
    "roSpringboardScreenEvent": {
      "shortDescription": "The roSpringboardScreen sends the roSpringboardScreenEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isScreenClosed",
          "description": "The screen was closed and is no longer displayed to the user."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetData",
          "description": "If the button type is a rating button, returns the value of the user selection."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isButtonPressed",
          "description": "A button on the screen was selected."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isRemoteKeyPressed",
          "description": "A remote key was pressed."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "Returns the ID of the button which was selected (the first parameter to AddButton)."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isButtonInfo",
          "description": "The Info remote key was pressed."
        }
      ],
      "name": "roSpringboardScreenEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roSpringboardScreenEvent",
      "documentationVersion": 3
    },
    "roVideoScreenEvent": {
      "shortDescription": "The roVideoScreen sends the roVideoScreenEvent with the same predicates as in . The one exception is isScreenClosed, supported by roVideoScreenEvent but not roVideoPlayerEvent (since roVideoPlayer isn\u0027t a screen.)",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isScreenClosed",
          "description": "The screen was closed and is no longer displayed to the user."
        }
      ],
      "name": "roVideoScreenEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roVideoScreenEvent",
      "documentationVersion": 2
    },
    "roHdmiStatusEvent": {
      "shortDescription": "The roHdmiStatus sends the roHdmiStatusEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isHdmiStatus",
          "description": "An HDMI status event has occurred."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetMessage",
          "description": "Returns the string \"HdmiHotPlug\"."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetInfo",
          "description": "Returns an associative array with the following key/value pairs:"
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "The index value of this event is not used and is always set to 0."
        }
      ],
      "name": "roHdmiStatusEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roHdmiStatusEvent",
      "documentationVersion": 1
    },
    "roListScreenEvent": {
      "shortDescription": "The roListScreen sends the roListScreenEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isListItemSelected",
          "description": "A content item in the list screen has been selected."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isScreenClosed",
          "description": "The screen was closed and is no longer displayed to the user."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isListItemFocused",
          "description": "A new content item in the list screen has gained focus."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isRemoteKeyPressed",
          "description": "A remote key was pressed."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "Returns the index of currently focused list item."
        }
      ],
      "name": "roListScreenEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roListScreenEvent",
      "documentationVersion": 4
    },
    "roSocketEvent": {
      "shortDescription": "An roStreamSocket or roDataGramSocket object sends the roSocketEvent to indicate a change in the status of the socket.   The socket must enable specific event notifications via the notify methods of ifSocketAsync.",
      "methods": [
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetSocketID",
          "description": "Returns the ID of the socket this event is for.  The ID of a socket can be obtained from ifSocketAsync.GetID()."
        }
      ],
      "name": "roSocketEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roSocketEvent",
      "documentationVersion": 1
    },
    "roTextToSpeechEvent": {
      "shortDescription": "The component sends the roTextToSpeechEvent with the following predicates that indicate its valid event types.",
      "methods": [
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetData",
          "description": "Returns one of the following integer values:"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetInfo",
          "description": "Returns an associative array with the following key-value pairs, depending the value returned by the GetData() method:"
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "Returns the ID of the speech as returned by either the Say() or Silence() methods of the interface. Since the text to speech service may be shared among any number of clients, the IDs returned to a given client are not necessarily contiguous. The value is only meaningful if GetData() returned 0, 1 or 2; it returns 0 otherwise."
        }
      ],
      "name": "roTextToSpeechEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roTextToSpeechEvent",
      "documentationVersion": 4
    },
    "roTunerEvent": {
      "shortDescription": "During playback of a stream from the tuner using roVideoPlayer or roVideoScreen, the corresponding event (roVideoPlayerEvent, roVideoScreenEvent) is raised with the following predicates:",
      "methods": [
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetInfo",
          "description": "Returns an associative array containing a key, percent, that has an integer value. The value is the current tuner signal quality as a percentage. 0 indicates that there is no signal."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isSignalQuality",
          "description": "This event is fired periodically during tuner playback to give signal information, most importantly indicating if the signal has been lost."
        }
      ],
      "name": "roTunerEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roTunerEvent",
      "documentationVersion": 2
    },
    "roCodeRegistrationScreenEvent": {
      "shortDescription": "The roCodeRegistrationScreen sends the roCodeRegistrationScreenEvent with the following predicates that indicate its valid event types: ",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isScreenClosed",
          "description": "The screen was closed and is no longer displayed to the user."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isButtonPressed",
          "description": "A button on the screen was selected."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "Returns the ID of the button which was selected (the first parameter to AddButton)."
        }
      ],
      "name": "roCodeRegistrationScreenEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roCodeRegistrationScreenEvent",
      "documentationVersion": 1
    },
    "roTextScreenEvent": {
      "shortDescription": "The roTextScreen sends the roTextScreenEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isScreenClosed",
          "description": "The screen was closed and is no longer displayed to the user."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isButtonPressed",
          "description": "A button on the screen was selected."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "Returns the ID of the button which was selected (the first parameter to AddButton)."
        }
      ],
      "name": "roTextScreenEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roTextScreenEvent",
      "documentationVersion": 1
    },
    "roInputEvent": {
      "shortDescription": "The roInput component sends the roInputEvent with the following predicates that indicate its valid event types:  ",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isInput",
          "description": "An input event was received."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetInfo",
          "description": "Returns an roAssociativeArray describing the input event. "
        }
      ],
      "name": "roInputEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roInputEvent",
      "documentationVersion": 5
    },
    "roKeyboardScreenEvent": {
      "shortDescription": "The roKeyboardScreen sends the roKeyboardScreenEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isScreenClosed",
          "description": "The screen was closed and is no longer displayed to the user."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isButtonPressed",
          "description": "A button on the screen was selected."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "Returns the ID of the button which was selected (the first parameter to AddButton)."
        }
      ],
      "name": "roKeyboardScreenEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roKeyboardScreenEvent",
      "documentationVersion": 1
    },
    "roDeviceInfoEvent": {
      "shortDescription": "The roDeviceInfo object sends the roDeviceInfoEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isStatusMessage",
          "description": "Device status has changed."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetInfo",
          "description": "Returns an roAssociativeArray containing the following members:"
        }
      ],
      "name": "roDeviceInfoEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roDeviceInfoEvent",
      "documentationVersion": 1
    },
    "roFileSystemEvent": {
      "shortDescription": "The roFileSystem component sends the roFileSystemEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isStorageDeviceAdded",
          "description": "A storage device was inserted in the USB port."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetMessage",
          "description": "Returns volume name of added device."
        },
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "isStorageDeviceRemoved",
          "description": "A storage device was removed from the USB port."
        }
      ],
      "name": "roFileSystemEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roFileSystemEvent",
      "documentationVersion": 1
    },
    "roSearchScreenEvent": {
      "shortDescription": "The roSearchScreen sends the roSearchScreenEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Dynamic",
          "parameters": [],
          "name": "IsFullResult",
          "description": "The results received are a complete search request."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsScreenClosed",
          "description": "The screen was closed and is no longer displayed to the user."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsCleared",
          "description": "The search list has been cleared."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsButtonInfo",
          "description": "The Info remote key was pressed.  This is only emitted for the search results on the right side of the screen."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetMessage",
          "description": "Returns text of partial result."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsPartialResult",
          "description": "The results received are a partial entry based on last key."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "Returns the index of the item which was selected when the Info key was pressed."
        }
      ],
      "name": "roSearchScreenEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roSearchScreenEvent",
      "documentationVersion": 2
    },
    "roChannelStoreEvent": {
      "shortDescription": "The roChannelStore sends an roChannelStoreEvent in response to a call to any of several Get* methods in . The following predicates indicate its valid event types:",
      "methods": [
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetStatusMessage",
          "description": "Returns a human-readable string describing the status of the completed request."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetSourceIdentity",
          "description": "Return the source identity of the Channel Store object this event is associated with."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isRequestFailed",
          "description": "The previous Get request failed."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetResponse",
          "description": "Returns an roList of roAssociativeArray items for the previous Get* method invocation. The format of each roAssociativeArray item depends on which Get* method was invoked. See for more details. In the case of a successfully completed ifChannelStore.DoOrder() initiated purchase transaction, the object returned by GetResponse() is an associative array containing the following information:"
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isRequestSucceeded",
          "description": "The previous Get request has completed successfully."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetStatus",
          "description": "Returns an Integer code that indicates the reason for failure:"
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isRequestInterrupted",
          "description": "The previous Get request did not complete."
        }
      ],
      "name": "roChannelStoreEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roChannelStoreEvent",
      "documentationVersion": 8
    },
    "roGridScreenEvent": {
      "shortDescription": "The roGridScreen sends the roGridScreenEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isListItemSelected",
          "description": "A content item in the poster screen has been selected."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isScreenClosed",
          "description": "The screen was closed and is no longer displayed to the user."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isListItemFocused",
          "description": "A new content item in the poster screen has gained focus."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetData",
          "description": "Returns the index of the currently focused item (column)."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isRemoteKeyPressed",
          "description": "A remote key was pressed."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "Returns the index of the currently focused list (row)."
        }
      ],
      "name": "roGridScreenEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roGridScreenEvent",
      "documentationVersion": 1
    },
    "roMessageDialogEvent": {
      "shortDescription": "The roMessageDialog sends the roMessageDialogEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isScreenClosed",
          "description": "The screen was closed and is no longer displayed to the user."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isButtonPressed",
          "description": "A button on the screen was selected."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "Returns the ID of the button which was selected (the first parameter to AddButton)."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isButtonInfo",
          "description": "The Info remote key was pressed."
        }
      ],
      "name": "roMessageDialogEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roMessageDialogEvent",
      "documentationVersion": 1
    },
    "roAudioPlayerEvent": {
      "shortDescription": "The roAudioPlayer sends the roAudioPlayerEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isListItemSelected",
          "description": "A stream has been selected to start playing."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isStatusMessage",
          "description": "Status information is available."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isFullResult",
          "description": "Audio playback completed at end of content."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isPaused",
          "description": "Audio playback was paused by the user."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isResumed",
          "description": "Audio playback has resumed."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isPartialResult",
          "description": "Audio playback was interrupted. "
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isRequestFailed",
          "description": "Audio playback failed due to an error."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isTimedMetaData",
          "description": "This event is fired when an ID3 timecode has passed with an event that includes key/value pairs for timed metadata that the Brightscript channel is interested in."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetMessage",
          "description": "Returns one of the following strings:"
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetInfo",
          "description": "Returns an associative array of key/value pairs of timedMetadata at the pts timecode specified in the index."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isRequestSucceeded",
          "description": "Stream playback has completed successfully."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "Returns index of audio stream."
        }
      ],
      "name": "roAudioPlayerEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roAudioPlayerEvent",
      "documentationVersion": 5
    },
    "roUniversalControlEvent": {
      "shortDescription": "The roScreen object sends the roUniversalControlEvent with the following related methods. If an app constrains the events processed to just the roUniversalControlEvent, the app will work with any controller. The GetID(), GetChar(), GetKey(), and IsPress() methods can be used instead of parsing the GetInt() return value to more effectively distinguish between remote control and keyboard key presses, and the key press and release events.",
      "methods": [
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetInt",
          "description": "Returns an integer representing pressed or released keys on the remote. This table can be accessed at runtime by calling bslCore.brs: bslUniversalControlEventCodes()."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetKey",
          "description": "Available since firmware version 7.2"
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetID",
          "description": "Available since firmware version 7.2"
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "IsPress",
          "description": "Available since firmware version 7.2"
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetChar",
          "description": "Available since firmware version 7.2"
        }
      ],
      "name": "roUniversalControlEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roUniversalControlEvent",
      "documentationVersion": 5
    },
    "roCaptionRendererEvent": {
      "shortDescription": " ",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isCaptionUpdateRequest",
          "description": "This event notifies the BrightScript channel that a caption is ready to be rendered by the firmware.  In response, if the channel uses roScreen, the BrightScript code must call UpdateCaption() to tell the Roku firmware to draw the caption text.  If roImageCanvas is being used, this function does not need to be called."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isCaptionText",
          "description": "This event is fired when the roCaptionRenderer has mode 2 set whenever a caption is encountered in the stream or external caption file.  A BrightScript channel should respond to this event by rendering the caption string passed with the event using whatever font, placement, etc. the channel desires."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetMessage",
          "description": "This returns the caption string."
        }
      ],
      "name": "roCaptionRendererEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roCaptionRendererEvent",
      "documentationVersion": 4
    },
    "roParagraphScreenEvent": {
      "shortDescription": "The roParagraphScreen sends the roParagraphScreenEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isScreenClosed",
          "description": "The screen was closed and is no longer displayed to the user."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isButtonPressed",
          "description": "A button on the screen was selected."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "Returns the ID of the button which was selected (the first parameter to AddButton)."
        }
      ],
      "name": "roParagraphScreenEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roParagraphScreenEvent",
      "documentationVersion": 1
    },
    "roPinEntryDialogEvent": {
      "shortDescription": "The roPinEntryDialog sends the roPinEntryDialogEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isScreenClosed",
          "description": "The screen was closed and is no longer displayed to the user."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isButtonPressed",
          "description": "A button on the screen was selected."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "Returns the ID of the button which was selected (the first parameter to AddButton)."
        }
      ],
      "name": "roPinEntryDialogEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roPinEntryDialogEvent",
      "documentationVersion": 1
    },
    "roUrlEvent": {
      "shortDescription": "The roUrlTransfer component sends the roUrlEvent with the following methods:",
      "methods": [
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetTargetIpAddress",
          "description": "Returns the IP address of the destination. "
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetResponseHeadersArray",
          "description": "Returns an roArray of roAssociativeArrays. Each associative array contains a single header name/value pair. Use this function if you need access to duplicate headers, since GetResponseHeaders() returns only the last name/value pair for a given name. All headers are returned regardless of the status code."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetSourceIdentity",
          "description": "Returns a magic number that can be matched with the value returned by roUrlTransfer.GetIdentity() to determine which roUrlTransfer this event came from."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetResponseCode",
          "description": "Returns the protocol response code associated with this event. For a successful HTTP request this will be the HTTP status code 200."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetResponseHeaders",
          "description": "Returns an roAssociativeArray containing all the headers returned by the server for appropriate protocols (such as HTTP)."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetInt",
          "description": "Returns the type of event. The following event types are currently defined:"
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetFailureReason",
          "description": "Returns a description of the failure that occurred."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetString",
          "description": "Return the string associated with the event. For transfer complete AsyncGetToString, AsyncPostFromString and AsyncPostFromFile requests this will be the actual response body from the server."
        }
      ],
      "name": "roUrlEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roUrlEvent",
      "documentationVersion": 3
    },
    "roVideoPlayerEvent": {
      "shortDescription": "The roVideoPlayer sends the roVideoPlayerEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isPaused",
          "description": "Video playback was paused by the user."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isFormatDetected",
          "description": "This event is fired when the format of all tracks in the media stream have been identified."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isPartialResult",
          "description": "Video playback was interrupted."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isRequestFailed",
          "description": "Video playback has failed."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isSegmentDownloadStarted",
          "description": "This event is fired when each individual segment in an HLS or smooth stream is about to be downloaded."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isStreamStarted",
          "description": "The video stream has started playing."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "Returns the number of seconds from play to start streaming."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isStatusMessage",
          "description": "Status information is available."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isFullResult",
          "description": "Video playback has completed at end of content."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isResumed",
          "description": "Video playback has resumed."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isCaptionModeChanged",
          "description": "The closed caption mode or track has been changed by the user. Further information on the event can be returned by calling the following functions on the event."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isTimedMetaData",
          "description": "This event is fired when an ID3 timecode has passed with an event that includes key/value pairs for timed metadata that the BrightScript channel is interested in."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isPlaybackPosition",
          "description": "The current position in the video stream has changed.  This is sent periodically while playing, as determined by the last call to ifVideoPlayer.SetPositionNotificationPeriod."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isStreamSegmentInfo",
          "description": "This event is fired at the beginning of playback of each individual segment in an HLS or smooth stream. "
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetMessage",
          "description": "Returns text description of error."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isDownloadSegmentInfo",
          "description": "This event is fired after each individual segment in an HLS or smooth stream has been downloaded."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetInfo",
          "description": "Returns an Associative Array containing these members:"
        }
      ],
      "name": "roVideoPlayerEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roVideoPlayerEvent",
      "documentationVersion": 18
    },
    "roSGScreenEvent": {
      "shortDescription": "roSGScreenEvents are events sent to a scene graph roSGScreen by the framework.  Other than when notifying the channel\u0027s main BrightScript thread that the screen is being closed, and thus that the channel should be terminated, channels do not generally handle these events.",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isScreenClosed",
          "description": "Sent to the screen when it is closed.  Channels respond to this event by exiting the main BrightScript thread to exit the application."
        }
      ],
      "name": "roSGScreenEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roSGScreenEvent",
      "documentationVersion": 2
    },
    "roPosterScreenEvent": {
      "shortDescription": "The roPosterScreen sends the roPosterScreenEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isListItemSelected",
          "description": "A content item in the poster screen has been selected."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isListFocused",
          "description": "A new category in the filter banner has gained focus."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isAdSelected",
          "description": "The banner advertisement in the poster screen has been selected."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isScreenClosed",
          "description": "The screen was closed and is no longer displayed to the user."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isListItemFocused",
          "description": "A new content item in the poster screen has gained focus."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isListItemInfo",
          "description": "The Info remote key was pressed."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isRemoteKeyPressed",
          "description": "A remote key was pressed.  Currently only left/right navigation events are passed which allow the caller to navigate the content list from the springboard level."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isListSelected",
          "description": "A category on the filter banner has been selected."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "Returns the index of the currently focused category."
        }
      ],
      "name": "roPosterScreenEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roPosterScreenEvent",
      "documentationVersion": 3
    },
    "roHdmiHotPlugEvent": {
      "shortDescription": "The roHdmiStatus sends the roHdmiHotPlugEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isHdmiHotPlug",
          "description": "An HDMI hot plug has occurred."
        },
        {
          "returnType": "String",
          "parameters": [],
          "name": "GetMessage",
          "description": "Returns the string \"HdmiHotPlug\"."
        },
        {
          "returnType": "Object",
          "parameters": [],
          "name": "GetInfo",
          "description": "Returns an associative array with the following key/value pairs:"
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "The index value of this event is not used and is always set to 0."
        }
      ],
      "name": "roHdmiHotPlugEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roHdmiHotPlugEvent",
      "documentationVersion": 1
    },
    "roImageCanvasEvent": {
      "shortDescription": "The roImageCanvas sends the roImageCanvasEvent with the following predicates that indicate its valid event types:",
      "methods": [
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isScreenClosed",
          "description": "The screen was closed and is no longer displayed to the user."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isButtonPressed",
          "description": "A button on the screen was selected."
        },
        {
          "returnType": "Boolean",
          "parameters": [],
          "name": "isRemoteKeyPressed",
          "description": "A remote key was pressed."
        },
        {
          "returnType": "Integer",
          "parameters": [],
          "name": "GetIndex",
          "description": "Returns the ID of the remote key which was pressed.  Remote key IDs are listed under roUniversalControlEvent."
        }
      ],
      "name": "roImageCanvasEvent",
      "description": "",
      "descriptionHTML": "",
      "documentationURL": "https://sdkdocs.roku.com/display/sdkdoc/roImageCanvasEvent",
      "documentationVersion": 4
    }
  }
}